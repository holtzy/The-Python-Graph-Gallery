{"version":3,"file":"component---src-pages-wordcloud-js-dc1ffa209ed8a7dcd869.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/pages/wordcloud.js"],"sourcesContent":["// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta property=\"og:title\" content={title} />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Col } from 'react-bootstrap';\nimport ChartImage from '../components/ChartImage';\nimport SectionLogoWithOverlay from '../components/SectionLogoWithOverlay';\nimport { chartTypesInfo } from '../util/sectionDescriptions';\nimport { fullUrlToInternalLink } from '../util/utils';\nimport CodeChunk from '../components/CodeChunk';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\n\nconst logoToKeep = ['lollipop', 'barplot', 'treemap', 'circularPacking'];\nconst WordAlternativeLogos = () => {\n  const allLogos = chartTypesInfo\n    .filter((chart) => logoToKeep.includes(chart.id))\n    .map((chart, id) => {\n      const link = fullUrlToInternalLink(chart.pythonURL);\n      return (\n        <Col key={id} xs={4} md={2}>\n          <SectionLogoWithOverlay\n            link={link}\n            chartType={chart.logo}\n            caption={chart.label}\n          />\n        </Col>\n      );\n    });\n\n  return (\n    <div>\n      <Row>{allLogos}</Row>\n    </div>\n  );\n};\n\nconst quickCode = `# Libraries\nfrom wordcloud import WordCloud\nimport matplotlib.pyplot as plt\n\n# Create a list of word\ntext=(\"Python Python Python Matplotlib\")\n\n# Create the wordcloud object\nwordcloud = WordCloud(width=480, height=480, margin=0).generate(text)\n\n# Display the generated image:\nplt.imshow(wordcloud, interpolation='bilinear')\nplt.axis(\"off\")\nplt.margins(x=0, y=0)\nplt.show()\n`;\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/wordcloud.html'>word cloud</a> (also called <a href='https://www.data-to-viz.com/graph/wordcloud.html'>tag cloud</a> or <a href='https://www.data-to-viz.com/graph/wordcloud.html'>weighted list</a>) is a visual representation of text data. Words are usually single words, and the importance of each is shown with font size or color. <code>Python</code> fortunately has a <code>wordcloud</code> library allowing to build them.</p>\";\n\nexport const Head = () => (\n  <SEO\n    title=\"Wordcloud\"\n    seoDescription=\"A collection of wordcloud examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function Wordcloud() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Wordcloud\"\n        description={chartDescription}\n        chartType=\"wordcloud\"\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              The <code>wordcloud</code> library is here to help you build a\n              wordcloud in minutes. Here is a basic code snippets using the{' '}\n              <code>WordCloud()</code> function to get you started.🔥\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/260-basic-wordcloud'}>\n              <ChartImage\n                imgName=\"260-basic-wordcloud\"\n                caption=\"Most basic wordcloud with python and the wordcloud library.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"warning\">\n        <Container>\n          <h2 id=\"Warning\">&#9888;&#65039; The issue with wordclouds</h2>\n          <p>\n            Wordclouds are aesthetically pleasing and people are used to it,\n            what make sure readers will understand them quick.\n          </p>\n          <p>\n            However, it is important to consider the caveats associated to them.\n            For instance,\n            <u>longer words</u> will t<u>ake more space</u> on the figure by\n            construction which distorts reality. Moreover, it is impossible to{' '}\n            <u>translate a font size</u> to an accurate value.\n          </p>\n          <WordAlternativeLogos />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Wordcloud\">\n          Wordclouds with... the <code>wordcloud</code> library &#128512;\n        </h2>\n        <p>\n          Thanks to the{' '}\n          <a href=\"https://github.com/amueller/word_cloud\">wordcloud</a>{' '}\n          library, we have a <code>Wordcloud()</code> function. We just have to\n          pass a <b>large string</b> of text to it, and it will generate a\n          wordcloud for us.\n        </p>\n        <p>\n          Then, we just have to call the <code>imshow()</code> function from\n          matplotlib to <b>display the wordcloud</b>.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"261-custom-python-wordcloud-1\"\n            caption=\"Simple wordcloud\"\n            linkTo=\"/261-custom-python-wordcloud\"\n          />\n          <ChartImageContainer\n            imgName=\"261-custom-python-wordcloud-2\"\n            caption=\"Control the maximum number of words\"\n            linkTo=\"/261-custom-python-wordcloud\"\n          />\n          <ChartImageContainer\n            imgName=\"261-custom-python-wordcloud-3\"\n            caption=\"Custom text color theme\"\n            linkTo=\"/261-custom-python-wordcloud\"\n          />\n          <ChartImageContainer\n            imgName=\"261-custom-python-wordcloud-4\"\n            caption=\"Worcloud with a specific shape\"\n            linkTo=\"/261-custom-python-wordcloud\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Custom shapes\">Wordclouds and custom shapes</h2>\n        <p>\n          It is a common need to apply a <b>specific shape</b> to the wordcloud.\n          It's an excellent way to make the wordcloud <b>more relevant</b> to\n          the data you are displaying. The <code>wordcloud</code> library allows\n          you to do it by using a mask, and it's quite easy to do!\n        </p>\n        <p>\n          You can find the official documentation{' '}\n          <Link to=\"https://github.com/amueller/word_cloud\">here</Link> and some\n          examples of how to use it in practice below.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"262-wordcloud-with-specific-shape-2\"\n            caption=\"Create a wordcloud in the shape of the Linkedin Logo\"\n            linkTo=\"/262-wordcloud-with-specific-shape\"\n          />\n          <ChartImageContainer\n            imgName=\"262-wordcloud-with-specific-shape-1\"\n            caption=\"Create a wordcloud in the shape of the Twitter Logo\"\n            linkTo=\"/262-wordcloud-with-specific-shape\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2>Best wordcloud examples</h2>\n        <p>\n          Below are some of the <b>best wordcloud examples</b> that you can\n          find. They are all made with Python and the <code>wordcloud</code>{' '}\n          library.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"web-stacked-charts\"\n            caption=\"Combine wordcloud with a line chart\"\n            linkTo=\"/web-stacked-charts\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"ranking\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["SEO","_ref","title","seoDescription","keywords","image","React","lang","name","content","property","ChartImageContainer","imgName","caption","linkTo","Col","xs","md","Link","to","ChartImage","allGifs","includes","useStaticQuery","allFile","edges","find","n","node","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","logoToKeep","WordAlternativeLogos","allLogos","chartTypesInfo","filter","chart","id","map","link","fullUrlToInternalLink","pythonURL","key","SectionLogoWithOverlay","chartType","logo","label","Row","quickCode","chartDescription","Head","Wordcloud","Layout","isTocEnabled","TitleAndDescription","description","Container","CodeChunk","Spacing","href","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}
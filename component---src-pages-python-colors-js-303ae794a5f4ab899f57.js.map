{"version":3,"file":"component---src-pages-python-colors-js-303ae794a5f4ab899f57.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/pages/python-colors.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta\n        property=\"og:title\"\n        content={title + ' | The Python Graph Gallery'}\n      />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib } from '../components/MiscellaneousLogos';\nimport { Button, Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport Spacing from '../components/Spacing';\nimport ChartImage from '../components/ChartImage';\nimport { SEO } from '../components/SEO';\n\nconst chartDescription =\n  \"<p><a href='https://python-graph-gallery.com/matplotlib'>Matplotlib</a> is a <strong>powerful plotting library</strong> in Python that offers <strong>extensive customization</strong> of plots, including a <strong>wide variety of colors</strong>.<br /><br />Colors in Matplotlib can be specified in numerous ways, such as by <em>name</em> (e.g., <code>red</code>, <code>blue</code>), by <em>hexadecimal code</em> (e.g., <code>#FF5733</code>), or by <em>RGB/RGBA tuples</em> (e.g., <code>(1, 0, 0)</code> for red). This <strong>flexibility</strong> makes it easy to create <strong>visually appealing</strong> and <strong>informative plots</strong>.<br /> <br />Additionally, <a href='https://python-graph-gallery.com/matplotlib'>matplotlib</a> supports a <strong>range of colormaps</strong>, which can be particularly useful for <strong>representing data with a gradient of values</strong>, enhancing the <strong>interpretability</strong> of complex datasets.</p>\";\n\nconst quickCode = `# libraries\nfrom mpl_toolkits.mplot3d import Axes3D\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n# Dataset\ndf=pd.DataFrame({'X': range(1,101), 'Y': np.random.randn(100)*15+range(1,101), 'Z': (np.random.randn(100)*15+range(1,101))*2 })\n\n# plot\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(df['X'], df['Y'], df['Z'], c='skyblue', s=60)\nax.view_init(30, 185)\nplt.show()\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Tips about colors with Python\"\n    seoDescription=\"How to manage colors in python charts\"\n  />\n);\n\nexport default function Colors() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription title=\"Colors\" description={chartDescription} />\n\n      <Container>\n        <h2 id=\"Quick\">Color maps</h2>\n        <Row className=\"align-items-center\">\n          <Col md={4}>\n            <p>\n              <a href=\"/matplotlib\">Matplotlib</a> provides a wide range of\n              colormaps but also a specific way of working with them. This post\n              will show you how to use colormaps in{' '}\n              <a href=\"/matplotlib\">Matplotlib</a> to enhance the readability of\n              your plots.\n            </p>\n            <Link to=\"/587-how-to-use-colormap\">\n              <Button size=\"sm\">Learn more</Button>\n            </Link>\n          </Col>\n          <Col md={8}>\n            <Link to={'/587-how-to-use-colormap'}>\n              <ChartImage\n                imgName=\"587-how-to-use-colormap\"\n                caption=\"Available colors in Matplotlib\"\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Quick\">Named colors</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              <a href=\"/matplotlib\">Matplotlib</a> provides multiple ways of\n              managing colors. Basically, you can use:\n              <ul>\n                <li>\n                  <b>Named colors:</b> Use the name of the color. For example,\n                  'red', 'blue', 'green', etc.\n                </li>\n                <li>\n                  <b>RGB colors:</b> Use a tuple of 3 values between 0 and 1.\n                  For example, (1, 0, 0) for red.\n                </li>\n                <li>\n                  <b>Hexadecimal colors:</b> Use the hexadecimal code. For\n                  example, '#FF0000' for red.\n                </li>\n              </ul>\n            </p>\n            <Link to=\"/available-colors-in-matplotlib\">\n              <Button size=\"sm\">Learn more</Button>\n            </Link>\n          </Col>\n          <Col md={6}>\n            <Link to={'/available-colors-in-matplotlib'}>\n              <ChartImage\n                imgName=\"color_names_matplotlib\"\n                caption=\"Available colors in Matplotlib\"\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2>Pre-made categorical palettes</h2>\n        <Row>\n          <Col md={6}>\n            <p>\n              <a href=\"/matplotlib\">Matplotlib</a> provides a set of pre-made\n              categorical palettes. These palettes are <b>ready to use</b> and\n              can be used to colorize your categorical data.\n            </p>\n            <p>\n              On this post, you will find the entire list of <b>available</b>{' '}\n              categorical palettes in <a href=\"/matplotlib\">matplotlib</a>, how\n              to use them, and how to create your <b>own</b>.\n            </p>\n            <Link to=\"/available-categoric-palettes\">\n              <Button size=\"sm\">Learn more</Button>\n            </Link>\n          </Col>\n          <Col md={6}>\n            <Link to=\"/available-categoric-palettes\">\n              <ChartImage\n                imgName=\"categorical_palettes\"\n                caption=\"Available categorical color palettes in Matplotlib\"\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2>Pre-made continuous palettes</h2>\n        <p>\n          <a href=\"/matplotlib\">Matplotlib</a> provides a set of pre-made\n          continuous palettes that are split into 2 main categories:\n          <ul>\n            <li>\n              <b>Sequential:</b> Ideal for representing data that ranges from\n              low to high values.\n            </li>\n            <li>\n              <b>Diverging:</b> Ideal for representing data that ranges from\n              negative to positive values.\n            </li>\n          </ul>\n        </p>\n        <Row>\n          <Col md={6}>\n            <br />\n            <p>\n              On this post, you will find the entire list of <b>available</b>{' '}\n              sequential palettes in <a href=\"/matplotlib\">matplotlib</a>, how\n              to use them, and how to create your <b>own</b>.\n            </p>\n            <Link to=\"/available-continuous-palettes\">\n              <Button size=\"sm\">Sequential palettes</Button>\n            </Link>\n          </Col>\n          <Col md={6}>\n            <Link to=\"/available-continuous-palettes\">\n              <ChartImage\n                imgName=\"sequential_palettes\"\n                caption=\"Available sequential color palettes in Matplotlib\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <br />\n        <Row>\n          <Col md={6}>\n            <Link to=\"/available-continuous-palettes\">\n              <ChartImage\n                imgName=\"diverging_palettes\"\n                caption=\"Available diverging color palettes in Matplotlib\"\n              />\n            </Link>\n          </Col>\n          <Col md={6}>\n            <p>\n              Similar to the sequential palettes, you can find the entire list\n              of <b>available</b> diverging palettes in{' '}\n              <a href=\"/matplotlib\">matplotlib</a>, how to use them, and how to\n              create your <b>own</b>.\n            </p>\n            <Link to=\"/available-continuous-palettes\">\n              <Button size=\"sm\">Diverging palettes</Button>\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"general\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","SEO","title","seoDescription","keywords","lang","content","property","chartDescription","Head","Colors","Layout","isTocEnabled","TitleAndDescription","description","Container","id","Row","Col","md","href","Link","to","Button","size","Spacing","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-line-chart-js-fb7bd27b9200fd869b84.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/functions/plot.js","webpack://the-python-graph-gallery/./src/pages/line-chart.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/functions/paramDescription.js","webpack://the-python-graph-gallery/./src/components/FunctionExploration.js"],"sourcesContent":["// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta property=\"og:title\" content={title} />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  alphaHowToUse,\n  colorHowToUse,\n  linestyleDescription,\n  linestyleHowToUse,\n  zorderDescription,\n  zorderHowToUse,\n  linewidthDescription,\n  linewidthHowToUse,\n} from './paramDescription';\n\nconst name = 'plot()';\nconst description = (\n  <>\n    <p>\n      The <code>plot()</code> function of <a href=\"/matplotlib\">matplotlib</a>{' '}\n      is a versatile plotting function that can create{' '}\n      <b>various types of plots</b>, including line plots, scatter plots, and\n      step plots. It&apos;s one of the most fundamental plotting functions in\n      matplotlib.\n    </p>\n  </>\n);\n\nconst docUrl =\n  'https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html';\n//\n//\n//\n//\n//\nconst param1 = {\n  name: 'x',\n  description: <p>Positions of the data points along the x-axis.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x=x, y=y)\nplt.show()\n`.trim(),\n  type: 'array-like',\n  howToUse: (\n    <p>\n      The <code>x</code> and <code>y</code> arrays must have the same length and\n      contain numerical values.\n    </p>\n  ),\n  img: '120_Basic_lineplot2',\n  post: '120-line-chart-with-matplotlib',\n};\n//\n//\n//\n//\n//\nconst param2 = {\n  name: 'y',\n  description: <p>Positions of the data points along the y-axis.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x=x, y=y)\nplt.show()\n`.trim(),\n  type: 'array-like',\n  howToUse: (\n    <p>\n      The <code>x</code> and <code>y</code> arrays must have the same length and\n      contain numerical values.\n    </p>\n  ),\n  img: '120_Basic_lineplot2',\n  post: '120-line-chart-with-matplotlib',\n};\n//\n//\n//\n//\n//\nconst param3 = {\n  name: 'color',\n  description: <p>Sets the color of the line or markers in the plot.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y, color=\"red\")\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: <div>{colorHowToUse}</div>,\n  img: 'tuto-plot-1-square',\n  post: '121-line-chart-customization',\n};\n//\n//\n//\n//\n//\nconst param4 = {\n  name: 'linestyle',\n  description: <div>{linestyleDescription}</div>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y, linestyle=\"--\")\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: <div>{linestyleHowToUse}</div>,\n  img: 'tuto-plot-2-square',\n  post: '121-line-chart-customization',\n};\n//\n//\n//\n//\n//\nconst param5 = {\n  name: 'marker',\n  description: <p>Specifies the marker style for the data points.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 20)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y, marker='o')\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: (\n    <p>\n      Common markers include 'o' (circle), 's' (square), '^' (triangle up), and\n      '.' (point). See matplotlib's{' '}\n      <a href=\"https://matplotlib.org/stable/api/markers_api.html\">\n        marker reference\n      </a>{' '}\n      for more options.\n    </p>\n  ),\n  img: 'tuto-plot-3-square',\n  post: '121-line-chart-customization',\n};\n//\n//\n//\n//\n//\nconst param6 = {\n  name: 'label',\n  description: <p>Sets the label for the plot, which is used in the legend.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y1, label='sin(x)')\nax.plot(x, y2, label='cos(x)')\nplt.legend()\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: (\n    <p>\n      Use <code>plt.legend()</code> to display the legend after setting labels.\n    </p>\n  ),\n  img: 'tuto-plot-4-square',\n  post: '585-legend-for-categorical-data-matplotlib',\n};\n//\n//\n//\n//\n//\nconst param7 = {\n  name: 'alpha',\n  description: <p>Controls the transparency of the plot elements.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y, alpha=0.5)\nplt.show()\n`.trim(),\n  type: 'float',\n  howToUse: <div>{alphaHowToUse}</div>,\n  img: 'tuto-plot-5-square',\n  post: '121-line-chart-customization',\n};\n//\n//\n//\n//\n//\nconst param8 = {\n  name: 'linewidth',\n  description: <div>{linewidthDescription}</div>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y, linewidth=6)\nplt.show()\n`.trim(),\n  type: 'float',\n  howToUse: <div>{linewidthHowToUse}</div>,\n  img: 'tuto-plot-6-square',\n  post: '121-line-chart-customization',\n};\n//\n//\n//\n//\n//\nconst param9 = {\n  name: 'zorder',\n  description: <div>{zorderDescription}</div>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y1, zorder=2)\nax.plot(x, y2, zorder=1)\nplt.show()\n`.trim(),\n  type: 'int',\n  howToUse: <div>{zorderHowToUse}</div>,\n  img: 'tuto-plot-7-square',\n  post: '121-line-chart-customization',\n};\n\nexport const plot = {\n  name,\n  description,\n  docUrl,\n  parameters: [\n    param1,\n    param2,\n    param3,\n    param4,\n    param5,\n    param6,\n    param7,\n    param8,\n    param9,\n  ],\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport {\n  Matplotlib,\n  Pandas,\n  Plotly,\n  Seaborn,\n} from '../components/MiscellaneousLogos';\nimport { Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport ChartImage from '../components/ChartImage';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\nimport { plot } from '../functions/plot';\nimport FunctionExploration from '../components/FunctionExploration';\n\nconst chartDescription = (\n  <>\n    <p>\n      A <a href=\"https://www.data-to-viz.com/graph/line.html\">line chart</a>{' '}\n      displays the <b>evolution</b> of one or several <b>numeric variables</b>.\n      It is often used to represend <Link href=\"/timeseries\">time series</Link>.\n    </p>\n    <p>\n      The line chart is one of the <b>most common</b> chart type. As a result,\n      all the most common python data visualization libraries like{' '}\n      <code>matplotlib</code>, <code>seaborn</code> or <code>plotly</code> allow\n      to build it.\n    </p>\n    <p>\n      This page displays many line chart examples made with those tools. It goes\n      from <b>basic line chart tutorials</b> to highly customized,{' '}\n      <b>polished examples</b> 🔥.\n    </p>\n  </>\n);\n\nconst quickCode = `# libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# create data\nvalues=np.cumsum(np.random.randn(1000,1))\n\n# use the plot function\nplt.plot(values)\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Line chart | Python & Matplotlib examples\"\n    seoDescription=\"A collection of line chart examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function LinePlot() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Line Chart\"\n        description={chartDescription}\n        chartType=\"line\"\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              Making a simple line chart with <code>matplotlib</code> is pretty\n              straightforward thanks to the <code>plot()</code> function.\n            </p>\n            <p>\n              If you provide only a series of values, it will consider that\n              these values are ordered and will use values from 1 to n to create\n              the X axis.🔥\n            </p>\n            <p>\n              For more control on the chart, see the dedicated section below.\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/120-line-chart-with-matplotlib'}>\n              <ChartImage\n                imgName=\"120_Basic_lineplot2\"\n                caption=\"A basic line chart made with python and matplotlib\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib />\n          Line chart with <code>Matplotlib</code>\n        </h2>\n        <p>\n          <code>Matplotlib</code> is a great fit to build line charts thanks to\n          its <code>plot()</code> function.{' '}\n        </p>\n        <p>\n          The <Link to=\"/120-line-chart-with-matplotlib\">first chart</Link> of\n          this section explains how to use <code>plot()</code> from any kind of\n          data input format. The{' '}\n          <Link to=\"/121-line-chart-customization\">next one</Link> goes deep\n          into chart customization (line width, color aspect and more).{' '}\n        </p>\n        <p>\n          Another common need is to build a{' '}\n          <Link to=\"/line-chart-dual-y-axis-with-matplotlib\">\n            dual Y axis line chart\n          </Link>\n          , but be mindful of the{' '}\n          <a href=\"https://www.data-to-viz.com/caveat/dual_axis.html\">\n            caveats\n          </a>{' '}\n          that go with it.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"120_Basic_lineplot1\"\n            caption=\"How to build a basic line chart with python from any kind of input format\"\n            linkTo=\"/120-line-chart-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"121_Custom_line_plot3\"\n            caption=\"How to customize the matplotlib line plot appearance: width, stroke, color, style..\"\n            linkTo=\"/121-line-chart-customization\"\n          />\n          <ChartImageContainer\n            imgName=\"basic-time-series-with-matplotlib\"\n            caption=\"How to deal with the date format. How to represent those dates properly on the X axis.\"\n            linkTo=\"/basic-time-series-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"line-chart-dual-y-axis-with-matplotlib1\"\n            caption=\"How to build a dual Y axis line chart to display 2 series with different units.\"\n            linkTo=\"/line-chart-dual-y-axis-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"area-fill-between-two-lines-in-matplotlib\"\n            caption=\"Fill the gap between 2 line charts\"\n            linkTo=\"/area-fill-between-two-lines-in-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"516-line-chart-with-annotations\"\n            caption=\"Add annotation on top of a matplotlib line chart\"\n            linkTo=\"/516-line-chart-with-annotations\"\n          />\n          <ChartImageContainer\n            imgName=\"525-line-chart-log-transform\"\n            caption=\"How to apply a log transform to the Y scale of the line chart\"\n            linkTo=\"/525-line-chart-log-transform\"\n          />\n          <ChartImageContainer\n            imgName=\"585-legend-for-categorical-data-matplotlib-3\"\n            caption=\"Add label on each line of a line chart with matplotlib\"\n            linkTo=\"/585-legend-for-categorical-data-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <FunctionExploration funDetails={plot} />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Multiple groups\">\n          <Matplotlib />\n          Line chart with several groups (<code>Matplotlib</code>)\n        </h2>\n        <p>\n          A line chart with multiple groups allows to show the evolution of{' '}\n          <b>several items</b> on the same figure.{' '}\n        </p>\n        <p>\n          It is powerful but can quickly turn into a{' '}\n          <a href=\"https://www.data-to-viz.com/caveat/spaghetti.html\">\n            spaghetti chart\n          </a>\n          : when too many lines are displayed they get cluttered and{' '}\n          <b>hard to read</b>. Moreover, make sure to use{' '}\n          <Link href=\"/123-highlight-a-line-in-line-plot\">inline labeling</Link>{' '}\n          instead of a side legend that is very annoying to read.\n        </p>\n        <p>\n          The examples below explain how to build a line chart with multiple\n          groups, and what are the <b>alternatives</b> to show your data a\n          better way.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"122_Multiple_line_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/122-multiple-lines-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"123_Highlight_a_line\"\n            caption=\"How to customize the matplotlib line plot appearance: width, stroke, color, style..\"\n            linkTo=\"/123-highlight-a-line-in-line-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"124_Spaghetti_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/124-spaghetti-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"125_Lineplot_small_multiple_v2\"\n            caption=\"Line chart and small multiple\"\n            linkTo=\"/125-small-multiples-for-line-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"125_Lineplot_small_multiple\"\n            caption=\"Line chart and small multiple (variation)\"\n            linkTo=\"/125-small-multiples-for-line-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"seaborn\">\n          <Seaborn />\n          Line chart with Seaborn\n        </h2>\n        <p>\n          <Link href=\"/seaborn\">Seaborn</Link> is another very good alternative\n          when it comes to create line charts in Python. It comes with a\n          powerful <code>lineplot()</code> function that does most of the work\n          for us.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"122_Multiple_line_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/122-multiple-lines-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"plotly\">\n          <Plotly />\n          Interactive line chart with plotly\n        </h2>\n        <p>\n          If you are looking for an <b>interactive</b> version of a line chart\n          with Python, <Link href=\"/plotly\">plotly</Link> is definitely the\n          library you need.\n        </p>\n        <p>\n          Its API is very straightforward to understand, and the output allows\n          to <b>zoom</b> on the chart and have <b>tooltip</b> for markers:\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"514-interactive-line-chart-plotly-1\"\n            caption=\"Basic interactive line chart with plotly\"\n            linkTo=\"/514-interactive-line-chart-plotly\"\n          />\n          <ChartImageContainer\n            imgName=\"514-interactive-line-chart-plotly-2\"\n            caption=\"How to customize the appearance of a plotly line chart\"\n            linkTo=\"/514-interactive-line-chart-plotly\"\n          />\n          <ChartImageContainer\n            imgName=\"514-interactive-line-chart-plotly-3\"\n            caption=\"Interactive line chart with multiple groups\"\n            linkTo=\"/514-interactive-line-chart-plotly\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"pandas\">\n          <Pandas />\n          Line chart with Pandas\n        </h2>\n        <p>\n          <Link href=\"/pandas\">Pandas</Link> offers a simple and efficient way\n          to create line charts directly from <b>DataFrames</b>, eliminating the\n          need for complex data manipulation.\n        </p>\n        <p>\n          Its integration with <Link href=\"/matplotlib\">Matplotlib</Link>\n          allows for extensive customization, making it a versatile choice for\n          quick data visualization tasks.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"530-introduction-to-linechart-with-pandas\"\n            caption=\"Introduction to line chart with pandas\"\n            linkTo=\"/530-introduction-to-linechart-with-pandas\"\n          />\n          <ChartImageContainer\n            imgName=\"531-customizing-linecharts-with-pandas\"\n            caption=\"Customize your line charts with pandas\"\n            linkTo=\"/531-customizing-linecharts-with-pandas\"\n          />\n          <ChartImageContainer\n            imgName=\"532-linecharts-mutliple-groups-with-pandas\"\n            caption=\"Line charts with multiple variables or groups with pandas\"\n            linkTo=\"/532-linecharts-mutliple-groups-with-pandas\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Best\">\n          <Matplotlib />\n          Best python line chart examples\n        </h2>\n        <p>\n          The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>). The{' '}\n          <a href=\"https://python-graph-gallery.com\">Python graph gallery</a>{' '}\n          tries to display (or translate from R) some of the best creations and\n          explain how their source code works. If you want to display your work\n          here, please drop me a word or even better, submit a{' '}\n          <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">\n            Pull Request\n          </a>\n          !\n        </p>\n        <Row>\n          <Col xs={12} md={4}>\n            <Link to={'/web-line-chart-with-labels-at-line-end'}>\n              <ChartImage\n                imgName={'web-line-chart-with-labels-at-line-end'}\n                caption={\n                  'How to add labels at the end of each line with matplotlib. Definitely better than using a legend!'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-time-series-and-facetting-with-matplotlib'}>\n              <ChartImage\n                imgName={'web-time-series-and-facetting-with-matplotlib-square'}\n                caption={\n                  'Display 2 line charts and fill the area between both. Also uses faceting to split by groups.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-highlighted-lineplot-with-faceting'}>\n              <ChartImage\n                imgName={'web-highlighted-lineplot-with-faceting'}\n                caption={\n                  'A multipanel connected scatterplot, with several groups displayed and one highlighted per panel.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-lineplots-and-area-chart-the-economist'}>\n              <ChartImage\n                imgName={'web-lineplots-and-area-chart-the-economist-square1'}\n                caption={\n                  \"Learn how to mimick The Economist's style with a figure combining both a line and an area chart.\"\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-multiple-lines-and-panels'}>\n              <ChartImage\n                imgName={'web-multiple-lines-and-panels'}\n                caption={\n                  'Multiple grouped line charts with a beautiful color palette and customized title and annotation.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-line-chart-small-multiple'}>\n              <ChartImage\n                imgName={'web-line-chart-small-multiple-square'}\n                caption={\n                  'A beautiful line chart with small multiple made with Python and matplotlib'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={'/web-stacked-charts'}>\n              <ChartImage\n                imgName={'web-stacked-charts'}\n                caption={'A wordcloud combined with a line chart'}\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={'/web-small-multiple-with-highlights'}>\n              <ChartImage\n                imgName={'web-small-multiple-with-highlights'}\n                caption={'Multiple line charts with highlights'}\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"evolution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from 'react';\n\nexport const alphaHowToUse = (\n  <p>\n    Values range from <code>0</code> (completely transparent) to <code>1</code>{' '}\n    (completely opaque).\n  </p>\n);\n\nexport const colorHowToUse = (\n  <p>\n    Can be a color name, a Hex code, or an RGB value.{' '}\n    <a href=\"/python-colors\">Learn more about colors.</a>\n  </p>\n);\n\nexport const zorderDescription = (\n  <p>Controls the drawing order of plot elements.</p>\n);\n\nexport const zorderHowToUse = (\n  <p>\n    Higher zorder values are drawn on top of lower values. This is useful when\n    you want certain elements to appear above others.\n  </p>\n);\n\nexport const hatchHowToUse = (\n  <p>\n    It must be in one of: <code>&apos;/&apos;</code>, <code>&apos;\\&apos;</code>\n    , <code>&apos;|&apos;</code>,<code>&apos;-&apos;</code>,{' '}\n    <code>&apos;+&apos;</code>, <code>&apos;x&apos;</code>,{' '}\n    <code>&apos;o&apos;</code>, <code>&apos;O&apos;</code>,\n    <code>&apos;.&apos;</code>, <code>&apos;*&apos;</code>\n  </p>\n);\n\nexport const hueDescription = (\n  <p>\n    Specify the dataset column to use for color encoding in the chart. It allows\n    for grouping and differentiating data points.\n  </p>\n);\n\nexport const hueHowToUse = (\n  <p>\n    Column name to use for color encoding in the chart. It's usually a\n    categorical variable.\n  </p>\n);\n\nexport const dataHowToUse = (\n  <div>\n    <p>\n      It just has to be a <code>pandas.DataFrame</code> (columns are variables),\n      <code>numpy.ndarray</code> (rows/columns are variables), or any\n      mapping/sequence (dictionaries/lists)\n    </p>\n    <p>\n      Supports both long-form (each variable in its own column) and wide-form\n      (variables in separate columns; reshaped internally).\n    </p>\n  </div>\n);\n\nexport const dataDescription = (\n  <p>\n    Dataframe-like (pandas, numpy, polars...) with the columns we want to plot.\n  </p>\n);\n\nexport const linestyleDescription = (\n  <p>Determines the style of the line in the plot.</p>\n);\n\nexport const linestyleHowToUse = (\n  <p>\n    Common values include '-' (solid), '--' (dashed), ':' (dotted), and '-.'\n    (dash-dot).\n  </p>\n);\n\nexport const linewidthDescription = <p>Sets the width of the plotted line.</p>;\n\nexport const linewidthHowToUse = (\n  <p>\n    Larger values create thicker lines. The default value is usually{' '}\n    <code>1</code>.\n  </p>\n);\n\nexport const paletteDescription = (\n  <p>\n    Defines colors for the <code>hue</code> semantic. It can be a list of colors\n    or a matplotlib colormap.\n  </p>\n);\n\nexport const paletteHowToUse = (\n  <div>\n    <p>\n      This parameter is used <b>in combination</b> with the <code>hue</code>{' '}\n      parameter and will a assign a different color to each category in{' '}\n      <code>hue</code>.\n    </p>\n    <p>\n      Moreover, the <a href=\"/introduction-to-pypalettes\">pypalettes library</a>{' '}\n      can help you find the best colors for your chart by providing access to\n      thousands of pre-made color palette.\n    </p>\n  </div>\n);\n","import { Link } from 'gatsby';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ChartImage from './ChartImage';\n\nimport './functionExploration.css';\nimport CodeChunk from './CodeChunk';\n\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport default function FunctionExploration({ funDetails }) {\n  const [selectedParameter, setSelectedParameter] = useState(0);\n  const [selectedOpt, setSelectedOpt] = useState(0);\n\n  if (!funDetails) {\n    return null;\n  }\n\n  const selectedParameterInfo = funDetails.parameters[selectedParameter];\n  const selectedOptInfo = selectedParameterInfo.options?.[selectedOpt];\n\n  const argumentButtons = (\n    <div>\n      {funDetails.parameters.map((item, i) => (\n        <Button\n          key={i}\n          value={item.name}\n          size=\"sm\"\n          onClick={() => setSelectedParameter(i)}\n          className={selectedParameter === i ? 'isButtonSelected' : ''}\n        >\n          {item.name}\n        </Button>\n      ))}\n    </div>\n  );\n\n  return (\n    <div style={{ marginBottom: 70 }}>\n      <h2 id={capitalize(funDetails.name + ' details')}>\n        &#128270; <code>{funDetails.name}</code> function parameters\n        <a\n          style={{ marginLeft: '15px', fontSize: '14px' }}\n          href={funDetails.docUrl}\n        >\n          &rarr; see full doc\n        </a>\n      </h2>\n\n      <h3>&rarr; Description</h3>\n      <p>{funDetails.description}</p>\n\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'start',\n          alignItems: 'baseline',\n          gap: 14,\n        }}\n      >\n        <h3 style={{ width: 'auto', flexWrap: 'nowrap', whiteSpace: 'nowrap' }}>\n          &rarr; Arguments\n        </h3>\n        {argumentButtons}\n      </div>\n\n      <Row>\n        <Col md={8}>\n          <div style={{ fontSize: 16 }}>\n            <p className=\"argumentSectionTitle\">Description</p>\n            <p className=\"little-text\">{selectedParameterInfo.description}</p>\n\n            <p className=\"argumentSectionTitle\">\n              Possible values &rarr; {'  '}\n              <span className=\"parameterTypePill\">\n                {selectedParameterInfo.type}\n              </span>\n            </p>\n            <p className=\"little-text\">{selectedParameterInfo.howToUse}</p>\n            {selectedParameterInfo.options && (\n              <>\n                <div\n                  style={{ display: 'flex', gap: 2, alignItems: 'baseline' }}\n                >\n                  {selectedParameterInfo.options.map((opt, i) => {\n                    return (\n                      <Button\n                        size=\"sm\"\n                        className={i === selectedOpt ? 'isButtonSelected' : ''}\n                        onClick={() => setSelectedOpt(i)}\n                      >\n                        {opt.name}\n                      </Button>\n                    );\n                  })}\n                </div>\n                <p>{selectedParameterInfo.options[selectedOpt].explanation}</p>\n              </>\n            )}\n\n            <p className=\"argumentSectionTitle\">Code Example</p>\n            <div style={{ backgroundColor: 'white' }}>\n              <CodeChunk hasWhiteBackground>\n                {selectedParameterInfo.options\n                  ? selectedParameterInfo.basicUsage.replace(\n                      'paramgoeshere',\n                      selectedParameterInfo.options[selectedOpt].name\n                    )\n                  : selectedParameterInfo.basicUsage}\n              </CodeChunk>\n            </div>\n          </div>\n        </Col>\n\n        <Col md={4}>\n          <br />\n          <Link to={'/' + selectedParameterInfo.post}>\n            <ChartImage\n              imgName={selectedOptInfo?.img || selectedParameterInfo.img}\n              caption={'More about the ' + funDetails.name + ' function.'}\n            />\n          </Link>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n"],"names":["SEO","_ref","title","seoDescription","keywords","image","React","lang","name","content","property","plot","description","href","docUrl","parameters","basicUsage","trim","type","howToUse","img","post","colorHowToUse","linestyleDescription","linestyleHowToUse","alphaHowToUse","linewidthDescription","linewidthHowToUse","zorderDescription","zorderHowToUse","chartDescription","Link","quickCode","Head","LinePlot","Layout","isTocEnabled","TitleAndDescription","chartType","Container","id","Row","className","Col","md","to","ChartImage","imgName","caption","CodeChunk","Spacing","Matplotlib","ChartImageContainer","linkTo","FunctionExploration","funDetails","Seaborn","Plotly","Pandas","xs","ChartFamilySection","chartFamily","Contact","allGifs","includes","useStaticQuery","allFile","edges","find","n","node","GatsbyImage","childImageSharp","gatsbyImageData","alt","hatchHowToUse","hueDescription","hueHowToUse","dataHowToUse","dataDescription","paletteDescription","paletteHowToUse","capitalize","s","charAt","toUpperCase","slice","_selectedParameterInf","selectedParameter","setSelectedParameter","useState","selectedOpt","setSelectedOpt","selectedParameterInfo","selectedOptInfo","options","argumentButtons","map","item","i","Button","key","value","size","onClick","style","marginBottom","marginLeft","fontSize","display","flexDirection","justifyContent","alignItems","gap","width","flexWrap","whiteSpace","opt","explanation","backgroundColor","hasWhiteBackground","replace"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-histogram-js-1ec1e0078167c7610240.js","mappings":"oXAOA,MAiMaA,EAAO,CAClBC,KAlMW,SAmMXC,YAjMAC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,SAAG,OACGA,EAAAA,cAAA,YAAM,UAAa,gBAAaA,EAAAA,cAAA,KAAGC,KAAK,eAAc,cAAe,IAAI,iKAgMjFC,OAvLA,wEAwLAC,WAAY,CAlLC,CACbL,KAAM,QACNC,YAAaC,EAAAA,cAAA,SAAG,yCAChBI,WAAY,+JAQZC,OACAC,KAAM,SACNC,SAAUP,EAAAA,cAAA,WAAMQ,EAAAA,IAChBC,IAAK,qBACLC,KAAM,iCAOO,CACbZ,KAAM,OACNC,YAAaC,EAAAA,cAAA,SAAG,2DAChBI,WAAY,wJAQZC,OACAC,KAAM,yBACNC,SACEP,EAAAA,cAAA,SAAG,qJAOLS,IAAK,qBACLC,KAAM,iCAOO,CACbZ,KAAM,aACNC,YACEC,EAAAA,cAAA,SAAG,uHAKLI,WAAY,gKAQZC,OACAC,KAAM,UACNC,SACEP,EAAAA,cAAA,SAAG,OACGA,EAAAA,cAAA,YAAM,QAAW,gCAA6BA,EAAAA,cAAA,YAAM,SAAY,6BAIxES,IAAK,qBACLC,KAAM,iCAOO,CACbZ,KAAM,QACNC,YAAaC,EAAAA,cAAA,SAAG,oDAChBI,WAAY,0JAQZC,OACAC,KAAM,QACNC,SAAUP,EAAAA,cAAA,WAAMW,EAAAA,IAChBF,IAAK,qBACLC,KAAM,iCAOO,CACbZ,KAAM,cACNC,YACEC,EAAAA,cAAA,SAAG,qEAELI,WAAY,yKAQZC,OACAC,KAAM,MACNC,SACEP,EAAAA,cAAA,SAAG,+BAC2BA,EAAAA,cAAA,YAAM,cAA2B,gBAAc,IAC3EA,EAAAA,cAAA,YAAM,iBAGVS,IAAK,qBACLC,KAAM,iCAOO,CACbZ,KAAM,YACNC,YAAaC,EAAAA,cAAA,SAAG,iDAChBI,WAAY,kKAQZC,OACAC,KAAM,MACNC,SAAUP,EAAAA,cAAA,WAAMQ,EAAAA,IAChBC,IAAK,qBACLC,KAAM,iCAOO,CACbZ,KAAM,QACNC,YAAaC,EAAAA,cAAA,SAAG,sDAChBI,WAAY,0JAQZC,OACAC,KAAM,MACNC,SAAUP,EAAAA,cAAA,WAAMY,EAAAA,IAChBH,IAAK,sCACLC,KAAM,uC,cC9KR,MAAMG,EACJb,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,SAAG,KACCA,EAAAA,cAAA,KAAGC,KAAK,oDAAmD,aAAc,IAAI,kBAChED,EAAAA,cAAA,SAAG,gBAAgB,6EACMA,EAAAA,cAAA,SAAG,QAAS,kCACnCA,EAAAA,cAAA,SAAG,OAAO,IAAE,KAE/BA,EAAAA,cAAA,SAAG,kDAC8CA,EAAAA,cAAA,SAAG,UAAW,cAAW,IAAI,+BAChDA,EAAAA,cAAA,YAAM,WAAc,OAAK,IACrDA,EAAAA,cAAA,YAAM,cAAiB,KAEzBA,EAAAA,cAAA,SAAG,uBACmBA,EAAAA,cAAA,SAAG,eAAgB,wGAC4B,IACnEA,EAAAA,cAAA,SAAG,gCAAgC,wEAMnCc,EAAY,yLAQZC,EAAsB,iPAWtBC,EAAkB,yOAcXC,EAAOA,IAClBjB,EAAAA,cAACkB,EAAAA,EAAG,CACFC,MAAM,0DACNC,eAAe,uGAIJ,SAASC,IACtB,OACErB,EAAAA,cAACsB,EAAAA,EAAM,CAACC,cAAY,GAClBvB,EAAAA,cAACwB,EAAAA,EAAmB,CAClBL,MAAM,YACNpB,YAAac,EACbY,UAAU,cAGZzB,EAAAA,cAAC0B,EAAAA,EAAS,KACR1B,EAAAA,cAAA,MAAI2B,GAAG,mBAAkB,2BACzB3B,EAAAA,cAAC4B,EAAAA,EAAG,CAACC,UAAU,sBACb7B,EAAAA,cAAC8B,EAAAA,EAAG,CAACC,GAAI,GACP/B,EAAAA,cAAA,SACEA,EAAAA,cAAA,YAAM,WAAc,8EACYA,EAAAA,cAAA,YAAM,aAAgB,KAExDA,EAAAA,cAAA,SAAG,8BAC0BA,EAAAA,cAAA,YAAM,QAAW,kFAIhDA,EAAAA,cAAC8B,EAAAA,EAAG,CAACC,GAAI,GACP/B,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAI,+BACRjC,EAAAA,cAACkC,EAAAA,EAAU,CACTC,QAAQ,8BACRC,QAAQ,qEAKhBpC,EAAAA,cAACqC,EAAAA,EAAS,KAAEvB,IAGdd,EAAAA,cAACsC,EAAAA,EAAO,MAERtC,EAAAA,cAAC0B,EAAAA,EAAS,KACR1B,EAAAA,cAAA,MAAI2B,GAAG,WACL3B,EAAAA,cAACuC,EAAAA,GAAO,MAAG,yBACWvC,EAAAA,cAAA,YAAM,YAE9BA,EAAAA,cAAA,SACEA,EAAAA,cAAA,YAAM,WAAc,kHAC+C,IACnEA,EAAAA,cAAA,YAAM,WAAc,sFACiB,IACrCA,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAG,IAAG,mBAAsB,0BAAwB,IAC1DjC,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAG,IAAG,cAAiB,KAE/BjC,EAAAA,cAAC4B,EAAAA,EAAG,KACF5B,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,8BACRC,QAAQ,6EACRK,OAAO,gCAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,8BACRC,QAAQ,4DACRK,OAAO,gCAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,2CACRC,QAAQ,2DACRK,OAAO,qDAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,2CACRC,QAAQ,kCACRK,OAAO,qDAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,2CACRC,QAAQ,0CACRK,OAAO,qDAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,2CACRC,QAAQ,kFACRK,OAAO,qDAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,gCACRC,QAAQ,oDACRK,OAAO,mCAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,mCACRC,QAAQ,6EACRK,OAAO,gDAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,qCACRC,QAAQ,+DACRK,OAAO,iDAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,qCACRC,QAAQ,mEACRK,OAAO,iDAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,wBACRC,QAAQ,kFACRK,OAAO,mCAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,wBACRC,QAAQ,0FACRK,OAAO,qCAKbzC,EAAAA,cAACsC,EAAAA,EAAO,MAERtC,EAAAA,cAAC0B,EAAAA,EAAS,KACR1B,EAAAA,cAAA,MAAI2B,GAAG,sBACL3B,EAAAA,cAAC0C,EAAAA,GAAU,MAAG,6BAEhB1C,EAAAA,cAAC4B,EAAAA,EAAG,CAACC,UAAU,sBACb7B,EAAAA,cAAC8B,EAAAA,EAAG,CAACC,GAAI,GACP/B,EAAAA,cAAA,SACEA,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAG,eAAc,cAAiB,2DACPjC,EAAAA,cAAA,YAAM,UAAa,8DAGtDA,EAAAA,cAAA,SAAG,4GAKLA,EAAAA,cAAC8B,EAAAA,EAAG,CAACC,GAAI,GACP/B,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAI,kCACRjC,EAAAA,cAACkC,EAAAA,EAAU,CACTC,QAAQ,gCACRC,QAAQ,wEAKhBpC,EAAAA,cAACqC,EAAAA,EAAS,KAAEtB,IAGdf,EAAAA,cAACsC,EAAAA,EAAO,MAERtC,EAAAA,cAAA,OAAK6B,UAAU,eACb7B,EAAAA,cAAC0B,EAAAA,EAAS,KACR1B,EAAAA,cAAC2C,EAAAA,EAAmB,CAACC,WAAY/C,MAIrCG,EAAAA,cAACsC,EAAAA,EAAO,MAERtC,EAAAA,cAAC0B,EAAAA,EAAS,KACR1B,EAAAA,cAAA,MAAI2B,GAAG,cACL3B,EAAAA,cAAC0C,EAAAA,GAAU,MAAG,mBACE1C,EAAAA,cAAA,YAAM,eAExBA,EAAAA,cAAA,SAAG,YACQA,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAG,eAAc,cAAiB,yFACgB,IACjEjC,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAG,YAAW,WAAc,kCAEpCjC,EAAAA,cAAA,SAAG,oGAE+B,IAChCA,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAG,kCAAiC,iBAAoB,kDACnB,IAC3CjC,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAG,kCAAiC,cAAiB,KAE7DjC,EAAAA,cAAC4B,EAAAA,EAAG,KACF5B,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,gCACRC,QAAQ,4CACRK,OAAO,mCAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,iCACRC,QAAQ,gFACRK,OAAO,mCAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,cACRC,QAAQ,uBACRK,OAAO,mCAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,2BACRC,QAAQ,kEACRK,OAAO,oBAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,mCACRC,QAAQ,sEACRK,OAAO,sCAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,qCACRC,QAAQ,wFACRK,OAAO,wCAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,+BACRC,QAAQ,2CACRK,OAAO,kCAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,sCACRC,QAAQ,sCACRK,OAAO,yCAKbzC,EAAAA,cAACsC,EAAAA,EAAO,MAERtC,EAAAA,cAAC0B,EAAAA,EAAS,KACR1B,EAAAA,cAAA,MAAI2B,GAAG,kBACL3B,EAAAA,cAAC6C,EAAAA,EAAM,MAAG,yBAEZ7C,EAAAA,cAAC4B,EAAAA,EAAG,CAACC,UAAU,sBACb7B,EAAAA,cAAC8B,EAAAA,EAAG,CAACC,GAAI,GACP/B,EAAAA,cAAA,SACEA,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAG,WAAU,UAAa,6EACajC,EAAAA,cAAA,YAAM,UAAc,IAAI,OACjEA,EAAAA,cAAA,YAAM,UAAa,uDAGzBA,EAAAA,cAAA,SAAG,uBACmBA,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAG,eAAc,cAAkB,yGAKjEjC,EAAAA,cAAC8B,EAAAA,EAAG,CAACC,GAAI,GACP/B,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAI,8CACRjC,EAAAA,cAACkC,EAAAA,EAAU,CACTC,QAAQ,4CACRC,QAAQ,oEAKhBpC,EAAAA,cAACqC,EAAAA,EAAS,KAAErB,IAGdhB,EAAAA,cAACsC,EAAAA,EAAO,MAERtC,EAAAA,cAAC0B,EAAAA,EAAS,KACR1B,EAAAA,cAAA,MAAI2B,GAAG,UACL3B,EAAAA,cAAC6C,EAAAA,EAAM,MAAG,mBACM7C,EAAAA,cAAA,YAAM,WAExBA,EAAAA,cAAA,SACEA,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAG,WAAU,UAAa,6IAEEjC,EAAAA,cAAA,YAAM,UAAa,OAAK,IAC1DA,EAAAA,cAAA,YAAM,UAAa,qBAErBA,EAAAA,cAAA,SAAG,yDAEDA,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAG,8CACN,IAAI,2BAEA,KAGTjC,EAAAA,cAAC4B,EAAAA,EAAG,KACF5B,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,4CACRC,QAAQ,uCACRK,OAAO,+CAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,wCACRC,QAAQ,6DACRK,OAAO,2CAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,qCACRC,QAAQ,mEACRK,OAAO,sCAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,qCACRC,QAAQ,qFACRK,OAAO,wCAKbzC,EAAAA,cAACsC,EAAAA,EAAO,MAERtC,EAAAA,cAAC0B,EAAAA,EAAS,KACR1B,EAAAA,cAAA,MAAI2B,GAAG,YACL3B,EAAAA,cAAC8C,EAAAA,GAAQ,MAAG,mBACI9C,EAAAA,cAAA,YAAM,aAExBA,EAAAA,cAAA,SACEA,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAG,aAAY,YAAe,wBAAsB,IAC1DjC,EAAAA,cAAA,SAAG,uBAAuB,sCAAoC,IAC9DA,EAAAA,cAAA,YAAM,oBAAuB,mDAG/BA,EAAAA,cAAA,SAAG,yDAEDA,EAAAA,cAAA,SAAG,8BAA8B,KAEnCA,EAAAA,cAAC4B,EAAAA,EAAG,KACF5B,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,wCACRC,QAAQ,qCACRK,OAAO,yCAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,wCACRC,QAAQ,oBACRK,OAAO,yCAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,wCACRC,QAAQ,8CACRK,OAAO,yCAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,qCACRC,QAAQ,2BACRK,OAAO,sCAETzC,EAAAA,cAACwC,EAAAA,EAAmB,CAClBL,QAAQ,qCACRC,QAAQ,0CACRK,OAAO,wCAKbzC,EAAAA,cAACsC,EAAAA,EAAO,MAERtC,EAAAA,cAAC0B,EAAAA,EAAS,KACR1B,EAAAA,cAAA,MAAI2B,GAAG,QACL3B,EAAAA,cAAC0C,EAAAA,GAAU,MAAG,kCAGhB1C,EAAAA,cAAA,SAAG,gFAEKA,EAAAA,cAAA,KAAGC,KAAK,mCAAkC,KAAK,SAAO,IAC5DD,EAAAA,cAAA,KAAGC,KAAK,oCAAmC,wBAAyB,IAAI,mMAGnB,IACrDD,EAAAA,cAAA,KAAGC,KAAK,sDAAqD,gBAEzD,KAGND,EAAAA,cAAC4B,EAAAA,EAAG,KACF5B,EAAAA,cAAC8B,EAAAA,EAAG,CAACiB,GAAI,GAAIhB,GAAI,GACf/B,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAI,mCACRjC,EAAAA,cAACkC,EAAAA,EAAU,CACTC,QAAS,iCACTC,QAAS,gDAOnBpC,EAAAA,cAACsC,EAAAA,EAAO,MAERtC,EAAAA,cAAA,OAAK6B,UAAU,cAAcF,GAAG,WAC9B3B,EAAAA,cAAC0B,EAAAA,EAAS,KACR1B,EAAAA,cAACgD,EAAAA,EAAkB,CAACC,YAAY,mBAIpCjD,EAAAA,cAACsC,EAAAA,EAAO,MAERtC,EAAAA,cAAC0B,EAAAA,EAAS,KACR1B,EAAAA,cAACkD,EAAAA,EAAO,OAGVlD,EAAAA,cAACsC,EAAAA,EAAO,MAGd,C,qEC5cO,MAAMpB,EAAMiC,IAAiD,IAAhD,MAAEhC,EAAK,eAAEC,EAAc,SAAEgC,EAAQ,MAAEC,GAAOF,EAC5D,OACEnD,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQmB,GACRnB,EAAAA,cAAA,QAAMsD,KAAK,OACXtD,EAAAA,cAAA,QACEF,KAAK,cACLyD,QAASnC,GAAkB,qCAE7BpB,EAAAA,cAAA,QAAMF,KAAK,SAASyD,QAAQ,cAC5BvD,EAAAA,cAAA,QACEF,KAAK,WACLyD,QAASH,GAAY,6CAGvBpD,EAAAA,cAAA,QAAMwD,SAAS,eAAeD,QAAQ,6BACtCvD,EAAAA,cAAA,QAAMwD,SAAS,WAAWD,QAASpC,IACnCnB,EAAAA,cAAA,QACEwD,SAAS,WACTD,QACEF,GACA,oGAGJrD,EAAAA,cAAA,QAAMwD,SAAS,iBAAiBD,QAASnC,IACzCpB,EAAAA,cAAA,QAAMF,KAAK,eAAeyD,QAAQ,wBAClCvD,EAAAA,cAAA,QAAMF,KAAK,eAAeyD,QAAQ,qBACjC,C,mGC/BQ,SAASf,EAAmBW,GAAgC,IAA/B,QAAEhB,EAAO,QAAEC,EAAO,OAAEK,GAAQU,EACtE,OACEnD,EAAAA,cAAC8B,EAAAA,EAAG,CAACiB,GAAI,GAAIhB,GAAI,GACf/B,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAIQ,GACRzC,EAAAA,cAACkC,EAAAA,EAAU,CAACC,QAASA,EAASC,QAASA,KAI/C,C,yFCPA,MAAMqB,EAAU,CACd,iBACA,yBACA,wBAKa,SAASvB,EAAUiB,GAAwB,IAAvB,QAAEhB,EAAO,QAAEC,GAASe,EACrD,GAAIM,EAAQC,SAASvB,GACnB,OAAOnC,EAAAA,cAAA,SAAG,QAGZ,MAgBMqD,GAhBOM,EAAAA,EAAAA,gBAAe,cAgBTC,QAAQC,MAAMC,MAAMC,GAC9BA,EAAEC,KAAKlE,KAAK4D,SAASvB,KAG9B,OAAKkB,EAMHrD,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAK6B,UAAU,uBACb7B,EAAAA,cAACiE,EAAAA,EAAW,CACVZ,MAAOA,EAAMW,KAAKE,gBAAgBC,gBAClCC,IAAKhC,EACLP,UAAU,kBAEXO,GACCpC,EAAAA,cAAA,OAAK6B,UAAU,qBACb7B,EAAAA,cAAA,OAAK6B,UAAU,yBACb7B,EAAAA,cAAA,SAAIoC,OAfP,IAsBX,C,sZC7DO,MAAMzB,EACXX,EAAAA,cAAA,SAAG,qBACiBA,EAAAA,cAAA,YAAM,KAAQ,gCAA6BA,EAAAA,cAAA,YAAM,KAAS,IAAI,wBAKvEQ,EACXR,EAAAA,cAAA,SAAG,oDACiD,IAClDA,EAAAA,cAAA,KAAGC,KAAK,kBAAiB,6BAIhBoE,EACXrE,EAAAA,cAAA,SAAG,gDAGQsE,EACXtE,EAAAA,cAAA,SAAG,gIAMQY,EACXZ,EAAAA,cAAA,SAAG,yBACqBA,EAAAA,cAAA,YAAM,OAAqB,KAACA,EAAAA,cAAA,YAAM,QAAoB,KAC1EA,EAAAA,cAAA,YAAM,OAAqB,IAAAA,EAAAA,cAAA,YAAM,OAAqB,IAAC,IACzDA,EAAAA,cAAA,YAAM,OAAqB,KAACA,EAAAA,cAAA,YAAM,OAAqB,IAAC,IACxDA,EAAAA,cAAA,YAAM,OAAqB,KAACA,EAAAA,cAAA,YAAM,OAAqB,IACvDA,EAAAA,cAAA,YAAM,OAAqB,KAACA,EAAAA,cAAA,YAAM,QAIzBuE,EACXvE,EAAAA,cAAA,SAAG,8HAMQwE,EACXxE,EAAAA,cAAA,SAAG,4FAMQyE,EACXzE,EAAAA,cAAA,WACEA,EAAAA,cAAA,SAAG,uBACmBA,EAAAA,cAAA,YAAM,oBAAuB,4BACjDA,EAAAA,cAAA,YAAM,iBAAoB,+EAG5BA,EAAAA,cAAA,SAAG,kIAOM0E,EACX1E,EAAAA,cAAA,SAAG,+EAKQ2E,EACX3E,EAAAA,cAAA,SAAG,iDAGQ4E,EACX5E,EAAAA,cAAA,SAAG,wFAMQ6E,EAAuB7E,EAAAA,cAAA,SAAG,uCAE1B8E,EACX9E,EAAAA,cAAA,SAAG,mEACgE,IACjEA,EAAAA,cAAA,YAAM,KAAQ,KAIL+E,EACX/E,EAAAA,cAAA,SAAG,0BACsBA,EAAAA,cAAA,YAAM,OAAU,mEAK9BgF,EACXhF,EAAAA,cAAA,WACEA,EAAAA,cAAA,SAAG,0BACsBA,EAAAA,cAAA,SAAG,kBAAkB,aAAUA,EAAAA,cAAA,YAAM,OAAW,IAAI,oEACT,IAClEA,EAAAA,cAAA,YAAM,OAAU,KAElBA,EAAAA,cAAA,SAAG,iBACaA,EAAAA,cAAA,KAAGC,KAAK,+BAA8B,sBAAuB,IAAI,gH,iIClGrF,MAAMgF,EAAcC,GACD,iBAANA,EAAuB,GAC3BA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,MAAM,GAG9B,SAAS1C,EAAmBQ,GAAkB,IAADmC,EAAA,IAAhB,WAAE1C,GAAYO,EACxD,MAAM,EAACoC,EAAkB,EAACC,IAAwBC,EAAAA,EAAAA,UAAS,IACrD,EAACC,EAAY,EAACC,IAAkBF,EAAAA,EAAAA,UAAS,GAE/C,IAAK7C,EACH,OAAO,KAGT,MAAMgD,EAAwBhD,EAAWzC,WAAWoF,GAC9CM,EAA+C,QAAhCP,EAAGM,EAAsBE,eAAO,IAAAR,OAAA,EAA7BA,EAAgCI,GAElDK,EACJ/F,EAAAA,cAAA,WACG4C,EAAWzC,WAAW6F,KAAI,CAACC,EAAMC,IAChClG,EAAAA,cAACmG,EAAAA,EAAM,CACLC,IAAKF,EACLG,MAAOJ,EAAKnG,KACZwG,KAAK,KACLC,QAASA,IAAMf,EAAqBU,GACpCrE,UAAW0D,IAAsBW,EAAI,mBAAqB,IAEzDD,EAAKnG,SAMd,OACEE,EAAAA,cAAA,OAAKwG,MAAO,CAAEC,aAAc,KAC1BzG,EAAAA,cAAA,MAAI2B,GAAIsD,EAAWrC,EAAW9C,KAAO,aAAa,MACtCE,EAAAA,cAAA,YAAO4C,EAAW9C,MAAY,uBACxCE,EAAAA,cAAA,KACEwG,MAAO,CAAEE,WAAY,OAAQC,SAAU,QACvC1G,KAAM2C,EAAW1C,QAClB,mBAKHF,EAAAA,cAAA,UAAI,iBACJA,EAAAA,cAAA,SAAI4C,EAAW7C,aAEfC,EAAAA,cAAA,OACEwG,MAAO,CACLI,QAAS,OACTC,cAAe,MACfC,eAAgB,QAChBC,WAAY,WACZC,IAAK,KAGPhH,EAAAA,cAAA,MAAIwG,MAAO,CAAES,MAAO,OAAQC,SAAU,SAAUC,WAAY,WAAY,eAGvEpB,GAGH/F,EAAAA,cAAC4B,EAAAA,EAAG,KACF5B,EAAAA,cAAC8B,EAAAA,EAAG,CAACC,GAAI,GACP/B,EAAAA,cAAA,OAAKwG,MAAO,CAAEG,SAAU,KACtB3G,EAAAA,cAAA,KAAG6B,UAAU,wBAAuB,eACpC7B,EAAAA,cAAA,KAAG6B,UAAU,eAAe+D,EAAsB7F,aAElDC,EAAAA,cAAA,KAAG6B,UAAU,wBAAuB,qBACV,KACxB7B,EAAAA,cAAA,QAAM6B,UAAU,qBACb+D,EAAsBtF,OAG3BN,EAAAA,cAAA,KAAG6B,UAAU,eAAe+D,EAAsBrF,UACjDqF,EAAsBE,SACrB9F,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OACEwG,MAAO,CAAEI,QAAS,OAAQI,IAAK,EAAGD,WAAY,aAE7CnB,EAAsBE,QAAQE,KAAI,CAACoB,EAAKlB,IAErClG,EAAAA,cAACmG,EAAAA,EAAM,CACLG,KAAK,KACLzE,UAAWqE,IAAMR,EAAc,mBAAqB,GACpDa,QAASA,IAAMZ,EAAeO,IAE7BkB,EAAItH,SAKbE,EAAAA,cAAA,SAAI4F,EAAsBE,QAAQJ,GAAa2B,cAInDrH,EAAAA,cAAA,KAAG6B,UAAU,wBAAuB,gBACpC7B,EAAAA,cAAA,OAAKwG,MAAO,CAAEc,gBAAiB,UAC7BtH,EAAAA,cAACqC,EAAAA,EAAS,CAACkF,oBAAkB,GAC1B3B,EAAsBE,QACnBF,EAAsBxF,WAAWoH,QAC/B,gBACA5B,EAAsBE,QAAQJ,GAAa5F,MAE7C8F,EAAsBxF,eAMlCJ,EAAAA,cAAC8B,EAAAA,EAAG,CAACC,GAAI,GACP/B,EAAAA,cAAA,WACAA,EAAAA,cAACgC,EAAAA,KAAI,CAACC,GAAI,IAAM2D,EAAsBlF,MACpCV,EAAAA,cAACkC,EAAAA,EAAU,CACTC,SAAS0D,aAAe,EAAfA,EAAiBpF,MAAOmF,EAAsBnF,IACvD2B,QAAS,kBAAoBQ,EAAW9C,KAAO,kBAO7D,C","sources":["webpack://the-python-graph-gallery/./src/functions/hist.js","webpack://the-python-graph-gallery/./src/pages/histogram.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/functions/paramDescription.js","webpack://the-python-graph-gallery/./src/components/FunctionExploration.js"],"sourcesContent":["import React from 'react';\nimport {\n  alphaHowToUse,\n  colorHowToUse,\n  hatchHowToUse,\n} from './paramDescription';\n\nconst name = 'hist()';\nconst description = (\n  <>\n    <p>\n      The <code>hist()</code> function of <a href=\"/matplotlib\">matplotlib</a>{' '}\n      creates a histogram to visualize the distribution of a dataset. It plots\n      rectangular bars with heights proportional to the frequency of values in\n      data bins.\n    </p>\n  </>\n);\n\nconst docUrl =\n  'https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.hist.html';\n//\n//\n//\n//\n//\nconst param1 = {\n  name: 'color',\n  description: <p>Sets the color of the histogram bars.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\nfig, ax = plt.subplots()\nax.hist(data, color=\"purple\")\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: <div>{colorHowToUse}</div>,\n  img: 'tuto-hist-1-square',\n  post: 'basic-histogram-in-matplotlib',\n};\n//\n//\n//\n//\n//\nconst param2 = {\n  name: 'bins',\n  description: <p>Determines the number of equal-width bins in the range.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\nfig, ax = plt.subplots()\nax.hist(data, bins=50)\nplt.show()\n`.trim(),\n  type: 'int or sequence or str',\n  howToUse: (\n    <p>\n      Can be an integer, a list of bin edges, or one of the predefined strings\n      (&apos;auto&apos;, &apos;fd&apos;, &apos;doane&apos;, &apos;scott&apos;,\n      &apos;stone&apos;, &apos;rice&apos;, &apos;sturges&apos;, or\n      &apos;sqrt&apos;).\n    </p>\n  ),\n  img: 'tuto-hist-2-square',\n  post: 'basic-histogram-in-matplotlib',\n};\n//\n//\n//\n//\n//\nconst param3 = {\n  name: 'cumulative',\n  description: (\n    <p>\n      If True, then a histogram is computed where each bin gives the counts in\n      that bin plus all bins for smaller values.\n    </p>\n  ),\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\nfig, ax = plt.subplots()\nax.hist(data, cumulative=True)\nplt.show()\n`.trim(),\n  type: 'boolean',\n  howToUse: (\n    <p>\n      Use <code>True</code> for a cumulative histogram, <code>False</code> for a\n      regular histogram.\n    </p>\n  ),\n  img: 'tuto-hist-3-square',\n  post: 'basic-histogram-in-matplotlib',\n};\n//\n//\n//\n//\n//\nconst param4 = {\n  name: 'alpha',\n  description: <p>Controls the transparency of the histogram bars.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\nfig, ax = plt.subplots()\nax.hist(data, alpha=0.5)\nplt.show()\n`.trim(),\n  type: 'float',\n  howToUse: <div>{alphaHowToUse}</div>,\n  img: 'tuto-hist-5-square',\n  post: 'basic-histogram-in-matplotlib',\n};\n//\n//\n//\n//\n//\nconst param5 = {\n  name: 'orientation',\n  description: (\n    <p>Determines whether the histogram bars are vertical or horizontal.</p>\n  ),\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\nfig, ax = plt.subplots()\nax.hist(data, orientation='horizontal')\nplt.show()\n`.trim(),\n  type: 'str',\n  howToUse: (\n    <p>\n      Available values are either <code>&apos;vertical&apos;</code> (default) or{' '}\n      <code>&apos;horizontal&apos;</code>\n    </p>\n  ),\n  img: 'tuto-hist-4-square',\n  post: 'basic-histogram-in-matplotlib',\n};\n//\n//\n//\n//\n//\nconst param6 = {\n  name: 'edgecolor',\n  description: <p>Determines the color of the edges of each bar</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\nfig, ax = plt.subplots()\nax.hist(data, edgecolor='black')\nplt.show()\n`.trim(),\n  type: 'str',\n  howToUse: <div>{colorHowToUse}</div>,\n  img: 'tuto-hist-6-square',\n  post: 'basic-histogram-in-matplotlib',\n};\n//\n//\n//\n//\n//\nconst param7 = {\n  name: 'hatch',\n  description: <p>Determines the pattern to be used to fill the bars</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ndata = np.random.randn(1000)\nfig, ax = plt.subplots()\nax.hist(data, hatch='*')\nplt.show()\n`.trim(),\n  type: 'str',\n  howToUse: <div>{hatchHowToUse}</div>,\n  img: '584-introduction-hatch-matplotlib-3',\n  post: '584-introduction-hatch-matplotlib',\n};\n\nexport const hist = {\n  name,\n  description,\n  docUrl,\n  parameters: [param1, param2, param3, param4, param5, param6, param7],\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport {\n  Matplotlib,\n  Pandas,\n  Seaborn,\n  Plotnine,\n} from '../components/MiscellaneousLogos';\nimport { Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport ChartImage from '../components/ChartImage';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\nimport { hist } from '../functions/hist';\nimport FunctionExploration from '../components/FunctionExploration';\n\nconst chartDescription = (\n  <>\n    <p>\n      A <a href=\"https://www.data-to-viz.com/graph/histogram.html\">Histogram</a>{' '}\n      represents the <b>distribution</b> of a numeric variable for one or\n      several groups. The values are split in <b>bins</b>, each bin is\n      represented as a <b>bar</b>.{' '}\n    </p>\n    <p>\n      This page showcases many histograms built with <b>python</b>, using the{' '}\n      most popular libraries like <code>seaborn</code> and{' '}\n      <code>matplotlib</code>.\n    </p>\n    <p>\n      Examples start with <b>very simple</b>, beginner-friendly histograms and\n      progressively increase in complexity. At the end of the page, some{' '}\n      <b>polished & publication-ready</b> histograms are provided, ready to be\n      used in your next project 🔥!\n    </p>\n  </>\n);\n\nconst quickCode = `# library & dataset\nimport seaborn as sns\ndf = sns.load_dataset('iris')\n\n# Plot the histogram thanks to the displot function\nsns.displot( data=df[\"sepal_length\"], kde=True )\n`;\n\nconst quickCodeMatplotlib = `# library & dataset\nimport matplotlib.pyplot as plt\nhours = [17, 20, 22, 25, 26, 27, 30, 31, 32, 38, 40, 40, 45, 55]\n\n# Initialize layout\nfig, ax = plt.subplots(figsize = (9, 9))\n\n#plot\nax.hist(hours, bins=5, edgecolor=\"black\");\n`;\n\nconst quickCodePandas = `# library & dataset\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\ntime = [17, 25, 42, 35, 26, 27, 20, 11, 22, 32, 35, 30, 45, 55]\n\n# Convert to a pandas format\ntime = pd.Series(time)\n\n#plot\ntime.hist()\nplt.show\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Python Histogram Gallery | Dozens of examples with code\"\n    seoDescription=\"A collection of histogram examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function Histogram() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Histogram\"\n        description={chartDescription}\n        chartType=\"histogram\"\n      />\n\n      <Container>\n        <h2 id=\"Quick (Seaborn)\">&#9201; Quick start (Seaborn)</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              <code>Seaborn</code> is definitely the best library to quickly\n              build a histogram thanks to its <code>displot()</code>.\n            </p>\n            <p>\n              Note the importance of the <code>bins</code> parameter: try\n              several values to see which represents your data the best. 🔥\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/20-basic-histogram-seaborn'}>\n              <ChartImage\n                imgName=\"20_Basic_Histogram_seaborn2\"\n                caption=\"The most basic histogram one can make with python and seaborn\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\">\n          <Seaborn />\n          Histogram charts with <code>Seaborn</code>\n        </h2>\n        <p>\n          <code>Seaborn</code> is a python library allowing to make better\n          charts easily. It is well adapted to build histogram thanks to its{' '}\n          <code>displot</code> function. The following charts will guide you\n          through its usage, going from a very{' '}\n          <Link to=\"\">basic histogram</Link> to something much more{' '}\n          <Link to=\"\">customized</Link>.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"20_Basic_Histogram_seaborn1\"\n            caption=\"The most basic histogram with seaborn. It adds a density on top by default\"\n            linkTo=\"/20-basic-histogram-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"20_Basic_Histogram_seaborn2\"\n            caption=\"Play with the bin parameter to control the number of bars\"\n            linkTo=\"/20-basic-histogram-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"21_Display_Rug_and_distribution_on_hist1\"\n            caption=\"Remove the density chart on top of the seaborn histogram\"\n            linkTo=\"/21-control-rug-and-density-on-seaborn-histogram\"\n          />\n          <ChartImageContainer\n            imgName=\"21_Display_Rug_and_distribution_on_hist2\"\n            caption=\"Add rug on top of the histogram\"\n            linkTo=\"/21-control-rug-and-density-on-seaborn-histogram\"\n          />\n          <ChartImageContainer\n            imgName=\"21_Display_Rug_and_distribution_on_hist3\"\n            caption=\"Customize the rug: color, size and more\"\n            linkTo=\"/21-control-rug-and-density-on-seaborn-histogram\"\n          />\n          <ChartImageContainer\n            imgName=\"21_Display_Rug_and_distribution_on_hist4\"\n            caption=\"Customize the appearance of the density chart displayed on top of the histogram\"\n            linkTo=\"/21-control-rug-and-density-on-seaborn-histogram\"\n          />\n          <ChartImageContainer\n            imgName=\"23-90degree-rotated-histogram\"\n            caption=\"Flipping the histogram to display it horizontally\"\n            linkTo=\"/23-90degree-rotated-histogram\"\n          />\n          <ChartImageContainer\n            imgName=\"24_Histogram_with_boxplot_on_top\"\n            caption=\"How to split the chart window to display a boxplot on top of the histogram\"\n            linkTo=\"/24-histogram-with-a-boxplot-on-top-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"25_Histogram_of_several_variables1\"\n            caption=\"Compare the distribution of several groups on the same chart\"\n            linkTo=\"/25-histogram-with-several-variables-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"25_Histogram_of_several_variables2\"\n            caption=\"Use small multiple to compare the distribution of several groups\"\n            linkTo=\"/25-histogram-with-several-variables-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"82_seaborn_jointplot1\"\n            caption=\"Histogram can be added around a scatterplot to show each variable distributions\"\n            linkTo=\"/82-marginal-plot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"82_seaborn_jointplot6\"\n            caption=\"Histogram can be added around a 2d density chart to show x and y variable distributions\"\n            linkTo=\"/82-marginal-plot-with-seaborn\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Quick (matplotlib)\">\n          <Matplotlib /> Quick start (Matplotlib)\n        </h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              <Link to=\"/matplotlib\">Matplotlib</Link> can also build decent\n              histograms easily. It provides a <code>hist()</code> function that\n              accept a vector of numeric values as input.\n            </p>\n            <p>\n              It also provides all the options you can think of to customize the\n              binning and the genreral appearance.\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/basic-histogram-in-matplotlib'}>\n              <ChartImage\n                imgName=\"basic-histogram-in-matplotlib\"\n                caption=\"The most basic histogram one can make with python and matplotlib\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCodeMatplotlib}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <FunctionExploration funDetails={hist} />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib />\n          Histograms with <code>Matplotlib</code>\n        </h2>\n        <p>\n          As usual <Link to=\"/matplotlib\">matplotlib</Link> is perfectly skilled\n          to build nice histogram, but require some more work camparing to{' '}\n          <Link to=\"/seaborn\">seaborn</Link> to get a good looking figure.\n        </p>\n        <p>\n          The examples below should help you to get started with matplotlib\n          histograms. They go from a very{' '}\n          <Link to=\"/basic-histogram-in-matplotlib\">basic version</Link> and\n          then show how to customize it, like adding{' '}\n          <Link to=\"/basic-histogram-in-matplotlib\">annotation</Link>.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"basic-histogram-in-matplotlib\"\n            caption=\"The most basic histogram with matplotlib.\"\n            linkTo=\"/basic-histogram-in-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"basic-histogram-in-matplotlib2\"\n            caption=\"Reduce chart opacity and add annotation (median represented in vertical line)\"\n            linkTo=\"/basic-histogram-in-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"tuto-hist-3\"\n            caption=\"Cumulative histogram\"\n            linkTo=\"/basic-histogram-in-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"density-mirror-histogram\"\n            caption=\"Mirror density chart to compare the distribution of 2 variables\"\n            linkTo=\"/density-mirror\"\n          />\n          <ChartImageContainer\n            imgName=\"504-histogram-with-colored-tails\"\n            caption=\"A histogram with bars being colored differently based on thresholds\"\n            linkTo=\"/504-histogram-with-colored-tails\"\n          />\n          <ChartImageContainer\n            imgName=\"506-histogram-with-small-mutliples\"\n            caption=\"Use small multiple to compare the distribution of several groups or several variables\"\n            linkTo=\"/506-histogram-with-small-mutliples\"\n          />\n          <ChartImageContainer\n            imgName=\"534-highly-customized-layout\"\n            caption=\"Subplot, title, and margin customization\"\n            linkTo=\"/534-highly-customized-layout\"\n          />\n          <ChartImageContainer\n            imgName=\"584-introduction-hatch-matplotlib-3\"\n            caption=\"Add patterns to your histogram bars\"\n            linkTo=\"/584-introduction-hatch-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Quick (pandas)\">\n          <Pandas /> Quick start (Pandas)\n        </h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              <Link to=\"/pandas\">Pandas</Link> can build decent histograms\n              easily. It provides different functions like <code>hist()</code>{' '}\n              and <code>plot()</code> that need a pandas dataframe (or series)\n              as input.\n            </p>\n            <p>\n              Since it's based on <Link to=\"/matplotlib\">matplotlib</Link>, it\n              provides all the options you can think of to customize the binning\n              and the genreral appearance.\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/527-introduction-to-histogram-with-pandas'}>\n              <ChartImage\n                imgName=\"527-introduction-to-histogram-with-pandas\"\n                caption=\"The most basic histogram one can make with python and pandas\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCodePandas}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Pandas\">\n          <Pandas />\n          Histograms with <code>Pandas</code>\n        </h2>\n        <p>\n          <Link to=\"/pandas\">Pandas</Link> is not the most common Python library\n          to build histograms, but it can be used to build decent ones. It\n          provides different functions like <code>hist()</code> and{' '}\n          <code>plot()</code> from matplotlib.\n        </p>\n        <p>\n          The examples below should help you to get started with\n          <Link to=\"/527-introduction-to-histogram-with-pandas\">\n            {' '}\n            basic pandas histograms\n          </Link>\n          .\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"527-introduction-to-histogram-with-pandas\"\n            caption=\"The most basic histogram with pandas\"\n            linkTo=\"/527-introduction-to-histogram-with-pandas\"\n          />\n          <ChartImageContainer\n            imgName=\"528-customizing-histogram-with-pandas\"\n            caption=\"Customize title, labels and bins of histograms with pandas\"\n            linkTo=\"/528-customizing-histogram-with-pandas\"\n          />\n          <ChartImageContainer\n            imgName=\"529-multi-group-histogram-pandas-1\"\n            caption=\"Show the distribution of 2 groups or variables on a single graph\"\n            linkTo=\"/529-multi-group-histogram-pandas\"\n          />\n          <ChartImageContainer\n            imgName=\"529-multi-group-histogram-pandas-2\"\n            caption=\"Use small multiple to compare the distribution of several groups on the same chart\"\n            linkTo=\"/529-multi-group-histogram-pandas\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Plotnine\">\n          <Plotnine />\n          Histograms with <code>Plotnine</code>\n        </h2>\n        <p>\n          <Link to=\"/plotnine\">Plotnine</Link> allows us to use the{' '}\n          <b>grammar-of-graphics</b> to build histograms. It provides a{' '}\n          <code>geom_histogram()</code> function that can be used to build\n          histograms.\n        </p>\n        <p>\n          The examples below should help you to get started with\n          <b> basic plotnine histograms</b>.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"578-introduction-histogram-plotnine-1\"\n            caption=\"Most basic histogram with plotnine\"\n            linkTo=\"/578-introduction-histogram-plotnine\"\n          />\n          <ChartImageContainer\n            imgName=\"578-introduction-histogram-plotnine-2\"\n            caption=\"Control bar color\"\n            linkTo=\"/578-introduction-histogram-plotnine\"\n          />\n          <ChartImageContainer\n            imgName=\"578-introduction-histogram-plotnine-3\"\n            caption=\"Custom style with theme, colors and opacity\"\n            linkTo=\"/578-introduction-histogram-plotnine\"\n          />\n          <ChartImageContainer\n            imgName=\"579-multiple-histograms-plotnine-1\"\n            caption=\"Split histogram by group\"\n            linkTo=\"/579-multiple-histograms-plotnine\"\n          />\n          <ChartImageContainer\n            imgName=\"579-multiple-histograms-plotnine-2\"\n            caption=\"Mirror histogram to compare 2 variables\"\n            linkTo=\"/579-multiple-histograms-plotnine\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Best\">\n          <Matplotlib />\n          Best python histogram examples\n        </h2>\n        <p>\n          The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>). The{' '}\n          <a href=\"https://python-graph-gallery.com\">Python graph gallery</a>{' '}\n          tries to display (or translate from R) some of the best creations and\n          explain how their source code works. If you want to display your work\n          here, please drop me a word or even better, submit a{' '}\n          <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">\n            Pull Request\n          </a>\n          !\n        </p>\n        <Row>\n          <Col xs={12} md={6}>\n            <Link to={'/web-histogram-with-annotations'}>\n              <ChartImage\n                imgName={'web-histogram-with-annotations'}\n                caption={'Nice histogram with custom annotations.'}\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"distribution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta property=\"og:title\" content={title} />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from 'react';\n\nexport const alphaHowToUse = (\n  <p>\n    Values range from <code>0</code> (completely transparent) to <code>1</code>{' '}\n    (completely opaque).\n  </p>\n);\n\nexport const colorHowToUse = (\n  <p>\n    Can be a color name, a Hex code, or an RGB value.{' '}\n    <a href=\"/python-colors\">Learn more about colors.</a>\n  </p>\n);\n\nexport const zorderDescription = (\n  <p>Controls the drawing order of plot elements.</p>\n);\n\nexport const zorderHowToUse = (\n  <p>\n    Higher zorder values are drawn on top of lower values. This is useful when\n    you want certain elements to appear above others.\n  </p>\n);\n\nexport const hatchHowToUse = (\n  <p>\n    It must be in one of: <code>&apos;/&apos;</code>, <code>&apos;\\&apos;</code>\n    , <code>&apos;|&apos;</code>,<code>&apos;-&apos;</code>,{' '}\n    <code>&apos;+&apos;</code>, <code>&apos;x&apos;</code>,{' '}\n    <code>&apos;o&apos;</code>, <code>&apos;O&apos;</code>,\n    <code>&apos;.&apos;</code>, <code>&apos;*&apos;</code>\n  </p>\n);\n\nexport const hueDescription = (\n  <p>\n    Specify the dataset column to use for color encoding in the chart. It allows\n    for grouping and differentiating data points.\n  </p>\n);\n\nexport const hueHowToUse = (\n  <p>\n    Column name to use for color encoding in the chart. It's usually a\n    categorical variable.\n  </p>\n);\n\nexport const dataHowToUse = (\n  <div>\n    <p>\n      It just has to be a <code>pandas.DataFrame</code> (columns are variables),\n      <code>numpy.ndarray</code> (rows/columns are variables), or any\n      mapping/sequence (dictionaries/lists)\n    </p>\n    <p>\n      Supports both long-form (each variable in its own column) and wide-form\n      (variables in separate columns; reshaped internally).\n    </p>\n  </div>\n);\n\nexport const dataDescription = (\n  <p>\n    Dataframe-like (pandas, numpy, polars...) with the columns we want to plot.\n  </p>\n);\n\nexport const linestyleDescription = (\n  <p>Determines the style of the line in the plot.</p>\n);\n\nexport const linestyleHowToUse = (\n  <p>\n    Common values include '-' (solid), '--' (dashed), ':' (dotted), and '-.'\n    (dash-dot).\n  </p>\n);\n\nexport const linewidthDescription = <p>Sets the width of the plotted line.</p>;\n\nexport const linewidthHowToUse = (\n  <p>\n    Larger values create thicker lines. The default value is usually{' '}\n    <code>1</code>.\n  </p>\n);\n\nexport const paletteDescription = (\n  <p>\n    Defines colors for the <code>hue</code> semantic. It can be a list of colors\n    or a matplotlib colormap.\n  </p>\n);\n\nexport const paletteHowToUse = (\n  <div>\n    <p>\n      This parameter is used <b>in combination</b> with the <code>hue</code>{' '}\n      parameter and will a assign a different color to each category in{' '}\n      <code>hue</code>.\n    </p>\n    <p>\n      Moreover, the <a href=\"/introduction-to-pypalettes\">pypalettes library</a>{' '}\n      can help you find the best colors for your chart by providing access to\n      thousands of pre-made color palette.\n    </p>\n  </div>\n);\n","import { Link } from 'gatsby';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ChartImage from './ChartImage';\n\nimport './functionExploration.css';\nimport CodeChunk from './CodeChunk';\n\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport default function FunctionExploration({ funDetails }) {\n  const [selectedParameter, setSelectedParameter] = useState(0);\n  const [selectedOpt, setSelectedOpt] = useState(0);\n\n  if (!funDetails) {\n    return null;\n  }\n\n  const selectedParameterInfo = funDetails.parameters[selectedParameter];\n  const selectedOptInfo = selectedParameterInfo.options?.[selectedOpt];\n\n  const argumentButtons = (\n    <div>\n      {funDetails.parameters.map((item, i) => (\n        <Button\n          key={i}\n          value={item.name}\n          size=\"sm\"\n          onClick={() => setSelectedParameter(i)}\n          className={selectedParameter === i ? 'isButtonSelected' : ''}\n        >\n          {item.name}\n        </Button>\n      ))}\n    </div>\n  );\n\n  return (\n    <div style={{ marginBottom: 70 }}>\n      <h2 id={capitalize(funDetails.name + ' details')}>\n        &#128270; <code>{funDetails.name}</code> function parameters\n        <a\n          style={{ marginLeft: '15px', fontSize: '14px' }}\n          href={funDetails.docUrl}\n        >\n          &rarr; see full doc\n        </a>\n      </h2>\n\n      <h3>&rarr; Description</h3>\n      <p>{funDetails.description}</p>\n\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'start',\n          alignItems: 'baseline',\n          gap: 14,\n        }}\n      >\n        <h3 style={{ width: 'auto', flexWrap: 'nowrap', whiteSpace: 'nowrap' }}>\n          &rarr; Arguments\n        </h3>\n        {argumentButtons}\n      </div>\n\n      <Row>\n        <Col md={8}>\n          <div style={{ fontSize: 16 }}>\n            <p className=\"argumentSectionTitle\">Description</p>\n            <p className=\"little-text\">{selectedParameterInfo.description}</p>\n\n            <p className=\"argumentSectionTitle\">\n              Possible values &rarr; {'  '}\n              <span className=\"parameterTypePill\">\n                {selectedParameterInfo.type}\n              </span>\n            </p>\n            <p className=\"little-text\">{selectedParameterInfo.howToUse}</p>\n            {selectedParameterInfo.options && (\n              <>\n                <div\n                  style={{ display: 'flex', gap: 2, alignItems: 'baseline' }}\n                >\n                  {selectedParameterInfo.options.map((opt, i) => {\n                    return (\n                      <Button\n                        size=\"sm\"\n                        className={i === selectedOpt ? 'isButtonSelected' : ''}\n                        onClick={() => setSelectedOpt(i)}\n                      >\n                        {opt.name}\n                      </Button>\n                    );\n                  })}\n                </div>\n                <p>{selectedParameterInfo.options[selectedOpt].explanation}</p>\n              </>\n            )}\n\n            <p className=\"argumentSectionTitle\">Code Example</p>\n            <div style={{ backgroundColor: 'white' }}>\n              <CodeChunk hasWhiteBackground>\n                {selectedParameterInfo.options\n                  ? selectedParameterInfo.basicUsage.replace(\n                      'paramgoeshere',\n                      selectedParameterInfo.options[selectedOpt].name\n                    )\n                  : selectedParameterInfo.basicUsage}\n              </CodeChunk>\n            </div>\n          </div>\n        </Col>\n\n        <Col md={4}>\n          <br />\n          <Link to={'/' + selectedParameterInfo.post}>\n            <ChartImage\n              imgName={selectedOptInfo?.img || selectedParameterInfo.img}\n              caption={'More about the ' + funDetails.name + ' function.'}\n            />\n          </Link>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n"],"names":["hist","name","description","React","href","docUrl","parameters","basicUsage","trim","type","howToUse","colorHowToUse","img","post","alphaHowToUse","hatchHowToUse","chartDescription","quickCode","quickCodeMatplotlib","quickCodePandas","Head","SEO","title","seoDescription","Histogram","Layout","isTocEnabled","TitleAndDescription","chartType","Container","id","Row","className","Col","md","Link","to","ChartImage","imgName","caption","CodeChunk","Spacing","Seaborn","ChartImageContainer","linkTo","Matplotlib","FunctionExploration","funDetails","Pandas","Plotnine","xs","ChartFamilySection","chartFamily","Contact","_ref","keywords","image","lang","content","property","allGifs","includes","useStaticQuery","allFile","edges","find","n","node","GatsbyImage","childImageSharp","gatsbyImageData","alt","zorderDescription","zorderHowToUse","hueDescription","hueHowToUse","dataHowToUse","dataDescription","linestyleDescription","linestyleHowToUse","linewidthDescription","linewidthHowToUse","paletteDescription","paletteHowToUse","capitalize","s","charAt","toUpperCase","slice","_selectedParameterInf","selectedParameter","setSelectedParameter","useState","selectedOpt","setSelectedOpt","selectedParameterInfo","selectedOptInfo","options","argumentButtons","map","item","i","Button","key","value","size","onClick","style","marginBottom","marginLeft","fontSize","display","flexDirection","justifyContent","alignItems","gap","width","flexWrap","whiteSpace","opt","explanation","backgroundColor","hasWhiteBackground","replace"],"sourceRoot":""}
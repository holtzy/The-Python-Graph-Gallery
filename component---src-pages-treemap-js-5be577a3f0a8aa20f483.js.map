{"version":3,"file":"component---src-pages-treemap-js-5be577a3f0a8aa20f483.js","mappings":"4MAOA,MAAMA,EAAU,CACd,iBACA,yBACA,wBAKa,SAASC,EAAUC,GAAwB,IAAvB,QAAEC,EAAO,QAAEC,GAASF,EACrD,GAAIF,EAAQK,SAASF,GACnB,OAAOG,EAAAA,cAAA,SAAG,QAGZ,MAgBMC,GAhBOC,EAAAA,EAAAA,gBAAe,cAgBTC,QAAQC,MAAMC,MAAMC,GAC9BA,EAAEC,KAAKC,KAAKT,SAASF,KAG9B,OAAKI,EAMHD,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKS,UAAU,uBACbT,EAAAA,cAACU,EAAAA,EAAW,CACVT,MAAOA,EAAMM,KAAKI,gBAAgBC,gBAClCC,IAAKf,EACLW,UAAU,kBAEXX,GACCE,EAAAA,cAAA,OAAKS,UAAU,qBACbT,EAAAA,cAAA,OAAKS,UAAU,yBACbT,EAAAA,cAAA,SAAIF,OAfP,IAsBX,C,mGCzDe,SAASgB,EAAmBlB,GAAgC,IAA/B,QAAEC,EAAO,QAAEC,EAAO,OAAEiB,GAAQnB,EACtE,OACEI,EAAAA,cAACgB,EAAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,GACflB,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAIL,GACRf,EAAAA,cAACL,EAAAA,EAAU,CAACE,QAASA,EAASC,QAASA,KAI/C,C,qECJO,MAAMuB,EAAMzB,IAA0C,IAAzC,MAAE0B,EAAK,eAAEC,EAAc,SAAEC,GAAU5B,EACrD,OACEI,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQsB,GACRtB,EAAAA,cAAA,QAAMyB,KAAK,OACXzB,EAAAA,cAAA,QACEQ,KAAK,cACLkB,QAASH,GAAkB,qCAE7BvB,EAAAA,cAAA,QAAMQ,KAAK,SAASkB,QAAQ,cAC5B1B,EAAAA,cAAA,QACEQ,KAAK,WACLkB,QAASF,GAAY,6CAGvBxB,EAAAA,cAAA,QAAM2B,SAAS,eAAeD,QAAQ,6BACtC1B,EAAAA,cAAA,QACE2B,SAAS,WACTD,QAASJ,EAAQ,gCAEnBtB,EAAAA,cAAA,QACE2B,SAAS,WACTD,QAAQ,oGAEV1B,EAAAA,cAAA,QAAM2B,SAAS,iBAAiBD,QAASH,IACzCvB,EAAAA,cAAA,QAAMQ,KAAK,eAAekB,QAAQ,wBAClC1B,EAAAA,cAAA,QAAMQ,KAAK,eAAekB,QAAQ,qBACjC,C,+PCrBP,MAAME,EACJ,8UAEIC,EAAS,0YAcFC,EAAOA,IAClB9B,EAAAA,cAACqB,EAAAA,EAAG,CACFC,MAAM,UACNC,eAAe,qGAIJ,SAASQ,IACtB,OACE/B,EAAAA,cAACgC,EAAAA,EAAM,CAACC,cAAY,GAClBjC,EAAAA,cAACkC,EAAAA,EAAmB,CAACZ,MAAM,UAAUa,YAAaP,IAElD5B,EAAAA,cAACoC,EAAAA,EAAS,KACRpC,EAAAA,cAAA,MAAIqC,GAAG,SAAQ,iBACfrC,EAAAA,cAACsC,EAAAA,EAAG,CAAC7B,UAAU,sBACbT,EAAAA,cAACgB,EAAAA,EAAG,CAACE,GAAI,GACPlB,EAAAA,cAAA,SAAG,KACCA,EAAAA,cAAA,YAAM,WAAc,gIAIxBA,EAAAA,cAAA,SACG,IAAI,uBACeA,EAAAA,cAAA,YAAM,UAAa,OAAK,IAC5CA,EAAAA,cAAA,YAAM,cAAiB,kBAAeA,EAAAA,cAAA,YAAM,YAAgB,IAAI,0CAIpEA,EAAAA,cAACgB,EAAAA,EAAG,CAACE,GAAI,GACPlB,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAI,kCACRpB,EAAAA,cAACL,EAAAA,EAAU,CACTE,QAAQ,kCACRC,QAAQ,+DAKhBE,EAAAA,cAACuC,EAAAA,EAAS,KAAEV,IAGd7B,EAAAA,cAACwC,EAAAA,EAAO,MAERxC,EAAAA,cAAA,OAAKS,UAAU,cAAc4B,GAAG,WAC9BrC,EAAAA,cAACoC,EAAAA,EAAS,KACRpC,EAAAA,cAAA,MAAIqC,GAAG,YAAW,qBACerC,EAAAA,cAAA,YAAM,YAAe,YAEtDA,EAAAA,cAAA,SAAG,+HAEuD,IACxDA,EAAAA,cAAA,KAAGyC,KAAK,+BAA8B,gBAAgB,iCACrC,IACjBzC,EAAAA,cAAA,KAAGyC,KAAK,wCAAuC,UAAU,KAE3DzC,EAAAA,cAAA,KAAGyC,KAAK,wCACNzC,EAAAA,cAAC0C,EAAAA,EAAM,CAACC,KAAK,MAAK,6BAKxB3C,EAAAA,cAACwC,EAAAA,EAAO,MAERxC,EAAAA,cAACoC,EAAAA,EAAS,KACRpC,EAAAA,cAAA,MAAIqC,GAAG,cACLrC,EAAAA,cAAC4C,EAAAA,GAAU,MAAG,gBACD5C,EAAAA,cAAA,YAAM,cAAiB,QAAKA,EAAAA,cAAA,YAAM,aAEjDA,EAAAA,cAAA,SACEA,EAAAA,cAAA,YAAM,cAAiB,2KAEkC,IACzDA,EAAAA,cAAA,YAAM,UAAa,cAErBA,EAAAA,cAACsC,EAAAA,EAAG,KACFtC,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,sBACRC,QAAQ,2CACRiB,OAAO,sCAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,gCACRC,QAAQ,6DACRiB,OAAO,gDAKbf,EAAAA,cAACwC,EAAAA,EAAO,MAERxC,EAAAA,cAACoC,EAAAA,EAAS,KACRpC,EAAAA,cAAA,MAAIqC,GAAG,UACLrC,EAAAA,cAAC6C,EAAAA,GAAM,MAAG,gBACG7C,EAAAA,cAAA,YAAM,WAErBA,EAAAA,cAAA,SACEA,EAAAA,cAAA,YAAM,UAAa,iJAIrBA,EAAAA,cAAA,SAAG,iBACaA,EAAAA,cAAA,SAAG,sBAAsB,6CAC3BA,EAAAA,cAAA,YAAM,wBAA2B,OAAK,IAClDA,EAAAA,cAAA,YAAM,kBAAqB,YAASA,EAAAA,cAAA,SAAG,mBAAmB,mDAG5DA,EAAAA,cAAA,UACE8C,IAAI,uEACJC,MAAM,MACNC,OAAO,MACP1B,MAAM,wBAERtB,EAAAA,cAAA,KACES,UAAU,0CACVgC,KAAK,0CACN,aAKHzC,EAAAA,cAACwC,EAAAA,EAAO,MAERxC,EAAAA,cAAA,OAAKS,UAAU,cAAc4B,GAAG,WAC9BrC,EAAAA,cAACoC,EAAAA,EAAS,KACRpC,EAAAA,cAACiD,EAAAA,EAAkB,CAACC,YAAY,mBAIpClD,EAAAA,cAACwC,EAAAA,EAAO,MAERxC,EAAAA,cAACoC,EAAAA,EAAS,KACRpC,EAAAA,cAACmD,EAAAA,EAAO,OAGVnD,EAAAA,cAACwC,EAAAA,EAAO,MAGd,C","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/pages/treemap.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta\n        property=\"og:title\"\n        content={title + ' | The Python Graph Gallery'}\n      />\n      <meta\n        property=\"og:image\"\n        content=\"https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true\"\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib, Plotly } from '../components/MiscellaneousLogos';\nimport ChartImage from '../components/ChartImage';\nimport { Button, Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/treemap.html'>treemap</a> displays hierarchical data as a set of nested rectangles. Each group is represented by a rectangle, which area is proportional to its value. In <code>Python</code>, the <code>squarify</code> library allows to compute the rectangle positions and plot it.</p>\";\n\nconst quickCode = `# libraries\nimport matplotlib.pyplot as plt\nimport squarify    # pip install squarify (algorithm for treemap)\nimport pandas as pd\n\n# Create a data frame with fake data\ndf = pd.DataFrame({'nb_people':[8,3,4,2], 'group':[\"group A\", \"group B\", \"group C\", \"group D\"] })\n\n# plot it\nsquarify.plot(sizes=df['nb_people'], label=df['group'], alpha=.8 )\nplt.axis('off')\nplt.show()\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Treemap\"\n    seoDescription=\"A collection of treemap examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function Treemap() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription title=\"Treemap\" description={chartDescription} />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              A <code>treemap</code> displays each element of a dataset as a\n              rectangle. It allows to see what proportion each element has\n              compared to the whole.\n            </p>\n            <p>\n              {' '}\n              This is doable with <code>python</code> and{' '}\n              <code>Matplotlib</code> thanks to the <code>squarify</code>{' '}\n              library that can be used as follow:🔥\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/200-basic-treemap-with-python'}>\n              <ChartImage\n                imgName=\"200_Basic_Treemap_with_squarify\"\n                caption=\"Most basic Treemap with Python, Matplotlib and Squarify\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <h2 id=\"Squarify\">\n            &#8505; &#65039; A note on the <code>Squarify</code> package\n          </h2>\n          <p>\n            The squarify library is a pure Python implementation of the squarify\n            treemap layout algorithm. It is a project developped by{' '}\n            <a href=\"https://github.com/laserson\">Uri Laserson</a> that has its\n            documentation on{' '}\n            <a href=\"https://github.com/laserson/squarify\">github</a>.\n          </p>\n          <a href=\"https://github.com/laserson/squarify\">\n            <Button size=\"sm\">Squarify documentation</Button>\n          </a>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib />\n          Treemap with <code>Matplotlib</code> and <code>Squarify</code>\n        </h2>\n        <p>\n          <code>Matplotlib</code> is probably the most famous and flexible\n          python library for data visualization. It is appropriate to build any\n          kind of chart, including the lollipop plot thanks to its{' '}\n          <code>stem()</code> function.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"201_Custom_Treemap1\"\n            caption=\"How to control the color of your treemap\"\n            linkTo=\"/201-control-the-color-of-treemap\"\n          />\n          <ChartImageContainer\n            imgName=\"202_Treemap_map_color_to_size\"\n            caption=\"How to make the rectangle colors relative to their values.\"\n            linkTo=\"/202-treemap-with-colors-mapped-on-values\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Plotly\">\n          <Plotly />\n          Treemap with <code>Plotly</code>\n        </h2>\n        <p>\n          <code>Plotly</code> is a very powerful library to create interactive\n          graphics. It is known for its great interactivity and its ability to\n          handle large datasets.\n        </p>\n        <p>\n          It comes with <b>multiple functions</b> to create treemaps, for both\n          of its API: <code>plotly.graph_objects</code> and{' '}\n          <code>plotly.express</code>. Try to <b>hover and click</b> on the\n          following treemap to see how it reacts:\n        </p>\n        <iframe\n          src=\"../../interactiveCharts/580-simple-interactive-treemap-plotly-2.html\"\n          width=\"800\"\n          height=\"600\"\n          title=\"most simple treemap\"\n        ></iframe>\n        <a\n          className=\"btn btn-secondary btn-md text-uppercase\"\n          href=\"/580-simple-interactive-treemap-plotly\"\n        >\n          See code\n        </a>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"partOfAWhole\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","SEO","title","seoDescription","keywords","lang","content","property","chartDescription","quickCode","Head","Treemap","Layout","isTocEnabled","TitleAndDescription","description","Container","id","Row","CodeChunk","Spacing","href","Button","size","Matplotlib","Plotly","src","width","height","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}
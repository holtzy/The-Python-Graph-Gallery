{"version":3,"file":"component---src-pages-violin-plot-js-bb24f74ea0ccbee4efd9.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/FunctionExploration.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/pages/violin-plot.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import { Link } from 'gatsby';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ChartImage from './ChartImage';\n\nimport './functionExploration.css';\nimport CodeChunk from './CodeChunk';\n\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport default function FunctionExploration({ funDetails }) {\n  const [selectedParameter, setSelectedParameter] = useState(0);\n  const [selectedOpt, setSelectedOpt] = useState(0);\n\n  if (!funDetails) {\n    return null;\n  }\n\n  const selectedParameterInfo = funDetails.parameters[selectedParameter];\n  const selectedOptInfo = selectedParameterInfo.options?.[selectedOpt];\n\n  const argumentButtons = (\n    <div>\n      {funDetails.parameters.map((item, i) => (\n        <Button\n          key={i}\n          value={item.name}\n          size=\"sm\"\n          onClick={() => setSelectedParameter(i)}\n          className={selectedParameter === i ? 'isButtonSelected' : ''}\n        >\n          {item.name}\n        </Button>\n      ))}\n    </div>\n  );\n\n  return (\n    <div style={{ marginBottom: 70 }}>\n      <h2 id={capitalize(funDetails.name + '()' + ' details')}>\n        &#128270; <code>{funDetails.name}</code> function parameters\n        <a\n          style={{ marginLeft: '15px', fontSize: '14px' }}\n          href={funDetails.docUrl}\n        >\n          &rarr; see full doc\n        </a>\n      </h2>\n\n      <h3>&rarr; Description</h3>\n      <p>{funDetails.description}</p>\n\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'start',\n          alignItems: 'baseline',\n          gap: 14,\n        }}\n      >\n        <h3 style={{ width: 'auto' }}>&rarr; Arguments</h3>\n        {argumentButtons}\n      </div>\n\n      <Row>\n        <Col md={8}>\n          <div style={{ fontSize: 16 }}>\n            <p className=\"argumentSectionTitle\">Description</p>\n            <p className=\"little-text\">{selectedParameterInfo.description}</p>\n\n            <p className=\"argumentSectionTitle\">\n              Possible values &rarr; {'  '}\n              <span className=\"parameterTypePill\">\n                {selectedParameterInfo.type}\n              </span>\n            </p>\n            <p className=\"little-text\">{selectedParameterInfo.howToUse}</p>\n            {selectedParameterInfo.options && (\n              <>\n                <div\n                  style={{ display: 'flex', gap: 2, alignItems: 'baseline' }}\n                >\n                  {selectedParameterInfo.options.map((opt, i) => {\n                    return (\n                      <Button\n                        size=\"sm\"\n                        className={i === selectedOpt ? 'isButtonSelected' : ''}\n                        onClick={() => setSelectedOpt(i)}\n                      >\n                        {opt.name}\n                      </Button>\n                    );\n                  })}\n                </div>\n                <p>{selectedParameterInfo.options[selectedOpt].explanation}</p>\n              </>\n            )}\n\n            <p className=\"argumentSectionTitle\">Code Example</p>\n            <div style={{ backgroundColor: 'white' }}>\n              <CodeChunk hasWhiteBackground>\n                {selectedParameterInfo.options\n                  ? selectedParameterInfo.basicUsage.replace(\n                      'paramgoeshere',\n                      selectedParameterInfo.options[selectedOpt].name\n                    )\n                  : selectedParameterInfo.basicUsage}\n              </CodeChunk>\n            </div>\n          </div>\n        </Col>\n\n        <Col md={4}>\n          <br />\n          <Link to={'/' + selectedParameterInfo.post}>\n            <ChartImage\n              imgName={selectedOptInfo?.img || selectedParameterInfo.img}\n              caption={'More about the ' + funDetails.name + ' function.'}\n            />\n          </Link>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta property=\"og:title\" content={title} />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib, Seaborn } from '../components/MiscellaneousLogos';\nimport { Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport ChartImage from '../components/ChartImage';\nimport FunctionExploration from '../components/FunctionExploration';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/violin.html'>violint plot</a> allows you to visualize the distribution of a numeric variable for one or several groups. <code>Seaborn</code> is particularly adapted to build it thanks to its <code>violin()</code> function. Violin plots deserve more attention than <a href='https://python-graph-gallery.com/boxplot'>boxplots</a>, which can sometimes hide features of the data.</p>\";\n\nconst quickCode = `# library & dataset\nimport seaborn as sns\ndf = sns.load_dataset('iris')\n\n# plot\nsns.violinplot(x=df[\"species\"], y=df[\"sepal_length\"])\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Python Violin plot Gallery | Dozens of examples with code\"\n    seoDescription=\"A collection of violin plot examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function ViolinPlot() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Violin plot\"\n        description={chartDescription}\n        chartType=\"violin\"\n      />\n\n      <Container>\n        <h2 id=\"Quick start\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              <code>Seaborn</code> is definitely the best library to quickly\n              build a violin plot. It offers a dedicated{' '}\n              <code>violinplot()</code> function that roughly works as\n              follows:🔥\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/50-basic-violinplot-and-input-formats'}>\n              <ChartImage\n                imgName=\"50_Basic_Violin_seaborn2\"\n                caption=\"The most basic violin plot one can make with python and seaborn\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\">\n          <Seaborn />\n          Violin charts with <code>Seaborn</code>\n        </h2>\n        <p>\n          <code>Seaborn</code> is a python library that enables you to make\n          better visualizations. It is well adapted to build density charts\n          thanks to its <code>violin</code> function. The following charts will\n          guide you through its usage, going from a very{' '}\n          <Link to=\"/50-basic-violinplot-and-input-formats\">\n            basic violin plot\n          </Link>{' '}\n          to something much more{' '}\n          <Link to=\"/52-custom-seaborn-violinplot\">customized</Link>.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"50_Basic_Violin_seaborn1\"\n            caption=\"How to build a very basic violin. Shows example based on different input formats.\"\n            linkTo=\"/50-basic-violinplot-and-input-formats\"\n          />\n          <ChartImageContainer\n            imgName=\"51_Horizontal_violinplot_Seaborn\"\n            caption=\"Make your violin chart horizontal to make labels more readable\"\n            linkTo=\"/51-horizontal-violinplot\"\n          />\n          <ChartImageContainer\n            imgName=\"52_Custom_violinplot_Appearance_Seaborn1\"\n            caption=\"Chart appearance: control violin width, stroke width and more\"\n            linkTo=\"/52-custom-seaborn-violinplot\"\n          />\n          <ChartImageContainer\n            imgName=\"53_Custom_violinplot_color_Seaborn3\"\n            caption=\"How to manage colors on a python violin plot\"\n            linkTo=\"/53-control-color-of-seaborn-violinplot\"\n          />\n          <ChartImageContainer\n            imgName=\"55_Specific_order_violinplot_Seaborn2\"\n            caption=\"Control the groups order, very useful if you want to display them by increasing mean\"\n            linkTo=\"/55-control-order-of-groups-in-violinplot-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"54_Grouped_violinplot_Seaborn\"\n            caption=\"If you have both groups and subgroups, you'll be interested in a grouped violin plot\"\n            linkTo=\"/54-grouped-violinplot\"\n          />\n          <ChartImageContainer\n            imgName=\"58_Number_of_obs_on_violinplot_seaborn\"\n            caption=\"Show the number of observations per group\"\n            linkTo=\"/58-show-number-of-observation-on-violinplot\"\n          />\n          <ChartImageContainer\n            imgName=\"502-violinplot-and-swarmplot\"\n            caption=\"Add a swarmplot on top of a violin chart to show individual data points\"\n            linkTo=\"/502-violinplot-and-swarmplot\"\n          />\n          <ChartImageContainer\n            imgName=\"54_Grouped_violinplot_Seaborn2\"\n            caption=\"If you have both groups and subgroups, you'll be interested in a grouped violin plot\"\n            linkTo=\"/54-grouped-violinplot\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib />\n          Violin charts with <code>Matplotlib</code>\n        </h2>\n        <p>\n          <Link href=\"/matplotlib\">Matplotlib</Link>, as usual, is another great\n          otion to build violin charts with python. It comes with a{' '}\n          <code>violinplot()</code> function that does all the hard work for us.\n        </p>\n        <p>Here are a couple of examples:</p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"557-anova-visualization-with-matplotlib-2\"\n            caption=\"Violin plot with ANOVA results on top\"\n            linkTo=\"/557-anova-visualization-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"557-anova-visualization-with-matplotlib-3\"\n            caption=\"Customized violin plot with ANOVA results on top\"\n            linkTo=\"/557-anova-visualization-with-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <FunctionExploration functionName={'violin'} />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Best\">\n          <Matplotlib />\n          Best python violin chart examples\n        </h2>\n        <p>\n          The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>). The{' '}\n          <a href=\"https://python-graph-gallery.com\">Python graph gallery</a>{' '}\n          tries to display (or translate from R) some of the best creations and\n          explain how their source code works. If you want to display your work\n          here, please drop me a word or even better, submit a{' '}\n          <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">\n            Pull Request\n          </a>\n          !\n        </p>\n        <Row>\n          <Col xs={12} md={6}>\n            <Link to={'/web-ggbetweenstats-with-matplotlib'}>\n              <ChartImage\n                imgName={'web-ggbetweenstats-with-matplotlib-square'}\n                caption={\n                  'A combination of a violin plot and a boxplot. Allows the comparison of several groups with statistical test results on top.'\n                }\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"distribution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","capitalize","s","charAt","toUpperCase","slice","FunctionExploration","_selectedParameterInf","funDetails","selectedParameter","setSelectedParameter","useState","selectedOpt","setSelectedOpt","selectedParameterInfo","parameters","selectedOptInfo","options","argumentButtons","map","item","i","Button","key","value","size","onClick","style","marginBottom","id","marginLeft","fontSize","href","docUrl","description","display","flexDirection","justifyContent","alignItems","gap","width","Row","type","howToUse","opt","explanation","backgroundColor","CodeChunk","hasWhiteBackground","basicUsage","replace","post","img","SEO","title","seoDescription","keywords","lang","content","property","chartDescription","quickCode","Head","ViolinPlot","Layout","isTocEnabled","TitleAndDescription","chartType","Container","Spacing","Seaborn","Matplotlib","functionName","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}
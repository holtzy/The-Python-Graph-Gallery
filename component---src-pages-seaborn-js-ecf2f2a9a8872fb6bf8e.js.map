{"version":3,"file":"component---src-pages-seaborn-js-ecf2f2a9a8872fb6bf8e.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/ElementChildren.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/ButtonGroup.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/ToggleButtonGroup.js","webpack://the-python-graph-gallery/./src/util/functionDescriptions.js","webpack://the-python-graph-gallery/./src/components/FunctionExploration.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/pages/seaborn.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/ToggleButton.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import * as React from 'react';\n\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid elements\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n */\nfunction map(children, func) {\n  let index = 0;\n  return React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) ? func(child, index++) : child);\n}\n\n/**\n * Iterates through children that are \"valid elements\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n */\nfunction forEach(children, func) {\n  let index = 0;\n  React.Children.forEach(children, child => {\n    if ( /*#__PURE__*/React.isValidElement(child)) func(child, index++);\n  });\n}\n\n/**\n * Finds whether a component's `children` prop includes a React element of the\n * specified type.\n */\nfunction hasChildOfType(children, type) {\n  return React.Children.toArray(children).some(child => /*#__PURE__*/React.isValidElement(child) && child.type === type);\n}\nexport { map, forEach, hasChildOfType };","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  vertical = false,\n  className,\n  role = 'group',\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...rest\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  let baseClass = prefix;\n  if (vertical) baseClass = `${prefix}-vertical`;\n  return /*#__PURE__*/_jsx(Component, {\n    ...rest,\n    ref: ref,\n    role: role,\n    className: classNames(className, baseClass, size && `${prefix}-${size}`)\n  });\n});\nButtonGroup.displayName = 'ButtonGroup';\nexport default ButtonGroup;","import * as React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    children,\n    type = 'radio',\n    name,\n    value,\n    onChange,\n    vertical = false,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    value: 'onChange'\n  });\n  const getValues = () => value == null ? [] : [].concat(value);\n  const handleToggle = (inputVal, event) => {\n    if (!onChange) {\n      return;\n    }\n    const values = getValues();\n    const isActive = values.indexOf(inputVal) !== -1;\n    if (type === 'radio') {\n      if (!isActive) onChange(inputVal, event);\n      return;\n    }\n    if (isActive) {\n      onChange(values.filter(n => n !== inputVal), event);\n    } else {\n      onChange([...values, inputVal], event);\n    }\n  };\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return /*#__PURE__*/_jsx(ButtonGroup, {\n    ...controlledProps,\n    ref: ref,\n    vertical: vertical,\n    children: map(children, child => {\n      const values = getValues();\n      const {\n        value: childVal,\n        onChange: childOnChange\n      } = child.props;\n      const handler = e => handleToggle(childVal, e);\n      return /*#__PURE__*/React.cloneElement(child, {\n        type,\n        name: child.name || name,\n        checked: values.indexOf(childVal) !== -1,\n        onChange: chainFunction(childOnChange, handler)\n      });\n    })\n  });\n});\nexport default Object.assign(ToggleButtonGroup, {\n  Button: ToggleButton\n});","export const functionDescriptions = {\n    kdeplot: {\n        description: '',\n        docUrl: 'https://seaborn.pydata.org/generated/seaborn.kdeplot.html',\n        basicUsage: '',\n        parameters: [\n            { name: \"fill\", description: 'color under the curve', type: 'boolean', relatedChart: '70_deffffed' },\n            { name: \"bw\", description: 'control how density is computed', type: 'boolean', relatedChart: '70_deffffed' },\n            { name: \"color\", description: 'control the color', type: 'boolean', relatedChart: '70_deffffed' }\n        ]\n    },\n    violin: {\n        description: '',\n        docUrl: 'https://seaborn.pydata.org/generated/seaborn.violinplot.html',\n        basicUsage: '',\n        parameters: [\n            { name: \"width\", description: 'color under the curve', type: 'boolean', relatedChart: '70_deffffed' },\n            { name: \"bw\", description: 'control how density is computed', type: 'boolean', relatedChart: '70_deffffed' },\n            { name: \"color\", description: 'controls the color', type: 'string', relatedChart: '70_deffffed' }\n        ]\n    }\n}\n\n\n","import { Link } from \"gatsby\";\nimport React, { useState } from \"react\";\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\nimport { functionDescriptions } from \"../util/functionDescriptions\";\nimport \"./functionExploration.css\";\n\nconst capitalize = (s) => {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport default function FunctionExploration({ functionName }) {\n  // Get the right function\n  const functionInfo = functionDescriptions[functionName];\n\n  // Get the right parameter\n  const [selectedParameter, setSelectedParameter] = useState(\n    functionInfo.parameters[0].name\n  );\n  const [someString, setSomeString] = useState(\"hello\");\n  const selectedParameterInfo = functionInfo.parameters.filter(\n    (param) => param.name === selectedParameter\n  )[0];\n\n  return (\n    <>\n      <h2 id={capitalize(functionName + \"()\" + \" details\")}>\n        &#128270; <code>{functionName}</code> function parameters\n        <a\n          style={{ marginLeft: \"15px\", fontSize: \"14px\" }}\n          href={functionInfo.docUrl}\n        >\n          &rarr; see full doc\n        </a>\n      </h2>\n\n      <ToggleButtonGroup\n        type=\"radio\"\n        size=\"sm\"\n        name=\"functionParameter\"\n        value={selectedParameter}\n        onChange={(value) => setSelectedParameter(value)}\n      >\n        {functionInfo.parameters.map((item, i) => (\n          <ToggleButton\n            key={i}\n            // variant=\"secondary\"\n            className={\"functionButton\"}\n            id={`functionParameter-${item.name}`}\n            value={item.name}\n          >\n            {item.name}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n      <div>\n        <code>string</code>\n        <span>&rarr; {selectedParameterInfo.description}</span>\n      </div>\n      {/* <div style={{ paddingLeft: \"6px\", fontSize: \"14px\" }}><Link to={selectedParameterInfo.relatedChart}>check a chart using it</Link></div> */}\n      <br />\n      <br />\n    </>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta\n        property=\"og:title\"\n        content={title + ' | The Python Graph Gallery'}\n      />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib, Seaborn } from '../components/MiscellaneousLogos';\nimport { Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport ChartImage from '../components/ChartImage';\nimport Spacing from '../components/Spacing';\nimport { Button } from 'react-bootstrap';\nimport { SEO } from '../components/SEO';\nimport FunctionExploration from '../components/FunctionExploration';\n\nconst chartDescription =\n  \"<p><code>Seaborn</code> is a python graphic library built on top of <a href='https://python-graph-gallery.com/matplotlib'>matplotlib</a>. It allows to make your charts prettier with less code. This page provides general seaborn tips. Visit individual chart sections if you need a specific type of plot. Note that most of the <a href='https://python-graph-gallery.com/matplotlib'>matplotlib customization options</a> also work for <code>seaborn</code>.</p > \";\n\nconst quickCode = `# library & dataset\nimport seaborn as sns\ndf = sns.load_dataset('iris')\n\n# use the function regplot to make a scatterplot\nsns.regplot(x=df[\"sepal_length\"], y=df[\"sepal_width\"])\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Introduction to Seaborn for dataviz with Python\"\n    seoDescription=\"A collection of chart examples made with Seaborn, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function SeabornLib() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription title=\"Seaborn\" description={chartDescription} />\n\n      <Container>\n        <h2 id=\"Quick start\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              <code>seaborn</code> offers some specific functions for almost\n              every kind of charts. For instance, <code>regplot()</code> can be\n              used to build a <Link to=\"/scatter-plot\">scatterplot</Link>.\n            </p>\n            <p>\n              Note that no additional code is needed to get the nice grey\n              background with grid and some good defaults for the dots 😍.\n              That's 4 lines of code for a pretty decent chart 🔥!\n            </p>\n            <Link to=\"/scatter-plot\">\n              <Button size=\"sm\">Scatterplot section</Button>\n            </Link>\n          </Col>\n          <Col md={6}>\n            <Link to={'/40-basic-scatterplot-seaborn'}>\n              <ChartImage\n                imgName=\"40_Basic_Scatterplot_seaborn\"\n                caption=\"Basic scatterplot with Python and Seaborn from various data input formats.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n        <br />\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Lexicon\">\n          <Matplotlib />\n          Basic vocabulary\n        </h2>\n        <p>\n          Since <code>seaborn</code> is built on top of <code>matplotlib</code>,\n          most of its concepts and vocabulary are still correct. The figure\n          below describes the anatomy of a <code>matplotlib</code> charts. It\n          names all the main components, names that you need to know to\n          understand the documentation properly.\n        </p>\n        <p>\n          &#9888;&#65039; <u>Disclaimer</u>: this figure comes from the very\n          complete{' '}\n          <a href=\"https://matplotlib.org/faq/usage_faq.html#coding-styles\">\n            matplotlib documentation\n          </a>\n          . Have a look at it for a thorough explanation on how this library\n          works.\n        </p>\n        <div style={{ maxWidth: '600px', margin: '0 auto', padding: 30 }}>\n          <ChartImage\n            imgName={'matplotlib_vocabulary'}\n            caption={\n              'Anatomy of a matplotlib chart: all the basic vocabulary you need to know to understand the documentation properly'\n            }\n          />\n        </div>\n        <a href=\"https://matplotlib.org/faq/usage_faq.html#coding-styles\">\n          <Button size=\"sm\">Matplotlib doc</Button>\n        </a>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Main functions\">\n            🧐 Main <code>seaborn</code> functions\n          </h2>\n          <p>\n            <code>Seaborn</code> is a wrapper of{' '}\n            <a href=\"/matplotlib\">matplotlib</a>, meaning that when you call a\n            function in seaborn, it calls one or multiple matplotlib functions\n            under the hood.\n          </p>\n          <p>\n            Here is an overview of the <b>most common</b> <code>seaborn</code>{' '}\n            functions. It provides a glimpse of they're made for, what are their\n            parameters and links to their official doc.\n          </p>\n          <p>\n            <ul>\n              <li>\n                <code>relplot()</code> - High-level interface for creating\n                scatter and line plots.\n              </li>\n              <li>\n                <code>scatterplot()</code> - For creating scatter plots.\n              </li>\n              <li>\n                <code>lineplot()</code> - For creating line plots.\n              </li>\n              <li>\n                <code>displot()</code> - For creating distribution plots,\n                including histograms and KDE.\n              </li>\n              <li>\n                <code>histplot()</code> - For creating histograms.\n              </li>\n              <li>\n                <code>boxplot()</code> - For creating box plots.\n              </li>\n              <li>\n                <code>violinplot()</code> - For creating violin plots.\n              </li>\n              <li>\n                <code>heatmap()</code> - For creating heatmaps.\n              </li>\n              <li>\n                <code>pairplot()</code> - For creating a grid of scatter plots\n                for pairwise relationships.\n              </li>\n              <li>\n                <code>catplot()</code> - High-level interface for creating\n                various categorical plots.\n              </li>\n            </ul>\n          </p>\n          <br />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Title\">\n          <Seaborn />\n          Customizing titles with Seaborn\n        </h2>\n        <p>\n          Since <code>Seaborn</code> is built on top of <code>Matplotlib</code>,\n          title customization works pretty much the same. A seaborn chart (like\n          the one you get with <code>sns.boxplot()</code>) actually returns a{' '}\n          <code>matplotlib</code> axes instance.\n        </p>\n        <p>\n          This means that you will not be able to use the usual{' '}\n          <code>pyplot</code> method <code>plt.title()</code>, but will have to\n          use the corresponding argument for an <code>axes</code> which is{' '}\n          <code>ax.set_title()</code>. This is described more in depth in this\n          dedicated post:\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"seaborn-title-customization\"\n            caption=\"Add a title on a seaborn chart\"\n            linkTo=\"/seaborn-title-customization\"\n          />\n        </Row>\n        <br />\n        <br />\n        <p>\n          Once you've understood how to add a title, customizing it should work\n          the same as for <code>matplotlib</code>:\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"190_Custom_title6\"\n            caption=\"Python chart with subtitle and custom color\"\n            linkTo=\"/190-custom-matplotlib-title\"\n          />\n          <ChartImageContainer\n            imgName=\"190_Custom_title7\"\n            caption=\"Add a math formula in title with Matplotlib\"\n            linkTo=\"/190-custom-matplotlib-title\"\n          />\n          <ChartImageContainer\n            imgName=\"190_Custom_title5\"\n            caption=\"Control the height of the matplotlib title\"\n            linkTo=\"/190-custom-matplotlib-title\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Axis\">\n          <Seaborn />\n          Customizing axis\n        </h2>\n        <p>\n          The exact same concept than explained for titles above applies for\n          axes. So please read the following blogpost about axis customization\n          with matplotlib and apply it to your seaborn chart.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"191_Custom_axis1\"\n            caption=\"Change the axis title and its appearance\"\n            linkTo=\"/191-custom-axis-on-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"191_Custom_axis2\"\n            caption=\"Control axis labels and ticks look\"\n            linkTo=\"/191-custom-axis-on-matplotlib-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"191_Custom_axis6\"\n            caption=\"Control axis limit with the xlim() function\"\n            linkTo=\"/191-custom-axis-on-matplotlib-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Themes\">🌈 Seaborn built-in themes</h2>\n        <p>\n          Seaborn comes with a few built-in themes. Those themes are available\n          through the <code>set_style()</code> function. Here is an overview of\n          what is offered.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"104_seaborn_themes1-square\"\n            caption=\"Control axis limit with the xlim() function\"\n            linkTo=\"/104-seaborn-themes\"\n          />\n          <ChartImageContainer\n            imgName=\"104_seaborn_themes2-square\"\n            caption=\" \"\n            linkTo=\"/104-seaborn-themes\"\n          />\n          <ChartImageContainer\n            imgName=\"104_seaborn_themes3-square\"\n            caption=\" \"\n            linkTo=\"/104-seaborn-themes\"\n          />\n          <ChartImageContainer\n            imgName=\"104_seaborn_themes4-square\"\n            caption=\" \"\n            linkTo=\"/104-seaborn-themes\"\n          />\n          <ChartImageContainer\n            imgName=\"104_seaborn_themes5-square\"\n            caption=\" \"\n            linkTo=\"/104-seaborn-themes\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Gallery\">⭐ Seaborn graph gallery</h2>\n        <p>\n          If you're interested in a specific type of chart like{' '}\n          <Link to=\"/boxplot\">boxplot</Link> or{' '}\n          <Link to=\"/heatmap\">heatmap</Link>, I suggest to visit the{' '}\n          <Link to=\"/\">dedicated section</Link> of the gallery. In case you're\n          interested in what <code>seaborn</code> can do, here is a glimpse of\n          what's offered in the gallery 🧐.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"82_seaborn_jointplot1\"\n            caption=\"Histogram can be added around a scatterplot to show each variable distributions\"\n            linkTo=\"/82-marginal-plot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"74_density_plot_multi_variables\"\n            caption=\"Density chart with several displayed groups\"\n            linkTo=\"/74-density-plot-of-several-variables\"\n          />\n          <ChartImageContainer\n            imgName=\"43_seaborn_map_color_to_a_avariable3\"\n            caption=\"Color dots according to a group\"\n            linkTo=\"/43-use-categorical-variable-to-color-scatterplot-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"58_Number_of_obs_on_violinplot_seaborn\"\n            caption=\"Show the number of observations per group\"\n            linkTo=\"/58-show-number-of-observation-on-violinplot\"\n          />\n          <ChartImageContainer\n            imgName=\"73_Control_bandwidth_densityplot_Seaborn2\"\n            caption=\"Changed the bandwidth used to compute the density\"\n            linkTo=\"/73-control-bandwidth-of-seaborn-density-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"91_Custom_heat_annotate_cells\"\n            caption=\"Seaborn heatmap customization: show numbers in cell\"\n            linkTo=\"/91-customize-seaborn-heatmap\"\n          />\n          <ChartImageContainer\n            imgName=\"25_Histogram_of_several_variables1\"\n            caption=\"Compare the distribution of several groups on the same chart\"\n            linkTo=\"/25-histogram-with-several-variables-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"80_bivariate_kernel_density_plot2\"\n            caption=\"Basic contourplot with seaborn.\"\n            linkTo=\"/80-contour-plot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"111_Correlogram_custom4\"\n            caption=\"Apply colors to each group and customized the scatterplot\"\n            linkTo=\"/111-custom-correlogram\"\n          />\n          <ChartImageContainer\n            imgName=\"85_2D_density_plot_matplotlib_1\"\n            caption=\"Basic 2d density chart.\"\n            linkTo=\"/85-density-plot-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"25_Histogram_of_several_variables2\"\n            caption=\"Use small multiple to compare the distribution of several groups\"\n            linkTo=\"/25-histogram-with-several-variables-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"82_seaborn_jointplot6\"\n            caption=\"Histogram can be added around a 2d density chart to show x and y variable distributions\"\n            linkTo=\"/82-marginal-plot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"51_Horizontal_violinplot_Seaborn\"\n            caption=\"Make your violin chart horizontal to make labels more readable\"\n            linkTo=\"/51-horizontal-violinplot\"\n          />\n          <ChartImageContainer\n            imgName=\"132_Matplotlib-connected-scatterplot\"\n            caption=\"Basic connected scatterplot with Python and Seaborn.\"\n            linkTo=\"/132-basic-connected-scatterplot\"\n          />\n          <ChartImageContainer\n            imgName=\"92_Control_color_heatmap1\"\n            caption=\"Color customization: how to select other color palettes and more\"\n            linkTo=\"/92-control-color-in-seaborn-heatmaps\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Spacing />\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"evolution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Button from './Button';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst noop = () => undefined;\nconst ToggleButton = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  name,\n  className,\n  checked,\n  type,\n  onChange,\n  value,\n  disabled,\n  id,\n  inputRef,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'btn-check');\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"input\", {\n      className: bsPrefix,\n      name: name,\n      type: type,\n      value: value,\n      ref: inputRef,\n      autoComplete: \"off\",\n      checked: !!checked,\n      disabled: !!disabled,\n      onChange: onChange || noop,\n      id: id\n    }), /*#__PURE__*/_jsx(Button, {\n      ...props,\n      ref: ref,\n      className: classNames(className, disabled && 'disabled'),\n      type: undefined,\n      role: undefined,\n      as: \"label\",\n      htmlFor: id\n    })]\n  });\n});\nToggleButton.displayName = 'ToggleButton';\nexport default ToggleButton;"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","map","children","func","index","child","ButtonGroup","bsPrefix","size","vertical","role","as","Component","rest","ref","prefix","baseClass","displayName","ToggleButtonGroup","props","type","value","onChange","controlledProps","getValues","concat","values","childVal","childOnChange","checked","indexOf","e","inputVal","event","isActive","filter","handleToggle","Object","assign","Button","ToggleButton","functionDescriptions","kdeplot","description","docUrl","basicUsage","parameters","relatedChart","violin","capitalize","s","charAt","toUpperCase","slice","FunctionExploration","functionName","functionInfo","selectedParameter","setSelectedParameter","useState","someString","setSomeString","selectedParameterInfo","param","id","style","marginLeft","fontSize","href","item","i","key","SEO","title","seoDescription","keywords","lang","content","property","chartDescription","quickCode","Head","SeabornLib","Layout","isTocEnabled","TitleAndDescription","Container","Row","CodeChunk","Spacing","Matplotlib","maxWidth","margin","padding","Seaborn","ChartFamilySection","chartFamily","Contact","noop","disabled","inputRef","autoComplete","undefined","htmlFor"],"sourceRoot":""}
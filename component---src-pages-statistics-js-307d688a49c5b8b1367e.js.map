{"version":3,"file":"component---src-pages-statistics-js-307d688a49c5b8b1367e.js","mappings":"4MAOA,MAAMA,EAAU,CACd,iBACA,yBACA,wBAKa,SAASC,EAAUC,GAAwB,IAAvB,QAAEC,EAAO,QAAEC,GAASF,EACrD,GAAIF,EAAQK,SAASF,GACnB,OAAOG,EAAAA,cAAA,SAAG,QAGZ,MAgBMC,GAhBOC,EAAAA,EAAAA,gBAAe,cAgBTC,QAAQC,MAAMC,MAAMC,GAC9BA,EAAEC,KAAKC,KAAKT,SAASF,KAG9B,OAAKI,EAMHD,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKS,UAAU,uBACbT,EAAAA,cAACU,EAAAA,EAAW,CACVT,MAAOA,EAAMM,KAAKI,gBAAgBC,gBAClCC,IAAKf,EACLW,UAAU,kBAEXX,GACCE,EAAAA,cAAA,OAAKS,UAAU,qBACbT,EAAAA,cAAA,OAAKS,UAAU,yBACbT,EAAAA,cAAA,SAAIF,OAfP,IAsBX,C,mGCzDe,SAASgB,EAAmBlB,GAAgC,IAA/B,QAAEC,EAAO,QAAEC,EAAO,OAAEiB,GAAQnB,EACtE,OACEI,EAAAA,cAACgB,EAAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,GACflB,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAIL,GACRf,EAAAA,cAACL,EAAAA,EAAU,CAACE,QAASA,EAASC,QAASA,KAI/C,C,iICNA,MAAMuB,EAAcC,GACD,iBAANA,EAAuB,GAC3BA,EAAEC,OAAO,GAAGC,cAAgBF,EAAEG,MAAM,GAG9B,SAASC,EAAmB9B,GAAkB,IAAjB,WAAE+B,GAAY/B,EACxD,MAAM,EAACgC,EAAkB,EAACC,IAAwBC,EAAAA,EAAAA,UAAS,IACrD,EAACC,EAAY,EAACC,IAAkBF,EAAAA,EAAAA,UAAS,GAE/C,IAAKH,EACH,OAAO,KAGT,MAAMM,EAAwBN,EAAWO,WAAWN,GAE9CO,EACJnC,EAAAA,cAAA,WACG2B,EAAWO,WAAWE,KAAI,CAACC,EAAMC,IAChCtC,EAAAA,cAACuC,EAAAA,EAAM,CACLC,IAAKF,EACLG,MAAOJ,EAAK7B,KACZkC,KAAK,KACLC,QAASA,IAAMd,EAAqBS,GACpC7B,UAAWmB,IAAsBU,EAAI,mBAAqB,IAEzDD,EAAK7B,SAMd,OACER,EAAAA,cAAA,OAAK4C,MAAO,CAAEC,aAAc,KAC1B7C,EAAAA,cAAA,MAAI8C,GAAIzB,EAAWM,EAAWnB,KAAXmB,eAAsC,MAC7C3B,EAAAA,cAAA,YAAO2B,EAAWnB,MAAY,uBACxCR,EAAAA,cAAA,KACE4C,MAAO,CAAEG,WAAY,OAAQC,SAAU,QACvCC,KAAMtB,EAAWuB,QAClB,mBAKHlD,EAAAA,cAAA,UAAI,iBACJA,EAAAA,cAAA,SAAI2B,EAAWwB,aAEfnD,EAAAA,cAAA,OACE4C,MAAO,CACLQ,QAAS,OACTC,cAAe,MACfC,eAAgB,QAChBC,WAAY,WACZC,IAAK,KAGPxD,EAAAA,cAAA,MAAI4C,MAAO,CAAEa,MAAO,SAAU,eAC7BtB,GAGHnC,EAAAA,cAAC0D,EAAAA,EAAG,KACF1D,EAAAA,cAACgB,EAAAA,EAAG,CAACE,GAAI,GACPlB,EAAAA,cAAA,OAAK4C,MAAO,CAAEI,SAAU,KACtBhD,EAAAA,cAAA,KAAGS,UAAU,wBAAuB,eACpCT,EAAAA,cAAA,KAAGS,UAAU,eAAewB,EAAsBkB,aAElDnD,EAAAA,cAAA,KAAGS,UAAU,wBAAuB,qBACV,KACxBT,EAAAA,cAAA,QAAMS,UAAU,qBACbwB,EAAsB0B,OAG3B3D,EAAAA,cAAA,KAAGS,UAAU,eAAewB,EAAsB2B,UACjD3B,EAAsB4B,SACrB7D,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OACE4C,MAAO,CAAEQ,QAAS,OAAQI,IAAK,EAAGD,WAAY,aAE7CtB,EAAsB4B,QAAQzB,KAAI,CAAC0B,EAAKxB,IAErCtC,EAAAA,cAACuC,EAAAA,EAAM,CACLG,KAAK,KACLjC,UAAW6B,IAAMP,EAAc,mBAAqB,GACpDY,QAASA,IAAMX,EAAeM,IAE7BwB,EAAItD,SAKbR,EAAAA,cAAA,SAAIiC,EAAsB4B,QAAQ9B,GAAagC,cAInD/D,EAAAA,cAAA,KAAGS,UAAU,wBAAuB,gBACpCT,EAAAA,cAAA,OAAK4C,MAAO,CAAEoB,gBAAiB,UAC7BhE,EAAAA,cAACiE,EAAAA,EAAS,CAACC,oBAAkB,GAC1BjC,EAAsB4B,QACnB5B,EAAsBkC,WAAWC,QAC/B,gBACAnC,EAAsB4B,QAAQ9B,GAAavB,MAE7CyB,EAAsBkC,eAMlCnE,EAAAA,cAACgB,EAAAA,EAAG,CAACE,GAAI,GACPlB,EAAAA,cAAA,WACAA,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAI,IAAMa,EAAsBoC,MACpCrE,EAAAA,cAACL,EAAAA,EAAU,CACTE,QAASoC,EAAsBqC,IAC/BxE,QAAS,kBAAoB6B,EAAWnB,KAAO,kBAO7D,C,6MC/GA,MAAM+D,EACJvE,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,SAAG,uFAEWA,EAAAA,cAAA,SAAG,wBAAyB,2IAI1CA,EAAAA,cAAA,SAAG,oHAE4CA,EAAAA,cAAA,SAAG,OAAO,KAAG,IAC1DA,EAAAA,cAAA,SAAG,mBAAoB,8BAEzBA,EAAAA,cAAA,SAAG,0DACuD,IACxDA,EAAAA,cAAA,SAAG,qBAAqB,oDAcf,SAASwE,IACtB,OACExE,EAAAA,cAACyE,EAAAA,EAAM,CACLC,MAAM,qCACNC,cAAY,EACZC,eAAe,oFAEf5E,EAAAA,cAAC6E,EAAAA,EAAmB,CAClBH,MAAM,qCACNvB,YAAaoB,EACbO,UAAW,eAGb9E,EAAAA,cAAC+E,EAAAA,EAAS,KACR/E,EAAAA,cAAA,MAAI8C,GAAG,OAAM,sCACb9C,EAAAA,cAAA,SAAG,iCAC6BA,EAAAA,cAAA,SAAG,OAAO,8EACc,IACtDA,EAAAA,cAAA,SAAG,6BAA6B,wQAMlCA,EAAAA,cAAA,SAAG,+DAC4D,IAC7DA,EAAAA,cAAA,YAAM,gBAAmB,aAE3BA,EAAAA,cAAA,SAAG,uDACoD,IACrDA,EAAAA,cAAA,YAAM,gBAAmB,kDACnBA,EAAAA,cAACmB,EAAAA,KAAI,CAAC8B,KAAK,eAAc,cAAiB,KAElDjD,EAAAA,cAAC0D,EAAAA,EAAG,KACF1D,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,+BACRC,QAAQ,8EACRiB,OAAO,gCAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,+BACRC,QAAQ,6EACRiB,OAAO,gCAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,+BACRC,QAAQ,yDACRiB,OAAO,kCAKbf,EAAAA,cAACgF,EAAAA,EAAO,MAERhF,EAAAA,cAAC+E,EAAAA,EAAS,KACR/E,EAAAA,cAAA,MAAI8C,GAAG,SAAQ,+BACf9C,EAAAA,cAAA,SAAG,yBACqBA,EAAAA,cAAA,SAAG,SAAS,mHAEzBA,EAAAA,cAAA,SAAG,6BAA6B,KAE3CA,EAAAA,cAAA,SAAG,8DAC2D,IAC5DA,EAAAA,cAAA,SAAG,sBAAsB,8HAI3BA,EAAAA,cAAA,SAAG,6CAC0C,IAC3CA,EAAAA,cAACmB,EAAAA,KAAI,CAAC8B,KAAK,YAAW,WAAc,QAAM,IAC1CjD,EAAAA,cAACmB,EAAAA,KAAI,CAAC8B,KAAK,gBAAe,eAAmB,mKAK/CjD,EAAAA,cAAC0D,EAAAA,EAAG,KACF1D,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,4CACRC,QAAQ,qCACRiB,OAAO,6CAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,4CACRC,QAAQ,wCACRiB,OAAO,6CAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,4CACRC,QAAQ,mDACRiB,OAAO,6CAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,4CACRC,QAAQ,8HACRiB,OAAO,0CAKbf,EAAAA,cAACgF,EAAAA,EAAO,MAERhF,EAAAA,cAAC+E,EAAAA,EAAS,KACR/E,EAAAA,cAAA,MAAI8C,GAAG,sBAAqB,sBAC5B9C,EAAAA,cAAA,SACEA,EAAAA,cAAA,SAAG,kCAAkC,sDAGvCA,EAAAA,cAAA,SAAG,+EAEKA,EAAAA,cAAA,SAAG,kBAAmB,uEAG9BA,EAAAA,cAAA,SAAG,mDACgD,IACjDA,EAAAA,cAACmB,EAAAA,KAAI,CAAC8B,KAAK,eAAc,cAAiB,2BAG5CjD,EAAAA,cAAC0D,EAAAA,EAAG,KACF1D,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,qCACRC,QAAQ,0CACRiB,OAAO,sCAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,qCACRC,QAAQ,wCACRiB,OAAO,wCAKbf,EAAAA,cAACgF,EAAAA,EAAO,MAERhF,EAAAA,cAAC+E,EAAAA,EAAS,KACR/E,EAAAA,cAAA,MAAI8C,GAAG,OAAM,qBACb9C,EAAAA,cAAA,SACEA,EAAAA,cAAA,SAAG,qBAAqB,qLAI1BA,EAAAA,cAAA,SAAG,QACIA,EAAAA,cAAA,YAAM,gBAAmB,0EACCA,EAAAA,cAAA,YAAM,cAAiB,KAExDA,EAAAA,cAAA,SAAG,qEACkE,IACnEA,EAAAA,cAAA,YAAM,gBAAmB,kDACnBA,EAAAA,cAACmB,EAAAA,KAAI,CAAC8B,KAAK,eAAc,cAAiB,KAElDjD,EAAAA,cAAC0D,EAAAA,EAAG,KACF1D,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,oCACRC,QAAQ,4DACRiB,OAAO,qCAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,oCACRC,QAAQ,uEACRiB,OAAO,uCAKbf,EAAAA,cAACgF,EAAAA,EAAO,MAERhF,EAAAA,cAAA,OAAKS,UAAU,cAAcqC,GAAG,WAC9B9C,EAAAA,cAAC+E,EAAAA,EAAS,KACR/E,EAAAA,cAACiF,EAAAA,EAAkB,CAACC,YAAY,cAIpClF,EAAAA,cAACgF,EAAAA,EAAO,MAERhF,EAAAA,cAAC+E,EAAAA,EAAS,KACR/E,EAAAA,cAACmF,EAAAA,EAAO,OAGVnF,EAAAA,cAACgF,EAAAA,EAAO,MAGd,C","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/FunctionExploration.js","webpack://the-python-graph-gallery/./src/pages/statistics.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import { Link } from 'gatsby';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ChartImage from './ChartImage';\n\nimport './functionExploration.css';\nimport CodeChunk from './CodeChunk';\n\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport default function FunctionExploration({ funDetails }) {\n  const [selectedParameter, setSelectedParameter] = useState(0);\n  const [selectedOpt, setSelectedOpt] = useState(0);\n\n  if (!funDetails) {\n    return null;\n  }\n\n  const selectedParameterInfo = funDetails.parameters[selectedParameter];\n\n  const argumentButtons = (\n    <div>\n      {funDetails.parameters.map((item, i) => (\n        <Button\n          key={i}\n          value={item.name}\n          size=\"sm\"\n          onClick={() => setSelectedParameter(i)}\n          className={selectedParameter === i ? 'isButtonSelected' : ''}\n        >\n          {item.name}\n        </Button>\n      ))}\n    </div>\n  );\n\n  return (\n    <div style={{ marginBottom: 70 }}>\n      <h2 id={capitalize(funDetails.name + '()' + ' details')}>\n        &#128270; <code>{funDetails.name}</code> function parameters\n        <a\n          style={{ marginLeft: '15px', fontSize: '14px' }}\n          href={funDetails.docUrl}\n        >\n          &rarr; see full doc\n        </a>\n      </h2>\n\n      <h3>&rarr; Description</h3>\n      <p>{funDetails.description}</p>\n\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'start',\n          alignItems: 'baseline',\n          gap: 14,\n        }}\n      >\n        <h3 style={{ width: 'auto' }}>&rarr; Arguments</h3>\n        {argumentButtons}\n      </div>\n\n      <Row>\n        <Col md={8}>\n          <div style={{ fontSize: 16 }}>\n            <p className=\"argumentSectionTitle\">Description</p>\n            <p className=\"little-text\">{selectedParameterInfo.description}</p>\n\n            <p className=\"argumentSectionTitle\">\n              Possible values &rarr; {'  '}\n              <span className=\"parameterTypePill\">\n                {selectedParameterInfo.type}\n              </span>\n            </p>\n            <p className=\"little-text\">{selectedParameterInfo.howToUse}</p>\n            {selectedParameterInfo.options && (\n              <>\n                <div\n                  style={{ display: 'flex', gap: 2, alignItems: 'baseline' }}\n                >\n                  {selectedParameterInfo.options.map((opt, i) => {\n                    return (\n                      <Button\n                        size=\"sm\"\n                        className={i === selectedOpt ? 'isButtonSelected' : ''}\n                        onClick={() => setSelectedOpt(i)}\n                      >\n                        {opt.name}\n                      </Button>\n                    );\n                  })}\n                </div>\n                <p>{selectedParameterInfo.options[selectedOpt].explanation}</p>\n              </>\n            )}\n\n            <p className=\"argumentSectionTitle\">Code Example</p>\n            <div style={{ backgroundColor: 'white' }}>\n              <CodeChunk hasWhiteBackground>\n                {selectedParameterInfo.options\n                  ? selectedParameterInfo.basicUsage.replace(\n                      'paramgoeshere',\n                      selectedParameterInfo.options[selectedOpt].name\n                    )\n                  : selectedParameterInfo.basicUsage}\n              </CodeChunk>\n            </div>\n          </div>\n        </Col>\n\n        <Col md={4}>\n          <br />\n          <Link to={'/' + selectedParameterInfo.post}>\n            <ChartImage\n              imgName={selectedParameterInfo.img}\n              caption={'More about the ' + funDetails.name + ' function.'}\n            />\n          </Link>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib } from '../components/MiscellaneousLogos';\nimport { Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport ChartImage from '../components/ChartImage';\nimport FunctionExploration from '../components/FunctionExploration';\nimport Spacing from '../components/Spacing';\n\nconst chartDescription = (\n  <>\n    <p>\n      Python is not only great at data visualization, but it is also powerful\n      for running <b>statistical analysis</b>, providing a comprehensive toolkit\n      for both beginners and seasoned statisticians to extract meaningful\n      insights from complex datasets.\n    </p>\n    <p>\n      This section shows how to visualize the results of your statistical\n      analysis, like Principal Component Analysis (<b>PCA</b>),{' '}\n      <b>linear modeling</b>, ANOVA, t-tests and more.\n    </p>\n    <p>\n      It does not focus on how to run the test, but on how to{' '}\n      <b>make clean output</b>\n      to present your findings in a appealing manner.\n    </p>\n  </>\n);\n\nconst quickCode = `# library & dataset\nimport seaborn as sns\ndf = sns.load_dataset('iris')\n\n# plot\nsns.violinplot(x=df[\"species\"], y=df[\"sepal_length\"])\n`;\n\nexport default function ViolinPlot() {\n  return (\n    <Layout\n      title=\"Visualizing statistics with Python\"\n      isTocEnabled\n      seoDescription=\"How to run statistical analysis in Python and visualize the results efficiently.\"\n    >\n      <TitleAndDescription\n        title=\"Visualizing statistics with Python\"\n        description={chartDescription}\n        chartType={'statistics'}\n      />\n\n      <Container>\n        <h2 id=\"PCA\">Principal Component Analysis (PCA)</h2>\n        <p>\n          Principal Component Analysis (<b>PCA</b>) is a transformative\n          technique widely used in the realm of data science to{' '}\n          <b>reduce the dimensionality</b> of large datasets while preserving as\n          much variance as possible. By transforming the original variables into\n          a new set of orthogonal components, PCA offers a concise yet\n          informative perspective, making it easier to visualize and analyze\n          high-dimensional data.\n        </p>\n        <p>\n          Python is a powerful tool when it comes to PCA thanks to its{' '}\n          <code>scikit-learn</code> library.\n        </p>\n        <p>\n          The following post teaches how to perform a PCA with{' '}\n          <code>scikit-learn</code> and focus on how to build clean outputs\n          using <Link href=\"/matplotlib\">matplotlib</Link>.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"515-intro-pca-graph-python-1\"\n            caption=\"The scree plot allows to check for the variance explained by each variable.\"\n            linkTo=\"/515-intro-pca-graph-python\"\n          />\n          <ChartImageContainer\n            imgName=\"515-intro-pca-graph-python-2\"\n            caption=\"Check the correlation circle plot to see the correlation between variables\"\n            linkTo=\"/515-intro-pca-graph-python\"\n          />\n          <ChartImageContainer\n            imgName=\"515-intro-pca-graph-python-3\"\n            caption=\"Use a scatterplot to check how samples are clusterized\"\n            linkTo=\"/515-intro-pca-graph-python\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"ANOVA\">Analysis of Variance(ANOVA)</h2>\n        <p>\n          Analysis of Variance (<b>ANOVA</b>) is a statistical method used to\n          test the differences between two or more group means to determine if\n          they are <b>statistically significant</b>.\n        </p>\n        <p>\n          It helps to identify whether the independent variable has a{' '}\n          <b>significant impact</b> on the dependent variable across different\n          groups, thereby allowing for the comparison of multiple groups\n          simultaneously.\n        </p>\n        <p>\n          Anova results are usually represented as a{' '}\n          <Link href=\"/boxplot\">boxplot</Link> or a{' '}\n          <Link href=\"/violin-plot\">violin plot</Link>, with each box\n          representing a specific group. The following examples show how to\n          create such boxplots, adding the ANOVA results, and offering some\n          variations.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"557-anova-visualization-with-matplotlib-1\"\n            caption=\"Box plot with ANOVA results on top\"\n            linkTo=\"/557-anova-visualization-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"557-anova-visualization-with-matplotlib-2\"\n            caption=\"Violin plot with ANOVA results on top\"\n            linkTo=\"/557-anova-visualization-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"557-anova-visualization-with-matplotlib-3\"\n            caption=\"Customized violin plot with ANOVA results on top\"\n            linkTo=\"/557-anova-visualization-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"web-ggbetweenstats-with-matplotlib-square\"\n            caption=\"A combination of a violin plot and a boxplot. Allows the comparison of several groups with statistical test results on top.\"\n            linkTo=\"/web-ggbetweenstats-with-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Hypothesis testing\">Hypothesis testing</h2>\n        <p>\n          <b>Statistical hypothesis testing</b> is a key technique in the realm\n          of data analysis.\n        </p>\n        <p>\n          The posts below explain how to display the results of your hypothesis\n          tests <b>on your graphs</b>, so as to represent your results in the\n          most elegant way possible.\n        </p>\n        <p>\n          We'll use the scipy library to run the tests and{' '}\n          <Link href=\"/matplotlib\">matplotlib</Link>\n          to display the results.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"551-student-t-test-visualization-1\"\n            caption=\"Histograms with p-value and t statistic\"\n            linkTo=\"/551-student-t-test-visualization\"\n          />\n          <ChartImageContainer\n            imgName=\"551-student-t-test-visualization-2\"\n            caption=\"Boxplots with p-value and t statistic\"\n            linkTo=\"/551-student-t-test-visualization\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"PCA\">Linear Regression</h2>\n        <p>\n          <b>Linear regression</b> is a statistical technique that aims to model\n          the relationship between a dependent variable and one or more\n          independent variables by fitting a linear equation to observed data.\n        </p>\n        <p>\n          With <code>scikit-learn</code> you can easily run a linear regression\n          and visualize the results with <code>matplotlib</code>.\n        </p>\n        <p>\n          The following post teaches how to perform a linear regression with{' '}\n          <code>scikit-learn</code> and focus on how to build clean outputs\n          using <Link href=\"/matplotlib\">matplotlib</Link>.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"556-visualize-linear-regression-1\"\n            caption=\"Linear regression with statistics on top of a scatterplot\"\n            linkTo=\"/556-visualize-linear-regression\"\n          />\n          <ChartImageContainer\n            imgName=\"556-visualize-linear-regression-2\"\n            caption=\"Customized linear regression with statistics on top of a scatterplot\"\n            linkTo=\"/556-visualize-linear-regression\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"general\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","capitalize","s","charAt","toUpperCase","slice","FunctionExploration","funDetails","selectedParameter","setSelectedParameter","useState","selectedOpt","setSelectedOpt","selectedParameterInfo","parameters","argumentButtons","map","item","i","Button","key","value","size","onClick","style","marginBottom","id","marginLeft","fontSize","href","docUrl","description","display","flexDirection","justifyContent","alignItems","gap","width","Row","type","howToUse","options","opt","explanation","backgroundColor","CodeChunk","hasWhiteBackground","basicUsage","replace","post","img","chartDescription","ViolinPlot","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","chartType","Container","Spacing","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-timeseries-js-469eeba74c845ada8791.js","mappings":"4MAOA,MAAMA,EAAU,CACd,iBACA,yBACA,wBAKa,SAASC,EAAUC,GAAwB,IAAvB,QAAEC,EAAO,QAAEC,GAASF,EACrD,GAAIF,EAAQK,SAASF,GACnB,OAAOG,EAAAA,cAAA,SAAG,QAGZ,MAgBMC,GAhBOC,EAAAA,EAAAA,gBAAe,cAgBTC,QAAQC,MAAMC,MAAMC,GAC9BA,EAAEC,KAAKC,KAAKT,SAASF,KAG9B,OAAKI,EAMHD,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKS,UAAU,uBACbT,EAAAA,cAACU,EAAAA,EAAW,CACVT,MAAOA,EAAMM,KAAKI,gBAAgBC,gBAClCC,IAAKf,EACLW,UAAU,kBAEXX,GACCE,EAAAA,cAAA,OAAKS,UAAU,qBACbT,EAAAA,cAAA,OAAKS,UAAU,yBACbT,EAAAA,cAAA,SAAIF,OAfP,IAsBX,C,mGCzDe,SAASgB,EAAmBlB,GAAgC,IAA/B,QAAEC,EAAO,QAAEC,EAAO,OAAEiB,GAAQnB,EACtE,OACEI,EAAAA,cAACgB,EAAAA,EAAG,CAACC,GAAI,GAAIC,GAAI,GACflB,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAIL,GACRf,EAAAA,cAACL,EAAAA,EAAU,CAACE,QAASA,EAASC,QAASA,KAI/C,C,oECJO,MAAMuB,EAAMzB,IAAiD,IAAhD,MAAE0B,EAAK,eAAEC,EAAc,SAAEC,EAAQ,MAAEvB,GAAOL,EAC5D,OACEI,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQsB,GACRtB,EAAAA,cAAA,QAAMyB,KAAK,OACXzB,EAAAA,cAAA,QACEQ,KAAK,cACLkB,QAASH,GAAkB,qCAE7BvB,EAAAA,cAAA,QAAMQ,KAAK,SAASkB,QAAQ,cAC5B1B,EAAAA,cAAA,QACEQ,KAAK,WACLkB,QAASF,GAAY,6CAGvBxB,EAAAA,cAAA,QAAM2B,SAAS,eAAeD,QAAQ,6BACtC1B,EAAAA,cAAA,QAAM2B,SAAS,WAAWD,QAASJ,IACnCtB,EAAAA,cAAA,QACE2B,SAAS,WACTD,QACEzB,GACA,oGAGJD,EAAAA,cAAA,QAAM2B,SAAS,iBAAiBD,QAASH,IACzCvB,EAAAA,cAAA,QAAMQ,KAAK,eAAekB,QAAQ,wBAClC1B,EAAAA,cAAA,QAAMQ,KAAK,eAAekB,QAAQ,qBACjC,C,sPCrBP,MAAME,EACJ,ygBAEIC,EAAY,4LAWLC,EAAOA,IAClB9B,EAAAA,cAACqB,EAAAA,EAAG,CACFC,MAAM,aACNC,eAAe,wGAIJ,SAASQ,IACtB,OACE/B,EAAAA,cAACgC,EAAAA,EAAM,CAACC,cAAY,GAClBjC,EAAAA,cAACkC,EAAAA,EAAmB,CAClBZ,MAAM,aACNa,YAAaP,EACbQ,UAAU,eAGZpC,EAAAA,cAACqC,EAAAA,EAAS,KACRrC,EAAAA,cAAA,MAAIsC,GAAG,SAAQ,iBACftC,EAAAA,cAACuC,EAAAA,EAAG,CAAC9B,UAAU,sBACbT,EAAAA,cAACgB,EAAAA,EAAG,CAACE,GAAI,GACPlB,EAAAA,cAAA,SAAG,mCAC+BA,EAAAA,cAAA,YAAM,cAAiB,4CACzBA,EAAAA,cAAA,YAAM,UAAa,cAEnDA,EAAAA,cAAA,SAAG,kJAKHA,EAAAA,cAAA,SAAG,oEAILA,EAAAA,cAACgB,EAAAA,EAAG,CAACE,GAAI,GACPlB,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAI,mCACRpB,EAAAA,cAACL,EAAAA,EAAU,CACTE,QAAQ,sBACRC,QAAQ,qEAKhBE,EAAAA,cAACwC,EAAAA,EAAS,KAAEX,IAGd7B,EAAAA,cAACyC,EAAAA,EAAO,MAERzC,EAAAA,cAACqC,EAAAA,EAAS,KACRrC,EAAAA,cAAA,MAAIsC,GAAG,QAAO,8BACdtC,EAAAA,cAAA,SACEA,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAG,cAAa,eAAkB,0MAK1CpB,EAAAA,cAACuC,EAAAA,EAAG,KACFvC,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,uBACRC,QAAQ,oEACRiB,OAAO,0BAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,8BACRC,QAAQ,gEACRiB,OAAO,mCAKbf,EAAAA,cAACyC,EAAAA,EAAO,MAERzC,EAAAA,cAACqC,EAAAA,EAAS,KACRrC,EAAAA,cAAA,MAAIsC,GAAG,QAAO,8BACdtC,EAAAA,cAAA,SACEA,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAG,eAAc,eAAkB,yKAEyB,IAClEpB,EAAAA,cAAA,KAAG0C,KAAK,qDAAoD,kBAExD,iDAGN1C,EAAAA,cAACuC,EAAAA,EAAG,KACFvC,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,yBACRC,QAAQ,kCACRiB,OAAO,8BAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,uBACRC,QAAQ,sFACRiB,OAAO,uCAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,qBACRC,QAAQ,kCACRiB,OAAO,wBAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,8BACRC,QAAQ,4CACRiB,OAAO,wCAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,oCACRC,QAAQ,yFACRiB,OAAO,uCAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,0CACRC,QAAQ,kFACRiB,OAAO,8CAKbf,EAAAA,cAACyC,EAAAA,EAAO,MAERzC,EAAAA,cAACqC,EAAAA,EAAS,KACRrC,EAAAA,cAAA,MAAIsC,GAAG,cAAa,0BACpBtC,EAAAA,cAAA,SAAG,iFAEaA,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAG,eAAc,cAAiB,6IAIxDpB,EAAAA,cAAA,OAAK2C,MAAO,CAAEC,SAAU,QAASC,OAAQ,SAAUC,QAAS,KAC1D9C,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAG,sCACPpB,EAAAA,cAACL,EAAAA,EAAU,CACTE,QAAS,oCACTC,QAAS,8DAMjBE,EAAAA,cAACyC,EAAAA,EAAO,MAERzC,EAAAA,cAACqC,EAAAA,EAAS,KACRrC,EAAAA,cAAA,MAAIsC,GAAG,YAAW,oBAClBtC,EAAAA,cAAA,SAAG,+JAGmBA,EAAAA,cAAA,YAAM,WAAc,aAE1CA,EAAAA,cAACuC,EAAAA,EAAG,KACFvC,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,mBACRC,QAAQ,8BACRiB,OAAO,oCAKbf,EAAAA,cAACyC,EAAAA,EAAO,MAERzC,EAAAA,cAACqC,EAAAA,EAAS,KACRrC,EAAAA,cAAA,MAAIsC,GAAG,QAAO,gBACdtC,EAAAA,cAAA,SAAG,KACCA,EAAAA,cAAA,YAAM,qBAAwB,yHAEvBA,EAAAA,cAAA,SAAG,qCAAqC,yBAEnDA,EAAAA,cAAA,SAAG,0BACuB,IACxBA,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAG,eAAc,8BAAiC,kDAG1DpB,EAAAA,cAACuC,EAAAA,EAAG,KACFvC,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,oCACRC,QAAQ,iEACRiB,OAAO,uCAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,uCACRC,QAAQ,mEACRiB,OAAO,4CAKbf,EAAAA,cAACyC,EAAAA,EAAO,MAERzC,EAAAA,cAACqC,EAAAA,EAAS,KACRrC,EAAAA,cAAA,MAAIsC,GAAG,QACLtC,EAAAA,cAAC+C,EAAAA,GAAU,MAAG,mCAGhB/C,EAAAA,cAAA,SAAG,kGAEyBA,EAAAA,cAACmB,EAAAA,KAAI,CAACuB,KAAK,eAAc,cAAkB,IAAI,KAEzE1C,EAAAA,cAACmB,EAAAA,KAAI,CAACuB,KAAK,WAAU,UAAa,2CAGpC1C,EAAAA,cAAA,SAAG,MACG,IACJA,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAG,2CAA0C,iBAE3C,IAAI,kGAEgB,IAC5BpB,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAG,6CAA4C,UAAc,IAAI,wFAEnD,IACpBpB,EAAAA,cAACmB,EAAAA,KAAI,CAACC,GAAG,0CAAyC,YAAgB,IAAI,oHAIxEpB,EAAAA,cAACuC,EAAAA,EAAG,KACFvC,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,yCACRC,QAAQ,oGACRiB,OAAO,4CAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,kDACRC,QAAQ,8FACRiB,OAAO,8CAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,gDACRC,QAAQ,mGACRiB,OAAO,4CAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,qDACRC,QAAQ,mGACRiB,OAAO,gDAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,yCACRC,QAAQ,kHACRiB,OAAO,2CAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAQ,4BACRC,QAAQ,8EACRiB,OAAO,wBAETf,EAAAA,cAACc,EAAAA,EAAmB,CAClBjB,QAAS,4CACTC,QAAS,uCACTiB,OAAO,0CAKbf,EAAAA,cAACyC,EAAAA,EAAO,MAERzC,EAAAA,cAAA,OAAKS,UAAU,cAAc6B,GAAG,WAC9BtC,EAAAA,cAACqC,EAAAA,EAAS,KACRrC,EAAAA,cAACgD,EAAAA,EAAkB,CAACC,YAAY,gBAIpCjD,EAAAA,cAACyC,EAAAA,EAAO,MAERzC,EAAAA,cAACqC,EAAAA,EAAS,KACRrC,EAAAA,cAACkD,EAAAA,EAAO,OAGVlD,EAAAA,cAACyC,EAAAA,EAAO,MAGd,C","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/pages/timeseries.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta property=\"og:title\" content={title} />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib } from '../components/MiscellaneousLogos';\nimport ChartImage from '../components/ChartImage';\nimport { Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\n\nconst chartDescription =\n  \"<p>Timeseries charts refer to all charts representing the evolution of a numeric value. <a href='https://python-graph-gallery.com/line-chart/'>Line chart</a>, <a href='https://python-graph-gallery.com/streamchart/'>streamgraph</a>, <a href='https://python-graph-gallery.com/barplot/'>barplot</a>, <a href='https://python-graph-gallery.com/area-plot/'>area chart</a>: they all can be used for timeseries visualization. This section displays many timeseries examples made with Python, Matplotlib and other libraries.</p>\";\n\nconst quickCode = `# libraries\n  import matplotlib.pyplot as plt\n  import numpy as np\n\n  # create data\n  values=np.cumsum(np.random.randn(1000,1))\n\n  # use the plot function\n  plt.plot(values)\n  `;\n\nexport const Head = () => (\n  <SEO\n    title=\"Timeseries\"\n    seoDescription=\"A collection of timeseries examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function Pie() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Timeseries\"\n        description={chartDescription}\n        chartType=\"timeseries\"\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              Making a simple line chart with <code>matplotlib</code> is pretty\n              straightforward thanks to the <code>plot()</code> function.\n            </p>\n            <p>\n              If you provide only a series of values, it will consider that\n              these values are ordered and will use values from 1 to n to create\n              the X axis.🔥\n            </p>\n            <p>\n              For more control on the chart, see the dedicated section below.\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/120-line-chart-with-matplotlib'}>\n              <ChartImage\n                imgName=\"120_Basic_lineplot2\"\n                caption=\"The most basic histogram one can make with python and seaborn\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Area\">Area charts for timeseries</h2>\n        <p>\n          <Link to=\"/area-plot\">Area charts</Link> are very often used for\n          timeseries visualization. They are particularly adapted when there is\n          only 1 series to display. When several groups must be displayed, they\n          can still be used using faceting.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"240_basic_area_chart\"\n            caption=\"The most basic area chart one can make with python and matplotlib\"\n            linkTo=\"/240-basic-area-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"242_area_chart_and_faceting\"\n            caption=\"Area chart for timeseries with facting to display many groups\"\n            linkTo=\"/242-area-chart-and-faceting\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Line\">Line charts for timeseries</h2>\n        <p>\n          <Link to=\"/line-chart\">Line charts</Link> are probably the most common\n          type of viz for timeseries. They are particularly adapted when several\n          groups must be displayed to compare their evolution. But mind the{' '}\n          <a href=\"https://www.data-to-viz.com/caveat/spaghetti.html\">\n            spaghetti plot\n          </a>\n          : too many groups make the figure unreadable.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"122_Multiple_line_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/122-multiple-lines-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"123_Highlight_a_line\"\n            caption=\"How to customize the matplotlib line plot appearance: width, stroke, color, style..\"\n            linkTo=\"/123-highlight-a-line-in-line-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"124_Spaghetti_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/124-spaghetti-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"125_Lineplot_small_multiple\"\n            caption=\"Line chart and small multiple (variation)\"\n            linkTo=\"/125-small-multiples-for-line-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"basic-time-series-with-matplotlib\"\n            caption=\"How to deal with the date format. How to represent those dates properly on the X axis.\"\n            linkTo=\"/basic-time-series-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"line-chart-dual-y-axis-with-matplotlib1\"\n            caption=\"How to build a dual Y axis line chart to display 2 series with different units.\"\n            linkTo=\"/line-chart-dual-y-axis-with-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Timeseries\">Heatmap for timeseries</h2>\n        <p>\n          A heatmap can be used to display some temporal data. Here is an\n          example using <Link to=\"/matplotlib\">matplotlib</Link> where the\n          evolution of a temperature is displayed over the hour of the day (Y\n          axis) and the day of the year (X axis) organized by month.\n        </p>\n        <div style={{ maxWidth: '800px', margin: '0 auto', padding: 30 }}>\n          <Link to=\"/heatmap-for-timeseries-matplotlib\">\n            <ChartImage\n              imgName={'heatmap-for-timeseries-matplotlib'}\n              caption={'A heatmap for temporal data with Python and Matplotlib'}\n            />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Calendar\">Calendar Heatmap</h2>\n        <p>\n          A calendar heatmap is a great way to use heatmap to represent the\n          evolution of a variable measured daily. It's quite straightforward to\n          build thanks to the <code>dayplot</code> library.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"calendar-heatmap\"\n            caption=\"Most basic calendar heatmap\"\n            linkTo=\"/404-dendrogram-with-heat-map\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Line\">Candlesticks</h2>\n        <p>\n          A <code>candlestick chart</code> is a style of financial chart used to\n          describe price movements. Each \"candlestick\" typically shows one day,\n          with the <b>Open, High, Low, and Close (OHLC)</b> values for each day.\n        </p>\n        <p>\n          Here are examples using{' '}\n          <Link to=\"/matplotlib\">mplfinance from matplotlib</Link> to display\n          the evolution of different prices.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"548-intro-candle-stick-matplotlib\"\n            caption=\"How to make a candlestick chart with Matplotlib and mplfinance\"\n            linkTo=\"/548-intro-candle-stick-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"549-candle-stick-with-moving-average\"\n            caption=\"How to add one or several moving averages to a candlestick chart\"\n            linkTo=\"/549-candle-stick-with-moving-average\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Best\">\n          <Matplotlib />\n          Best python timeseries examples\n        </h2>\n        <p>\n          A set of publication ready charts for timeseries. They are made with\n          Python and libraries like <Link href=\"/matplotlib\">Matplotlib</Link>{' '}\n          or\n          <Link href=\"/plotly\">Plotly</Link> and use a high level of\n          customization.\n        </p>\n        <p>\n          The{' '}\n          <Link to=\"/web-line-chart-with-labels-at-line-end\">\n            first example\n          </Link>{' '}\n          is a line chart showing how to add labels at the end of each series\n          for better readability. The{' '}\n          <Link to=\"/web-lollipop-plot-with-python-the-office\">second</Link>{' '}\n          shows how to use lollipop to display the evolution of a deviation\n          around a trend. The{' '}\n          <Link to=\"/524-area-chart-over-flexible-baseline\">last one</Link>{' '}\n          shows how to use an area over a flexible baseline to display the\n          deviation around a historical reference period.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"web-line-chart-with-labels-at-line-end\"\n            caption=\"How to add labels at the end of each line with matplotlib. Definitely better than using a legend!\"\n            linkTo=\"/web-line-chart-with-labels-at-line-end\"\n          />\n          <ChartImageContainer\n            imgName=\"web-lollipop-plot-with-python-the-office-square\"\n            caption=\"A highly customized lollipop chart made with Python and Matplotlib to display a timeseries.\"\n            linkTo=\"/web-lollipop-plot-with-python-the-office\"\n          />\n          <ChartImageContainer\n            imgName=\"web-highlighted-lineplot-with-faceting-square\"\n            caption=\"A multipanel connected scatterplot, with several groups displayed and one highlighted per panel.\"\n            linkTo=\"/web-highlighted-lineplot-with-faceting\"\n          />\n          <ChartImageContainer\n            imgName=\"web-lineplots-and-area-chart-the-economist-square1\"\n            caption=\"Learn how to mimick The Economist's style with a figure combining both a line and an area chart.\"\n            linkTo=\"/web-lineplots-and-area-chart-the-economist\"\n          />\n          <ChartImageContainer\n            imgName=\"524-area-over-flexible-baseline_square\"\n            caption=\"Learn how to how to build an area over flexible baseline chart to show deviations from a reference or baseline.\"\n            linkTo=\"/524-area-chart-over-flexible-baseline\"\n          />\n          <ChartImageContainer\n            imgName=\"web-stacked-charts-square\"\n            caption=\"How to build a line chart on top of a wordcloud with Python and Matplotlib.\"\n            linkTo=\"/web-stacked-charts\"\n          />\n          <ChartImageContainer\n            imgName={'web-small-multiple-with-highlights-square'}\n            caption={'Multiple line charts with highlights'}\n            linkTo=\"/web-small-multiple-with-highlights\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"evolution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","SEO","title","seoDescription","keywords","lang","content","property","chartDescription","quickCode","Head","Pie","Layout","isTocEnabled","TitleAndDescription","description","chartType","Container","id","Row","CodeChunk","Spacing","href","style","maxWidth","margin","padding","Matplotlib","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}
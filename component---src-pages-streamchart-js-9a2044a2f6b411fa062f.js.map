{"version":3,"file":"component---src-pages-streamchart-js-9a2044a2f6b411fa062f.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/FunctionExploration.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/functions/paramDescription.js","webpack://the-python-graph-gallery/./src/functions/stackplot.js","webpack://the-python-graph-gallery/./src/pages/streamchart.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import { Link } from 'gatsby';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ChartImage from './ChartImage';\n\nimport './functionExploration.css';\nimport CodeChunk from './CodeChunk';\n\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport default function FunctionExploration({ funDetails }) {\n  const [selectedParameter, setSelectedParameter] = useState(0);\n  const [selectedOpt, setSelectedOpt] = useState(0);\n\n  if (!funDetails) {\n    return null;\n  }\n\n  const selectedParameterInfo = funDetails.parameters[selectedParameter];\n  const selectedOptInfo = selectedParameterInfo.options?.[selectedOpt];\n\n  const argumentButtons = (\n    <div>\n      {funDetails.parameters.map((item, i) => (\n        <Button\n          key={i}\n          value={item.name}\n          size=\"sm\"\n          onClick={() => setSelectedParameter(i)}\n          className={selectedParameter === i ? 'isButtonSelected' : ''}\n        >\n          {item.name}\n        </Button>\n      ))}\n    </div>\n  );\n\n  return (\n    <div style={{ marginBottom: 70 }}>\n      <h2 id={capitalize(funDetails.name + ' details')}>\n        &#128270; <code>{funDetails.name}</code> function parameters\n        <a\n          style={{ marginLeft: '15px', fontSize: '14px' }}\n          href={funDetails.docUrl}\n        >\n          &rarr; see full doc\n        </a>\n      </h2>\n\n      <h3>&rarr; Description</h3>\n      <p>{funDetails.description}</p>\n\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'start',\n          alignItems: 'baseline',\n          gap: 14,\n        }}\n      >\n        <h3 style={{ width: 'auto', flexWrap: 'nowrap', whiteSpace: 'nowrap' }}>\n          &rarr; Arguments\n        </h3>\n        {argumentButtons}\n      </div>\n\n      <Row>\n        <Col md={8}>\n          <div style={{ fontSize: 16 }}>\n            <p className=\"argumentSectionTitle\">Description</p>\n            <p className=\"little-text\">{selectedParameterInfo.description}</p>\n\n            <p className=\"argumentSectionTitle\">\n              Possible values &rarr; {'  '}\n              <span className=\"parameterTypePill\">\n                {selectedParameterInfo.type}\n              </span>\n            </p>\n            <p className=\"little-text\">{selectedParameterInfo.howToUse}</p>\n            {selectedParameterInfo.options && (\n              <>\n                <div\n                  style={{ display: 'flex', gap: 2, alignItems: 'baseline' }}\n                >\n                  {selectedParameterInfo.options.map((opt, i) => {\n                    return (\n                      <Button\n                        size=\"sm\"\n                        className={i === selectedOpt ? 'isButtonSelected' : ''}\n                        onClick={() => setSelectedOpt(i)}\n                      >\n                        {opt.name}\n                      </Button>\n                    );\n                  })}\n                </div>\n                <p>{selectedParameterInfo.options[selectedOpt].explanation}</p>\n              </>\n            )}\n\n            <p className=\"argumentSectionTitle\">Code Example</p>\n            <div style={{ backgroundColor: 'white' }}>\n              <CodeChunk hasWhiteBackground>\n                {selectedParameterInfo.options\n                  ? selectedParameterInfo.basicUsage.replace(\n                      'paramgoeshere',\n                      selectedParameterInfo.options[selectedOpt].name\n                    )\n                  : selectedParameterInfo.basicUsage}\n              </CodeChunk>\n            </div>\n          </div>\n        </Col>\n\n        <Col md={4}>\n          <br />\n          <Link to={'/' + selectedParameterInfo.post}>\n            <ChartImage\n              imgName={selectedOptInfo?.img || selectedParameterInfo.img}\n              caption={'More about the ' + funDetails.name + ' function.'}\n            />\n          </Link>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta property=\"og:title\" content={title} />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from 'react';\n\nexport const alphaHowToUse = (\n  <p>\n    Values range from <code>0</code> (completely transparent) to <code>1</code>{' '}\n    (completely opaque).\n  </p>\n);\n\nexport const colorHowToUse = (\n  <p>\n    Can be a color name, a Hex code, or an RGB value.{' '}\n    <a href=\"/python-colors\">Learn more about colors.</a>\n  </p>\n);\n\nexport const zorderDescription = (\n  <p>Controls the drawing order of plot elements.</p>\n);\n\nexport const zorderHowToUse = (\n  <p>\n    Higher zorder values are drawn on top of lower values. This is useful when\n    you want certain elements to appear above others.\n  </p>\n);\n\nexport const hatchHowToUse = (\n  <p>\n    It must be in one of: <code>&apos;/&apos;</code>, <code>&apos;\\&apos;</code>\n    , <code>&apos;|&apos;</code>,<code>&apos;-&apos;</code>,{' '}\n    <code>&apos;+&apos;</code>, <code>&apos;x&apos;</code>,{' '}\n    <code>&apos;o&apos;</code>, <code>&apos;O&apos;</code>,\n    <code>&apos;.&apos;</code>, <code>&apos;*&apos;</code>\n  </p>\n);\n\nexport const hueDescription = (\n  <p>\n    Specify the dataset column to use for color encoding in the chart. It allows\n    for grouping and differentiating data points.\n  </p>\n);\n\nexport const hueHowToUse = (\n  <p>\n    Column name to use for color encoding in the chart. It's usually a\n    categorical variable.\n  </p>\n);\n\nexport const dataHowToUse = (\n  <div>\n    <p>\n      It just has to be a <code>pandas.DataFrame</code> (columns are variables),\n      <code>numpy.ndarray</code> (rows/columns are variables), or any\n      mapping/sequence (dictionaries/lists)\n    </p>\n    <p>\n      Supports both long-form (each variable in its own column) and wide-form\n      (variables in separate columns; reshaped internally).\n    </p>\n  </div>\n);\n\nexport const dataDescription = (\n  <p>\n    Dataframe-like (pandas, numpy, polars...) with the columns we want to plot.\n  </p>\n);\n\nexport const linestyleDescription = (\n  <p>Determines the style of the line in the plot.</p>\n);\n\nexport const linestyleHowToUse = (\n  <p>\n    Common values include '-' (solid), '--' (dashed), ':' (dotted), and '-.'\n    (dash-dot).\n  </p>\n);\n\nexport const linewidthDescription = <p>Sets the width of the plotted line.</p>;\n\nexport const linewidthHowToUse = (\n  <p>\n    Larger values create thicker lines. The default value is usually{' '}\n    <code>1</code>.\n  </p>\n);\n\nexport const paletteDescription = (\n  <p>\n    Defines colors for the <code>hue</code> semantic. It can be a list of colors\n    or a matplotlib colormap.\n  </p>\n);\n\nexport const paletteHowToUse = (\n  <div>\n    <p>\n      This parameter is used <b>in combination</b> with the <code>hue</code>{' '}\n      parameter and will a assign a different color to each category in{' '}\n      <code>hue</code>.\n    </p>\n    <p>\n      Moreover, the <a href=\"/color-palette-finder\">pypalettes library</a> can\n      help you find the best colors for your chart by providing access to\n      thousands of pre-made color palette.\n    </p>\n  </div>\n);\n","import React from 'react';\nimport {\n  colorHowToUse,\n  hatchHowToUse,\n  alphaHowToUse,\n  linewidthDescription,\n  linewidthHowToUse,\n} from './paramDescription';\n\nconst name = 'stackplot()';\nconst description = (\n  <>\n    <p>\n      The <code>stackplot()</code> function from{' '}\n      <a href=\"/matplotlib\">matplotlib</a> creates a stacked area plot. This\n      type of plot is used to show how multiple variables change over time, with\n      each variable stacked on top of the previous ones. It's particularly\n      useful for visualizing the composition of a whole over time.\n    </p>\n  </>\n);\n\nconst docUrl =\n  'https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.stackplot.html';\n\nconst param1 = {\n  name: 'x',\n  description: <p>The x coordinates of the data points.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\ny1 = np.random.rand(10)\ny2 = np.random.rand(10)\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.stackplot(x, y1, y2)\nplt.show()\n`.trim(),\n  type: 'array-like',\n  howToUse: (\n    <p>\n      Pass a 1D array-like object for the x-axis values. This is typically the\n      time axis.\n    </p>\n  ),\n  img: 'tuto-stackplot-6-square',\n  post: '250-basic-stacked-area-chart',\n};\n//\n//\n//\n//\n//\nconst param2 = {\n  name: 'y',\n  description: (\n    <p>\n      The y coordinates of the data points. Each input will generate a colored\n      area.\n    </p>\n  ),\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\ny1 = np.random.rand(10)\ny2 = np.random.rand(10)\ny3 = np.random.rand(10)\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.stackplot(x, y1, y2, y3)\nplt.show()\n`.trim(),\n  type: 'array-like or sequence of array-likes',\n  howToUse: (\n    <p>\n      Pass <b>one or more</b> 1D array-like objects, each representing a\n      different data series to be stacked. You can pass these as separate\n      arguments or as a single sequence.\n    </p>\n  ),\n  img: '250_basic_stacked_area_chart',\n  post: '250-basic-stacked-area-chart',\n};\n//\n//\n//\n//\n//\nconst param3 = {\n  name: 'labels',\n  description: (\n    <p>A sequence of strings to identify each data series in the legend.</p>\n  ),\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\ny1 = np.random.rand(10)\ny2 = np.random.rand(10)\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.stackplot(\n  x, y1, y2,\n  labels=['Series 1', 'Series 2', 'Series 3']\n)\nax.legend(loc='upper left', fontsize=12)\nplt.show()\n`.trim(),\n  type: 'list of str',\n  howToUse: (\n    <p>\n      Provide a list of strings, one for each data series. These labels will be\n      used in the legend if it is displayed with <code>ax.legend()</code>.\n    </p>\n  ),\n  img: 'tuto-stackplot-1-square',\n  post: 'introduction-to-stackplot-in-matplotlib',\n};\n//\n//\n//\n//\n//\nconst param4 = {\n  name: 'colors',\n  description: <div>The colors to use for each area, from bottom to top.</div>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\ny1 = np.random.rand(10)\ny2 = np.random.rand(10)\ny3 = np.random.rand(10)\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.stackplot(\n  x, y1, y2, y3\n  colors=['#EED4C5FF', '#835D4AFF', '#D2A19AFF']\n)\nplt.show()\n`.trim(),\n  type: 'list',\n  howToUse: <div>{colorHowToUse}</div>,\n  img: '253-control-the-color-in-stacked-area-chart-1',\n  post: '253-control-the-color-in-stacked-area-chart',\n};\n//\n//\n//\n//\n//\nconst param5 = {\n  name: 'edgecolor',\n  description: <div>The colors to use for each area, from bottom to top.</div>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\ny1 = np.random.rand(10)\ny2 = np.random.rand(10)\ny3 = np.random.rand(10)\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.stackplot(\n  x, y1, y2, y3\n  colors=['#EED4C5FF', '#835D4AFF', '#D2A19AFF']\n)\nplt.show()\n`.trim(),\n  type: 'list',\n  howToUse: <div>{colorHowToUse}</div>,\n  img: '253-control-the-color-in-stacked-area-chart-2',\n  post: '253-control-the-color-in-stacked-area-chart',\n};\n//\n//\n//\n//\n//\nconst param6 = {\n  name: 'baseline',\n  description: (\n    <p>\n      The type of baseline to use for stacking. Options are <code>zero</code>,\n      <code>sym</code>, <code>wiggle</code>, and <code>weighted_wiggle</code>.\n    </p>\n  ),\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\ny1 = np.random.rand(10)\ny2 = np.random.rand(10)\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.stackplot(\n  x, y1, y2,\n  baseline='paramgoeshere'\n)\nplt.show()\n`.trim(),\n  type: 'string',\n  options: [\n    {\n      name: 'zero',\n      explanation: (\n        <p>\n          (Default) Layers are stacked on top of a fixed baseline at zero,\n          creating a standard stacked area.\n        </p>\n      ),\n      isDefault: true,\n      img: 'tuto-stackplot-6-square',\n    },\n    {\n      name: 'sym',\n      explanation: (\n        <p>\n          Layers are centered around the middle of the plot, balancing the areas\n          above and below, resembling a river-like flow.\n        </p>\n      ),\n      isDefault: true,\n      img: 'tuto-stackplot-3-square',\n    },\n    {\n      name: 'wiggle',\n      explanation: (\n        <p>\n          Layers are arranged to minimize the amount of vertical movement,\n          reducing the overall &quot;wiggling&quot; effect.\n        </p>\n      ),\n      isDefault: true,\n      img: 'tuto-stackplot-4-square',\n    },\n    {\n      name: 'weighted_wiggle',\n      explanation: (\n        <p>\n          Similar to <code>wiggle</code>, but the arrangement is adjusted to\n          give larger layers more influence in reducing vertical movement.\n        </p>\n      ),\n      isDefault: true,\n      img: 'tuto-stackplot-5-square',\n    },\n  ],\n  img: '252_baseline_and_stacked_area_chart',\n  post: '252-baseline-options-for-stacked-area-chart',\n};\n//\n//\n//\n//\n//\nconst param7 = {\n  name: 'hatch',\n  description: <p>Determines the pattern to be used to fill the bars</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\ny1 = np.random.rand(10)\ny2 = np.random.rand(10)\ny3 = np.random.rand(10)\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.stackplot(\n  x, y1, y2, y3,\n  hatch=['*', '.', '+']\n)\nplt.show()\n`.trim(),\n  type: 'str or list',\n  howToUse: <div>{hatchHowToUse}</div>,\n  img: 'tuto-stackplot-7-square',\n  post: '253-control-the-color-in-stacked-area-chart',\n};\n//\n//\n//\n//\n//\nconst param8 = {\n  name: 'alpha',\n  description: <p>Determines the pattern to be used to fill the bars</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\ny1 = np.random.rand(10)\ny2 = np.random.rand(10)\ny3 = np.random.rand(10)\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.stackplot(\n  x, y1, y2, y3,\n  alpha=0.6\n)\nplt.show()\n`.trim(),\n  type: 'str or list',\n  howToUse: <div>{alphaHowToUse}</div>,\n  img: '253-control-the-color-in-stacked-area-chart-3',\n  post: '253-control-the-color-in-stacked-area-chart',\n};\n//\n//\n//\n//\n//\nconst param9 = {\n  name: 'linewidth',\n  description: <div>{linewidthDescription}</div>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.arange(10)\ny1 = np.random.rand(10)\ny2 = np.random.rand(10)\ny3 = np.random.rand(10)\n\nfig, ax = plt.subplots(figsize=(10,10))\nax.stackplot(\n  x, y1, y2, y3,\n  edgecolor='black',\n  linewidth=4\n)\nplt.show()\n`.trim(),\n  type: 'str or list',\n  howToUse: <div>{linewidthHowToUse}</div>,\n  img: '253-control-the-color-in-stacked-area-chart-2',\n  post: '253-control-the-color-in-stacked-area-chart',\n};\n\nexport const stackplot = {\n  name,\n  description,\n  docUrl,\n  parameters: [\n    param1,\n    param2,\n    param3,\n    param4,\n    param5,\n    param6,\n    param7,\n    param8,\n    param9,\n  ],\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib } from '../components/MiscellaneousLogos';\nimport { Col } from 'react-bootstrap';\nimport ChartImage from '../components/ChartImage';\nimport Spacing from '../components/Spacing';\nimport { Button } from 'react-bootstrap';\nimport { SEO } from '../components/SEO';\nimport { stackplot } from '../functions/stackplot';\nimport FunctionExploration from '../components/FunctionExploration';\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/streamgraph.html'>streamgraph</a> is a variation of the stacked area graph. It displays the evolution of a numeric value for several groups. Each group is displayed around a central axis and edges are rounded resulting in a flowing and organic shape.</p>\";\n\nexport const Head = () => (\n  <SEO\n    title=\"Streamgraph\"\n    seoDescription=\"A collection of streamgraph examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function StackedAreaPlot() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Streamgraph\"\n        description={chartDescription}\n        chartType=\"stream\"\n      />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib />\n          Streamgraph with <code>Matplotlib</code>\n        </h2>\n        <p>\n          <code>Matplotlib</code> can build streamgraphs but there isn't any\n          prebuilt function for it so be ready for quite a lot of code.\n          &#127871;\n        </p>\n        <p>\n          The process starts pretty much like for a{' '}\n          <Link to=\"/stacked-area-plot\">stacked area graph</Link>. The{' '}\n          <code>baseline</code> parameter of the <code>stackplot()</code>{' '}\n          function is used to place groups around the X axis. The tricky part is\n          to interpolate points between each value of the X axis to get the\n          smooth visual. This is done thanks to the{' '}\n          <code>scipy.interpolate</code> library.\n        </p>\n        <Link to=\"/streamchart-basic-matplotlib\">\n          <Button size=\"sm\">Read more</Button>\n        </Link>\n        <Row>\n          <ChartImageContainer\n            imgName=\"streamchart-basic-matplotlib1\"\n            caption=\"Everything starts with a stacked area chart with a custom baseline\"\n            linkTo=\"/streamchart-basic-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"streamchart-basic-matplotlib2\"\n            caption=\"Apply some smoothing to get a stream chart\"\n            linkTo=\"/streamchart-basic-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"streamchart-basic-matplotlib3\"\n            caption=\"Some more smoothing control using grids\"\n            linkTo=\"/streamchart-basic-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"streamchart-basic-matplotlib4\"\n            caption=\"Customize the color palette\"\n            linkTo=\"/streamchart-basic-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"570-custom-streamchart-2\"\n            caption=\"Custom colormap in a streamchart with a line chart\"\n            linkTo=\"/570-custom-streamchart\"\n          />\n          <ChartImageContainer\n            imgName=\"570-custom-streamchart-3\"\n            caption=\"Change order of the lines\"\n            linkTo=\"/570-custom-streamchart\"\n          />\n          <ChartImageContainer\n            imgName=\"570-custom-streamchart-4\"\n            caption=\"Smooth the chart\"\n            linkTo=\"/570-custom-streamchart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"stackplotWidget\">\n        <Container>\n          <FunctionExploration funDetails={stackplot} />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Best\">\n          <Matplotlib />\n          Best python streamchart examples\n        </h2>\n        <p>\n          The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>). The{' '}\n          <a href=\"https://python-graph-gallery.com\">Python graph gallery</a>{' '}\n          tries to display (or translate from R) some of the best creations and\n          explain how their source code works. If you want to display your work\n          here, please drop me a word or even better, submit a{' '}\n          <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">\n            Pull Request\n          </a>\n          !\n        </p>\n        <Row>\n          <Col xs={12} md={12}>\n            <Link to={'/web-streamchart-with-matplotlib'}>\n              <ChartImage\n                imgName={'web-streamchart-with-matplotlib'}\n                caption={\n                  'A streamchart made with Python, Matplotlib and the scipy.stats package.'\n                }\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"evolution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","capitalize","s","charAt","toUpperCase","slice","FunctionExploration","_selectedParameterInf","funDetails","selectedParameter","setSelectedParameter","useState","selectedOpt","setSelectedOpt","selectedParameterInfo","parameters","selectedOptInfo","options","argumentButtons","map","item","i","Button","key","value","size","onClick","style","marginBottom","id","marginLeft","fontSize","href","docUrl","description","display","flexDirection","justifyContent","alignItems","gap","width","flexWrap","whiteSpace","Row","type","howToUse","opt","explanation","backgroundColor","CodeChunk","hasWhiteBackground","basicUsage","replace","post","img","SEO","title","seoDescription","keywords","lang","content","property","alphaHowToUse","colorHowToUse","zorderDescription","zorderHowToUse","hatchHowToUse","hueDescription","hueHowToUse","dataHowToUse","dataDescription","linestyleDescription","linestyleHowToUse","linewidthDescription","linewidthHowToUse","paletteDescription","paletteHowToUse","stackplot","trim","isDefault","chartDescription","Head","StackedAreaPlot","Layout","isTocEnabled","TitleAndDescription","chartType","Container","Matplotlib","Spacing","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}
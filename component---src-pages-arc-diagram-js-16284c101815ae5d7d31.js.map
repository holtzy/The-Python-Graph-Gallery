{"version":3,"file":"component---src-pages-arc-diagram-js-16284c101815ae5d7d31.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/ArcDiagramD3.js","webpack://the-python-graph-gallery/./src/pages/arc-diagram.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import React from \"react\";\nimport * as d3 from \"d3\";\n\nexport default function ArcDiagramD3() {\n\n    const [data, setData] = React.useState(undefined);\n\n    const [graphWidth, setGraphWidth] = React.useState();\n\n    const parentRef = React.useRef(null);\n\n    React.useEffect(() => {\n        if (!parentRef.current) {\n            return\n        }\n\n        setGraphWidth(parentRef.current.offsetWidth);\n        // Callback function: what to do when window resizes\n        const handleResize = () => {\n            setGraphWidth(parentRef.current.offsetWidth);\n        };\n        window.addEventListener(\"resize\", handleResize);\n    }, [parentRef]);\n\n    React.useEffect(() => {\n        d3.json(\"https://raw.githubusercontent.com/holtzy/D3-graph-gallery/master/DATA/data_researcherNetwork.json\").then((d) => {\n            setData(d);\n        });\n        return () => undefined;\n    }, []);\n\n    React.useEffect(() => {\n        // Start by removing everything from the viz div\n        d3.select(\"#my_dataviz\").html(\"\");\n\n        if (!data || !graphWidth || graphWidth < 600) { return }\n\n        // set the dimensions and margins of the graph\n        const finalWidth = Math.min(1200, graphWidth)\n        const sideMargin = (graphWidth - finalWidth) / 2 + 30\n        const margin = { top: 0, right: sideMargin, bottom: 80, left: sideMargin },\n            width = graphWidth - margin.left - margin.right,\n            height = finalWidth / 1.7 - margin.top - margin.bottom;\n\n        // append the svg object to the body of the page\n        const svg = d3.select(\"#my_dataviz\")\n            .append(\"svg\")\n            .attr(\"width\", width + margin.left + margin.right)\n            .attr(\"height\", height + margin.top + margin.bottom)\n            .append(\"g\")\n            .attr(\"transform\",\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\n        // List of node names\n        const allNodes = data.nodes.map(function (d) { return d.name })\n\n        // List of groups\n        const allGroups = [...new Set(data.nodes.map(function (d) { return d.grp }))]\n\n        // A color scale for groups:\n        const color = d3.scaleOrdinal()\n            .domain(allGroups)\n            .range(d3.schemeSet3);\n\n        // A linear scale for node size\n        const size = d3.scaleLinear()\n            .domain([1, 10])\n            .range([2, 10]);\n\n        // A linear scale to position the nodes on the X axis\n        const x = d3.scalePoint()\n            .range([0, width])\n            .domain(allNodes)\n\n        // In my input data, links are provided between nodes -id-, NOT between node names.\n        // So I have to do a link between this id and the name\n        const idToNode = {};\n        data.nodes.forEach(function (n) {\n            idToNode[n.id] = n;\n        });\n\n        // Add the links\n        const links = svg\n            .selectAll('mylinks')\n            .data(data.links)\n            .enter()\n            .append('path')\n            .attr('d', function (d) {\n                const start = x(idToNode[d.source].name)    // X position of start node on the X axis\n                const end = x(idToNode[d.target].name)      // X position of end node\n                return ['M', start, height - 30,    // the arc starts at the coordinate x=start, y=height-30 (where the starting node is)\n                    'A',                            // This means we're gonna build an elliptical arc\n                    (start - end) / 2, ',',    // Next 2 lines are the coordinates of the inflexion point. Height of this point is proportional with start - end distance\n                    (start - end) / 2, 0, 0, ',',\n                    start < end ? 1 : 0, end, ',', height - 30] // We always want the arc on top. So if end is before start, putting 0 here turn the arc upside down.\n                    .join(' ');\n            })\n            .style(\"fill\", \"none\")\n            .attr(\"stroke\", \"grey\")\n            .style(\"stroke-width\", 1)\n\n        // Add the circle for the nodes\n        const nodes = svg\n            .selectAll(\"mynodes\")\n            .data(data.nodes.sort(function (a, b) { return +b.n - +a.n }))\n            .enter()\n            .append(\"circle\")\n            .attr(\"cx\", function (d) { return (x(d.name)) })\n            .attr(\"cy\", height - 30)\n            .attr(\"r\", function (d) { return (size(d.n)) })\n            .style(\"fill\", function (d) { return color(d.grp) })\n            .attr(\"stroke\", \"white\")\n\n        // And give them a label\n        const labels = svg\n            .selectAll(\"mylabels\")\n            .data(data.nodes)\n            .enter()\n            .append(\"text\")\n            .attr(\"x\", 0)\n            .attr(\"y\", 0)\n            .text(function (d) { return (d.name) })\n            .style(\"text-anchor\", \"end\")\n            .attr(\"transform\", function (d) { return (\"translate(\" + (x(d.name)) + \",\" + (height - 15) + \")rotate(-45)\") })\n            .style(\"font-size\", 6)\n\n        // Add the highlighting functionality\n        nodes\n            .on('mouseover', function (d) {\n                // Highlight the nodes: every node is grey except him\n                nodes\n                    .style('opacity', .2)\n                d3.select(this)\n                    .style('opacity', 1)\n                // Highlight the connections\n                links\n                    .style('stroke', function (link_d) { return link_d.source === d.id || link_d.target === d.id ? color(d.grp) : '#b8b8b8'; })\n                    .style('strokeOpacity', function (link_d) { return link_d.source === d.id || link_d.target === d.id ? 1 : .2; })\n                    .style('strokeWidth', function (link_d) { return link_d.source === d.id || link_d.target === d.id ? 4 : 1; })\n                labels\n                    .style(\"fontSize\", function (label_d) { return label_d.name === d.name ? 16 : 2 })\n                    .attr(\"y\", function (label_d) { return label_d.name === d.name ? 10 : 0 })\n\n            })\n            .on('mouseout', function (d) {\n                nodes.style('opacity', 1)\n                links\n                    .style('stroke', 'grey')\n                    .style('strokeOpacity', .8)\n                    .style('strokeWidth', '1')\n                labels\n                    .style(\"fontSize\", 6)\n\n            })\n    }, [data, graphWidth])\n\n    return (\n        <div ref={parentRef} id=\"my_dataviz\"></div>\n    )\n\n}\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport Spacing from '../components/Spacing';\nimport { Button } from 'react-bootstrap';\nimport ArcDiagramD3 from '../components/ArcDiagramD3';\nimport { SEO } from '../components/SEO';\n\nconst chartDescription =\n  \"<p>An <a href='https://www.data-to-viz.com/graph/arc.html'>arc diagram</a> is a special kind of <a href='https://python-graph-gallery.com/network-chart/'>network graph</a>. It is consituted by <u>nodes</u> that represent entities and by <u>links</u> that show relationships between entities. In arc diagrams, nodes are displayed along a single axis and links are represented with arcs.\";\n\nexport const Head = () => (\n  <SEO\n    title=\"Arc Diagram\"\n    seoDescription=\"A collection of arc diagram examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function Arc() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription title=\"Arc diagram\" description={chartDescription} />\n\n      <div id=\"related\">\n        <Container>\n          <h2 id=\"Python\">\n            Python library to build arc diagrams: <code>arcplot</code>\n          </h2>\n          <p>\n            <a href=\"https://github.com/szkics/arcplot\">Arcplot</a> is a Python\n            library that offers a simple way to build arc diagrams. It allows to\n            build <b>static arc diagrams</b> with just a few lines of code. It\n            is a good choice if you are looking for a simple and quick solution.\n          </p>\n          <p>\n            <b>Warning</b>: you need Python 3.10 to use this library.\n          </p>\n          <Row>\n            <ChartImageContainer\n              imgName=\"565-arc-diagram-with-arcplot-0\"\n              caption=\"Most basic arc diagram\"\n              linkTo=\"/565-arc-diagram-with-arcplot\"\n            />\n            <ChartImageContainer\n              imgName=\"565-arc-diagram-with-arcplot-1\"\n              caption=\"Custom colors of edges\"\n              linkTo=\"/565-arc-diagram-with-arcplot\"\n            />\n            <ChartImageContainer\n              imgName=\"565-arc-diagram-with-arcplot-2\"\n              caption=\"Custom theme and background color\"\n              linkTo=\"/565-arc-diagram-with-arcplot\"\n            />\n            <ChartImageContainer\n              imgName=\"565-arc-diagram-with-arcplot-3\"\n              caption=\"Custom the width of the arcs\"\n              linkTo=\"/565-arc-diagram-with-arcplot\"\n            />\n            <ChartImageContainer\n              imgName=\"565-arc-diagram-with-arcplot-4\"\n              caption=\"Custom the position of the arcs\"\n              linkTo=\"/565-arc-diagram-with-arcplot\"\n            />\n          </Row>\n        </Container>\n      </div>\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Other languages\">\n          Arc diagram with <code>R</code> or <code>Javascript</code>\n        </h2>\n        <p>\n          <code>Python</code> has only one library to build arc diagrams:\n          <code>arcplot</code>. For other kind of static version, <code>R</code>{' '}\n          has built-in functions to make them. <code>Javascript</code> and the\n          <code>d3.js</code> library offers <b>more customization</b> and\n          <b> interactivity</b> options, but comes with a steeper learning curve\n          and a lot of line of code. Pick your flavor!\n        </p>\n        <a href=\"https://www.data-to-viz.com/graph/arc.html\">\n          <Button size=\"sm\">R code</Button>\n        </a>\n        <a href=\"https://www.d3-graph-gallery.com/arc.html\">\n          <Button size=\"sm\">Javascript code</Button>\n        </a>\n        <br />\n        <br />\n      </Container>\n      <ArcDiagramD3 />\n      <Container>\n        <p>\n          Here is an arc diagram showing the relationships between researchers.\n          One <u>node</u> is drawn for each researcher having published at least\n          one paper with my previous supervisor,{' '}\n          <a href=\"https://sites.google.com/site/ranwez/\">Vincent Ranwez</a>.\n          Two researchers are <u>linked</u> if they co-authored at least one\n          paper together. Read more about this dataset{' '}\n          <a href=\"https://www.data-to-viz.com/story/AdjacencyMatrix.html\">\n            here\n          </a>\n          .\n        </p>\n        <p>\n          <i>Hover nodes for more info</i>\n        </p>\n        <a\n          className=\"btn btn-secondary btn-md text-uppercase\"\n          href=\"https://www.d3-graph-gallery.com/arc.html\"\n        >\n          See code\n        </a>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"flow\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","ArcDiagramD3","data","setData","undefined","graphWidth","setGraphWidth","parentRef","current","offsetWidth","window","addEventListener","handleResize","d3","then","d","html","finalWidth","Math","min","sideMargin","margin","width","height","svg","append","attr","allNodes","nodes","map","allGroups","_toConsumableArray","Set","grp","color","domain","range","size","x","idToNode","forEach","id","links","selectAll","enter","start","source","end","target","join","style","sort","a","b","labels","text","on","this","link_d","label_d","ref","chartDescription","Head","SEO","title","seoDescription","Arc","Layout","isTocEnabled","TitleAndDescription","description","Container","href","Row","Spacing","Button","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-line-chart-js-f525f7ea6efcd6c63afb.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/FunctionExploration.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/functions/paramDescription.js","webpack://the-python-graph-gallery/./src/functions/plot.js","webpack://the-python-graph-gallery/./src/pages/line-chart.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import { Link } from 'gatsby';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ChartImage from './ChartImage';\n\nimport './functionExploration.css';\nimport CodeChunk from './CodeChunk';\n\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport default function FunctionExploration({ funDetails }) {\n  const [selectedParameter, setSelectedParameter] = useState(0);\n  const [selectedOpt, setSelectedOpt] = useState(0);\n\n  if (!funDetails) {\n    return null;\n  }\n\n  const selectedParameterInfo = funDetails.parameters[selectedParameter];\n  const selectedOptInfo = selectedParameterInfo.options?.[selectedOpt];\n\n  const argumentButtons = (\n    <div>\n      {funDetails.parameters.map((item, i) => (\n        <Button\n          key={i}\n          value={item.name}\n          size=\"sm\"\n          onClick={() => setSelectedParameter(i)}\n          className={selectedParameter === i ? 'isButtonSelected' : ''}\n        >\n          {item.name}\n        </Button>\n      ))}\n    </div>\n  );\n\n  return (\n    <div style={{ marginBottom: 70 }}>\n      <h2 id={capitalize(funDetails.name + ' details')}>\n        &#128270; <code>{funDetails.name}</code> function parameters\n        <a\n          style={{ marginLeft: '15px', fontSize: '14px' }}\n          href={funDetails.docUrl}\n        >\n          &rarr; see full doc\n        </a>\n      </h2>\n\n      <h3>&rarr; Description</h3>\n      <p>{funDetails.description}</p>\n\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'start',\n          alignItems: 'baseline',\n          gap: 14,\n        }}\n      >\n        <h3 style={{ width: 'auto', flexWrap: 'nowrap', whiteSpace: 'nowrap' }}>\n          &rarr; Arguments\n        </h3>\n        {argumentButtons}\n      </div>\n\n      <Row>\n        <Col md={8}>\n          <div style={{ fontSize: 16 }}>\n            <p className=\"argumentSectionTitle\">Description</p>\n            <p className=\"little-text\">{selectedParameterInfo.description}</p>\n\n            <p className=\"argumentSectionTitle\">\n              Possible values &rarr; {'  '}\n              <span className=\"parameterTypePill\">\n                {selectedParameterInfo.type}\n              </span>\n            </p>\n            <p className=\"little-text\">{selectedParameterInfo.howToUse}</p>\n            {selectedParameterInfo.options && (\n              <>\n                <div\n                  style={{ display: 'flex', gap: 2, alignItems: 'baseline' }}\n                >\n                  {selectedParameterInfo.options.map((opt, i) => {\n                    return (\n                      <Button\n                        size=\"sm\"\n                        className={i === selectedOpt ? 'isButtonSelected' : ''}\n                        onClick={() => setSelectedOpt(i)}\n                      >\n                        {opt.name}\n                      </Button>\n                    );\n                  })}\n                </div>\n                <p>{selectedParameterInfo.options[selectedOpt].explanation}</p>\n              </>\n            )}\n\n            <p className=\"argumentSectionTitle\">Code Example</p>\n            <div style={{ backgroundColor: 'white' }}>\n              <CodeChunk hasWhiteBackground>\n                {selectedParameterInfo.options\n                  ? selectedParameterInfo.basicUsage.replace(\n                      'paramgoeshere',\n                      selectedParameterInfo.options[selectedOpt].name\n                    )\n                  : selectedParameterInfo.basicUsage}\n              </CodeChunk>\n            </div>\n          </div>\n        </Col>\n\n        <Col md={4}>\n          <br />\n          <Link to={'/' + selectedParameterInfo.post}>\n            <ChartImage\n              imgName={selectedOptInfo?.img || selectedParameterInfo.img}\n              caption={'More about the ' + funDetails.name + ' function.'}\n            />\n          </Link>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta property=\"og:title\" content={title} />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from 'react';\n\nexport const alphaHowToUse = (\n  <p>\n    Values range from <code>0</code> (completely transparent) to <code>1</code>{' '}\n    (completely opaque).\n  </p>\n);\n\nexport const colorHowToUse = (\n  <p>\n    Can be a color name, a Hex code, or an RGB value.{' '}\n    <a href=\"/python-colors\">Learn more about colors.</a>\n  </p>\n);\n\nexport const zorderDescription = (\n  <p>Controls the drawing order of plot elements.</p>\n);\n\nexport const zorderHowToUse = (\n  <p>\n    Higher zorder values are drawn on top of lower values. This is useful when\n    you want certain elements to appear above others.\n  </p>\n);\n\nexport const hatchHowToUse = (\n  <p>\n    It must be in one of: <code>&apos;/&apos;</code>, <code>&apos;\\&apos;</code>\n    , <code>&apos;|&apos;</code>,<code>&apos;-&apos;</code>,{' '}\n    <code>&apos;+&apos;</code>, <code>&apos;x&apos;</code>,{' '}\n    <code>&apos;o&apos;</code>, <code>&apos;O&apos;</code>,\n    <code>&apos;.&apos;</code>, <code>&apos;*&apos;</code>\n  </p>\n);\n\nexport const hueDescription = (\n  <p>\n    Specify the dataset column to use for color encoding in the chart. It allows\n    for grouping and differentiating data points.\n  </p>\n);\n\nexport const hueHowToUse = (\n  <p>\n    Column name to use for color encoding in the chart. It's usually a\n    categorical variable.\n  </p>\n);\n\nexport const dataHowToUse = (\n  <div>\n    <p>\n      It just has to be a <code>pandas.DataFrame</code> (columns are variables),\n      <code>numpy.ndarray</code> (rows/columns are variables), or any\n      mapping/sequence (dictionaries/lists)\n    </p>\n    <p>\n      Supports both long-form (each variable in its own column) and wide-form\n      (variables in separate columns; reshaped internally).\n    </p>\n  </div>\n);\n\nexport const dataDescription = (\n  <p>\n    Dataframe-like (pandas, numpy, polars...) with the columns we want to plot.\n  </p>\n);\n\nexport const linestyleDescription = (\n  <p>Determines the style of the line in the plot.</p>\n);\n\nexport const linestyleHowToUse = (\n  <p>\n    Common values include '-' (solid), '--' (dashed), ':' (dotted), and '-.'\n    (dash-dot).\n  </p>\n);\n\nexport const linewidthDescription = <p>Sets the width of the plotted line.</p>;\n\nexport const linewidthHowToUse = (\n  <p>\n    Larger values create thicker lines. The default value is usually{' '}\n    <code>1</code>.\n  </p>\n);\n\nexport const paletteDescription = (\n  <p>\n    Defines colors for the <code>hue</code> semantic. It can be a list of colors\n    or a matplotlib colormap.\n  </p>\n);\n\nexport const paletteHowToUse = (\n  <div>\n    <p>\n      This parameter is used <b>in combination</b> with the <code>hue</code>{' '}\n      parameter and will a assign a different color to each category in{' '}\n      <code>hue</code>.\n    </p>\n    <p>\n      Moreover, the <a href=\"/color-palette-finder\">pypalettes library</a> can\n      help you find the best colors for your chart by providing access to\n      thousands of pre-made color palette.\n    </p>\n  </div>\n);\n","import React from 'react';\nimport {\n  alphaHowToUse,\n  colorHowToUse,\n  linestyleDescription,\n  linestyleHowToUse,\n  zorderDescription,\n  zorderHowToUse,\n  linewidthDescription,\n  linewidthHowToUse,\n} from './paramDescription';\n\nconst name = 'plot()';\nconst description = (\n  <>\n    <p>\n      The <code>plot()</code> function of <a href=\"/matplotlib\">matplotlib</a>{' '}\n      is a versatile plotting function that can create{' '}\n      <b>various types of plots</b>, including line plots, scatter plots, and\n      step plots. It&apos;s one of the most fundamental plotting functions in\n      matplotlib.\n    </p>\n  </>\n);\n\nconst docUrl =\n  'https://matplotlib.org/stable/api/_as_gen/matplotlib.pyplot.plot.html';\n//\n//\n//\n//\n//\nconst param1 = {\n  name: 'x',\n  description: <p>Positions of the data points along the x-axis.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x=x, y=y)\nplt.show()\n`.trim(),\n  type: 'array-like',\n  howToUse: (\n    <p>\n      The <code>x</code> and <code>y</code> arrays must have the same length and\n      contain numerical values.\n    </p>\n  ),\n  img: '120_Basic_lineplot2',\n  post: '120-line-chart-with-matplotlib',\n};\n//\n//\n//\n//\n//\nconst param2 = {\n  name: 'y',\n  description: <p>Positions of the data points along the y-axis.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x=x, y=y)\nplt.show()\n`.trim(),\n  type: 'array-like',\n  howToUse: (\n    <p>\n      The <code>x</code> and <code>y</code> arrays must have the same length and\n      contain numerical values.\n    </p>\n  ),\n  img: '120_Basic_lineplot2',\n  post: '120-line-chart-with-matplotlib',\n};\n//\n//\n//\n//\n//\nconst param3 = {\n  name: 'color',\n  description: <p>Sets the color of the line or markers in the plot.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y, color=\"red\")\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: <div>{colorHowToUse}</div>,\n  img: 'tuto-plot-1-square',\n  post: '121-line-chart-customization',\n};\n//\n//\n//\n//\n//\nconst param4 = {\n  name: 'linestyle',\n  description: <div>{linestyleDescription}</div>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y, linestyle=\"--\")\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: <div>{linestyleHowToUse}</div>,\n  img: 'tuto-plot-2-square',\n  post: '121-line-chart-customization',\n};\n//\n//\n//\n//\n//\nconst param5 = {\n  name: 'marker',\n  description: <p>Specifies the marker style for the data points.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 20)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y, marker='o')\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: (\n    <p>\n      Common markers include 'o' (circle), 's' (square), '^' (triangle up), and\n      '.' (point). See matplotlib's{' '}\n      <a href=\"https://matplotlib.org/stable/api/markers_api.html\">\n        marker reference\n      </a>{' '}\n      for more options.\n    </p>\n  ),\n  img: 'tuto-plot-3-square',\n  post: '121-line-chart-customization',\n};\n//\n//\n//\n//\n//\nconst param6 = {\n  name: 'label',\n  description: <p>Sets the label for the plot, which is used in the legend.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y1, label='sin(x)')\nax.plot(x, y2, label='cos(x)')\nplt.legend()\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: (\n    <p>\n      Use <code>plt.legend()</code> to display the legend after setting labels.\n    </p>\n  ),\n  img: 'tuto-plot-4-square',\n  post: '585-legend-for-categorical-data-matplotlib',\n};\n//\n//\n//\n//\n//\nconst param7 = {\n  name: 'alpha',\n  description: <p>Controls the transparency of the plot elements.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y, alpha=0.5)\nplt.show()\n`.trim(),\n  type: 'float',\n  howToUse: <div>{alphaHowToUse}</div>,\n  img: 'tuto-plot-5-square',\n  post: '121-line-chart-customization',\n};\n//\n//\n//\n//\n//\nconst param8 = {\n  name: 'linewidth',\n  description: <div>{linewidthDescription}</div>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny = np.sin(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y, linewidth=6)\nplt.show()\n`.trim(),\n  type: 'float',\n  howToUse: <div>{linewidthHowToUse}</div>,\n  img: 'tuto-plot-6-square',\n  post: '121-line-chart-customization',\n};\n//\n//\n//\n//\n//\nconst param9 = {\n  name: 'zorder',\n  description: <div>{zorderDescription}</div>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nx = np.linspace(0, 10, 100)\ny1 = np.sin(x)\ny2 = np.cos(x)\n\nfig, ax = plt.subplots()\nax.plot(x, y1, zorder=2)\nax.plot(x, y2, zorder=1)\nplt.show()\n`.trim(),\n  type: 'int',\n  howToUse: <div>{zorderHowToUse}</div>,\n  img: 'tuto-plot-7-square',\n  post: '121-line-chart-customization',\n};\n\nexport const plot = {\n  name,\n  description,\n  docUrl,\n  parameters: [\n    param1,\n    param2,\n    param3,\n    param4,\n    param5,\n    param6,\n    param7,\n    param8,\n    param9,\n  ],\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport {\n  Matplotlib,\n  Pandas,\n  Plotly,\n  Seaborn,\n} from '../components/MiscellaneousLogos';\nimport { Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport ChartImage from '../components/ChartImage';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\nimport { plot } from '../functions/plot';\nimport FunctionExploration from '../components/FunctionExploration';\n\nconst chartDescription = (\n  <>\n    <p>\n      A <a href=\"https://www.data-to-viz.com/graph/line.html\">line chart</a>{' '}\n      displays the <b>evolution</b> of one or several <b>numeric variables</b>.\n      It is often used to represend <Link href=\"/timeseries\">time series</Link>.\n    </p>\n    <p>\n      The line chart is one of the <b>most common</b> chart type. As a result,\n      all the most common python data visualization libraries like{' '}\n      <code>matplotlib</code>, <code>seaborn</code> or <code>plotly</code> allow\n      to build it.\n    </p>\n    <p>\n      This page displays many line chart examples made with those tools. It goes\n      from <b>basic line chart tutorials</b> to highly customized,{' '}\n      <b>polished examples</b> 🔥.\n    </p>\n  </>\n);\n\nconst quickCode = `# libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# create data\nvalues=np.cumsum(np.random.randn(1000,1))\n\n# use the plot function\nplt.plot(values)\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Line chart | Python & Matplotlib examples\"\n    seoDescription=\"A collection of line chart examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function LinePlot() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Line Chart\"\n        description={chartDescription}\n        chartType=\"line\"\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              Making a simple line chart with <code>matplotlib</code> is pretty\n              straightforward thanks to the <code>plot()</code> function.\n            </p>\n            <p>\n              If you provide only a series of values, it will consider that\n              these values are ordered and will use values from 1 to n to create\n              the X axis.🔥\n            </p>\n            <p>\n              For more control on the chart, see the dedicated section below.\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/120-line-chart-with-matplotlib'}>\n              <ChartImage\n                imgName=\"120_Basic_lineplot2\"\n                caption=\"A basic line chart made with python and matplotlib\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib />\n          Line chart with <code>Matplotlib</code>\n        </h2>\n        <p>\n          <code>Matplotlib</code> is a great fit to build line charts thanks to\n          its <code>plot()</code> function.{' '}\n        </p>\n        <p>\n          The <Link to=\"/120-line-chart-with-matplotlib\">first chart</Link> of\n          this section explains how to use <code>plot()</code> from any kind of\n          data input format. The{' '}\n          <Link to=\"/121-line-chart-customization\">next one</Link> goes deep\n          into chart customization (line width, color aspect and more).{' '}\n        </p>\n        <p>\n          Another common need is to build a{' '}\n          <Link to=\"/line-chart-dual-y-axis-with-matplotlib\">\n            dual Y axis line chart\n          </Link>\n          , but be mindful of the{' '}\n          <a href=\"https://www.data-to-viz.com/caveat/dual_axis.html\">\n            caveats\n          </a>{' '}\n          that go with it.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"120_Basic_lineplot1\"\n            caption=\"How to build a basic line chart with python from any kind of input format\"\n            linkTo=\"/120-line-chart-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"121_Custom_line_plot3\"\n            caption=\"How to customize the matplotlib line plot appearance: width, stroke, color, style..\"\n            linkTo=\"/121-line-chart-customization\"\n          />\n          <ChartImageContainer\n            imgName=\"basic-time-series-with-matplotlib\"\n            caption=\"How to deal with the date format. How to represent those dates properly on the X axis.\"\n            linkTo=\"/basic-time-series-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"line-chart-dual-y-axis-with-matplotlib1\"\n            caption=\"How to build a dual Y axis line chart to display 2 series with different units.\"\n            linkTo=\"/line-chart-dual-y-axis-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"area-fill-between-two-lines-in-matplotlib\"\n            caption=\"Fill the gap between 2 line charts\"\n            linkTo=\"/area-fill-between-two-lines-in-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"516-line-chart-with-annotations\"\n            caption=\"Add annotation on top of a matplotlib line chart\"\n            linkTo=\"/516-line-chart-with-annotations\"\n          />\n          <ChartImageContainer\n            imgName=\"525-line-chart-log-transform\"\n            caption=\"How to apply a log transform to the Y scale of the line chart\"\n            linkTo=\"/525-line-chart-log-transform\"\n          />\n          <ChartImageContainer\n            imgName=\"585-legend-for-categorical-data-matplotlib-3\"\n            caption=\"Add label on each line of a line chart with matplotlib\"\n            linkTo=\"/585-legend-for-categorical-data-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <FunctionExploration funDetails={plot} />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Multiple groups\">\n          <Matplotlib />\n          Line chart with several groups (<code>Matplotlib</code>)\n        </h2>\n        <p>\n          A line chart with multiple groups allows to show the evolution of{' '}\n          <b>several items</b> on the same figure.{' '}\n        </p>\n        <p>\n          It is powerful but can quickly turn into a{' '}\n          <a href=\"https://www.data-to-viz.com/caveat/spaghetti.html\">\n            spaghetti chart\n          </a>\n          : when too many lines are displayed they get cluttered and{' '}\n          <b>hard to read</b>. Moreover, make sure to use{' '}\n          <Link href=\"/123-highlight-a-line-in-line-plot\">inline labeling</Link>{' '}\n          instead of a side legend that is very annoying to read.\n        </p>\n        <p>\n          The examples below explain how to build a line chart with multiple\n          groups, and what are the <b>alternatives</b> to show your data a\n          better way.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"122_Multiple_line_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/122-multiple-lines-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"123_Highlight_a_line\"\n            caption=\"How to customize the matplotlib line plot appearance: width, stroke, color, style..\"\n            linkTo=\"/123-highlight-a-line-in-line-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"124_Spaghetti_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/124-spaghetti-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"125_Lineplot_small_multiple_v2\"\n            caption=\"Line chart and small multiple\"\n            linkTo=\"/125-small-multiples-for-line-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"125_Lineplot_small_multiple\"\n            caption=\"Line chart and small multiple (variation)\"\n            linkTo=\"/125-small-multiples-for-line-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"seaborn\">\n          <Seaborn />\n          Line chart with Seaborn\n        </h2>\n        <p>\n          <Link href=\"/seaborn\">Seaborn</Link> is another very good alternative\n          when it comes to create line charts in Python. It comes with a\n          powerful <code>lineplot()</code> function that does most of the work\n          for us.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"122_Multiple_line_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/122-multiple-lines-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"plotly\">\n          <Plotly />\n          Interactive line chart with plotly\n        </h2>\n        <p>\n          If you are looking for an <b>interactive</b> version of a line chart\n          with Python, <Link href=\"/plotly\">plotly</Link> is definitely the\n          library you need.\n        </p>\n        <p>\n          Its API is very straightforward to understand, and the output allows\n          to <b>zoom</b> on the chart and have <b>tooltip</b> for markers:\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"514-interactive-line-chart-plotly-1\"\n            caption=\"Basic interactive line chart with plotly\"\n            linkTo=\"/514-interactive-line-chart-plotly\"\n          />\n          <ChartImageContainer\n            imgName=\"514-interactive-line-chart-plotly-2\"\n            caption=\"How to customize the appearance of a plotly line chart\"\n            linkTo=\"/514-interactive-line-chart-plotly\"\n          />\n          <ChartImageContainer\n            imgName=\"514-interactive-line-chart-plotly-3\"\n            caption=\"Interactive line chart with multiple groups\"\n            linkTo=\"/514-interactive-line-chart-plotly\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"pandas\">\n          <Pandas />\n          Line chart with Pandas\n        </h2>\n        <p>\n          <Link href=\"/pandas\">Pandas</Link> offers a simple and efficient way\n          to create line charts directly from <b>DataFrames</b>, eliminating the\n          need for complex data manipulation.\n        </p>\n        <p>\n          Its integration with <Link href=\"/matplotlib\">Matplotlib</Link>\n          allows for extensive customization, making it a versatile choice for\n          quick data visualization tasks.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"530-introduction-to-linechart-with-pandas\"\n            caption=\"Introduction to line chart with pandas\"\n            linkTo=\"/530-introduction-to-linechart-with-pandas\"\n          />\n          <ChartImageContainer\n            imgName=\"531-customizing-linecharts-with-pandas\"\n            caption=\"Customize your line charts with pandas\"\n            linkTo=\"/531-customizing-linecharts-with-pandas\"\n          />\n          <ChartImageContainer\n            imgName=\"532-linecharts-mutliple-groups-with-pandas\"\n            caption=\"Line charts with multiple variables or groups with pandas\"\n            linkTo=\"/532-linecharts-mutliple-groups-with-pandas\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Best\">\n          <Matplotlib />\n          Best python line chart examples\n        </h2>\n        <p>\n          The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>). The{' '}\n          <a href=\"https://python-graph-gallery.com\">Python graph gallery</a>{' '}\n          tries to display (or translate from R) some of the best creations and\n          explain how their source code works. If you want to display your work\n          here, please drop me a word or even better, submit a{' '}\n          <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">\n            Pull Request\n          </a>\n          !\n        </p>\n        <Row>\n          <Col xs={12} md={4}>\n            <Link to={'/web-line-chart-with-labels-at-line-end'}>\n              <ChartImage\n                imgName={'web-line-chart-with-labels-at-line-end'}\n                caption={\n                  'How to add labels at the end of each line with matplotlib. Definitely better than using a legend!'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-time-series-and-facetting-with-matplotlib'}>\n              <ChartImage\n                imgName={'web-time-series-and-facetting-with-matplotlib-square'}\n                caption={\n                  'Display 2 line charts and fill the area between both. Also uses faceting to split by groups.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-highlighted-lineplot-with-faceting'}>\n              <ChartImage\n                imgName={'web-highlighted-lineplot-with-faceting'}\n                caption={\n                  'A multipanel connected scatterplot, with several groups displayed and one highlighted per panel.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-lineplots-and-area-chart-the-economist'}>\n              <ChartImage\n                imgName={'web-lineplots-and-area-chart-the-economist-square1'}\n                caption={\n                  \"Learn how to mimick The Economist's style with a figure combining both a line and an area chart.\"\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-multiple-lines-and-panels'}>\n              <ChartImage\n                imgName={'web-multiple-lines-and-panels'}\n                caption={\n                  'Multiple grouped line charts with a beautiful color palette and customized title and annotation.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-line-chart-small-multiple'}>\n              <ChartImage\n                imgName={'web-line-chart-small-multiple-square'}\n                caption={\n                  'A beautiful line chart with small multiple made with Python and matplotlib'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={'/web-stacked-charts'}>\n              <ChartImage\n                imgName={'web-stacked-charts'}\n                caption={'A wordcloud combined with a line chart'}\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={'/web-small-multiple-with-highlights'}>\n              <ChartImage\n                imgName={'web-small-multiple-with-highlights'}\n                caption={'Multiple line charts with highlights'}\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"evolution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","capitalize","s","charAt","toUpperCase","slice","FunctionExploration","_selectedParameterInf","funDetails","selectedParameter","setSelectedParameter","useState","selectedOpt","setSelectedOpt","selectedParameterInfo","parameters","selectedOptInfo","options","argumentButtons","map","item","i","Button","key","value","size","onClick","style","marginBottom","id","marginLeft","fontSize","href","docUrl","description","display","flexDirection","justifyContent","alignItems","gap","width","flexWrap","whiteSpace","Row","type","howToUse","opt","explanation","backgroundColor","CodeChunk","hasWhiteBackground","basicUsage","replace","post","img","SEO","title","seoDescription","keywords","lang","content","property","alphaHowToUse","colorHowToUse","zorderDescription","zorderHowToUse","hatchHowToUse","hueDescription","hueHowToUse","dataHowToUse","dataDescription","linestyleDescription","linestyleHowToUse","linewidthDescription","linewidthHowToUse","paletteDescription","paletteHowToUse","plot","trim","chartDescription","quickCode","Head","LinePlot","Layout","isTocEnabled","TitleAndDescription","chartType","Container","Spacing","Matplotlib","Seaborn","Plotly","Pandas","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}
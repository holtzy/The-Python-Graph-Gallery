{"version":3,"file":"component---src-pages-connected-scatter-plot-js-e7c62ee124a6a19f3907.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/pages/connected-scatter-plot.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta\n        property=\"og:title\"\n        content={title + ' | The Python Graph Gallery'}\n      />\n      <meta\n        property=\"og:image\"\n        content=\"https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true\"\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib, Seaborn } from '../components/MiscellaneousLogos';\nimport { Button, Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport ChartImage from '../components/ChartImage';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/connectedscatter.html'>connected scatterplot</a> is a <a href='https://python-graph-gallery.com/line-chart/'>line chart</a> where each data point is shown by a circle or any type of marker. This section explains how to build a connected scatterplot with <code>Python</code>, using both the <code>Matplotlib</code> and the <code>Seaborn</code> libraries.</p>\";\n\nconst quickCode = `# libraries\n  import matplotlib.pyplot as plt\n  import numpy as np\n  import pandas as pd\n\n  # data\n  df = pd.DataFrame({\n      'x_axis': range(1,10),\n      'y_axis': np.random.randn(9)*80+range(1,10)\n  })\n\n  # plot\n  plt.plot('x_axis', 'y_axis', data=df, linestyle='-', marker='o')\n  plt.show()\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Connected Scatterplot\"\n    seoDesciption=\"A collection of connected scatterplot examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function ConnectedScatter() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Connected Scatterplot\"\n        description={chartDescription}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              Building a connected scatterplot with Python and Matplotlib is a\n              breeze thanks to the <code>plot()</code> function. The 2 first\n              argumenst are the X and Y values respectively, which can be stored\n              in a <code>pandas</code> data frame.\n            </p>\n            <p>\n              The <code>linestyle</code> and <code>marker</code> arguments allow\n              to use line and circles to make it look like a connected\n              scatterplot. It means everything is very close to a{' '}\n              <Link to=\"/line-chart\">line chart</Link> or a{' '}\n              <Link to=\"/scatter-plot\">scatterplot</Link> that are extensively\n              described in the gallery.\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/132-basic-connected-scatterplot'}>\n              <ChartImage\n                imgName=\"132_Matplotlib-connected-scatterplot\"\n                caption=\"Basic connected scatterplot with Python and Seaborn.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n        <br />\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Warning\">\n            &#9888;&#65039; Two types of connected scatterplot\n          </h2>\n          <p>\n            There are two types of connected scatterplot, and it often creates\n            confusion.\n          </p>\n          <p>\n            The <u>first</u> is simply a <Link to=\"/line-chart\">lineplot</Link>{' '}\n            with dots added on top of it. It takes as input 2 numeric variables\n            only. The <u>second</u> shows the relationship between 2 numeric\n            variables across time. It requires 3 numeric variables as input.\n          </p>\n          <p>\n            Confusing? Visit{' '}\n            <a href=\"https://www.data-to-viz.com/graph/connectedscatter.html\">\n              data-to-viz\n            </a>{' '}\n            to clarify..\n          </p>\n          <a href=\"https://www.data-to-viz.com/graph/connectedscatter.html\">\n            <Button size=\"sm\">Read more</Button>\n          </a>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\">\n          <Seaborn />\n          Connected scatterplot with <code>Seaborn</code>\n        </h2>\n        <p>\n          Building a connected scatterplot with <code>Seaborn</code> looks\n          pretty much the same as for a <Link to=\"/line-chart\">line chart</Link>\n          . It is made thanks to the <code>lineplot()</code> function.\n        </p>\n        <p>\n          Click the following images to get a long form tutorial on how to\n          create a <b>basic connected scatterplot</b> with Seaborn, how to draw{' '}\n          <b>multiple groups</b> and how to <b>customize the lines</b> and the{' '}\n          <b>markers</b>.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"508-connected-scatter-plot-seaborn-1\"\n            caption=\"Basic connected scatterplot with Python and Seaborn\"\n            linkTo=\"/508-connected-scatter-plot-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"508-connected-scatter-plot-seaborn-2\"\n            caption=\"Connected scatterplot with multiple groups (Seaborn)\"\n            linkTo=\"/508-connected-scatter-plot-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"508-connected-scatter-plot-seaborn-4\"\n            caption=\"Connected scatterplot: customize markers and lines (Seaborn)\"\n            linkTo=\"/508-connected-scatter-plot-seaborn\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib />\n          Connected scatterplot with <code>Matplotlib</code>\n        </h2>\n        <p>\n          As for <Link to=\"/scatter-plot\">scatterplots</Link>,{' '}\n          <code>Matplotlib</code> will help us build a bubble plot thanks to the\n          the <code>plt.scatter()</code> function. This function provides a{' '}\n          <code>s</code> parameter allowing to pass a third variable that will\n          be mapped to the markers size.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"106_seaborn_style_on_plt1\"\n            caption=\"Basic connected scatterplot with Python and Matplotlib\"\n            linkTo=\"/106-seaborn-style-on-matplotlib-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"194_matplotlib_subplot6\"\n            caption=\"Connected scatterplot on a split window\"\n            linkTo=\"/194-split-the-graphic-window-with-subplot\"\n          />\n          <ChartImageContainer\n            imgName=\"122_Multiple_line_plot\"\n            caption=\"How to customize line and markers with Matplotlib\"\n            linkTo=\"/122-multiple-lines-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"132-basic-connected-scatterplot\"\n            caption=\"Some more connected scatterplot examples with matplotlib\"\n            linkTo=\"/132-basic-connected-scatterplot\"\n          />\n        </Row>\n        <br />\n        <p>\n          Cheatsheet: line customization with <code>Matplotlib</code> and the{' '}\n          <code>linestyle</code> parameter.\n        </p>\n        <div style={{ maxWidth: '350px' }}>\n          <Link to={'/121-line-chart-customization'}>\n            <ChartImage\n              imgName={'121_Custom_line_plot4'}\n              caption={'Cheat sheet: line customization with matplotlib'}\n            />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib />\n          Connected scatterplot for 2 variables\n        </h2>\n        <p>\n          As explained above, a connected scatterplot can also be base on 3\n          numeric variables. It allows to study the evolution of 2 variables\n          (placed on the X and on the Y axis).\n        </p>\n        <div style={{ maxWidth: '550px' }}>\n          <Link to={'/connected-scatterplot-for-evolution'}>\n            <ChartImage\n              imgName={'connected-scatterplot-for-evolution'}\n              caption={\n                'Connected scatterplot to show the evolution of 2 variables'\n              }\n            />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Best\">\n          <Matplotlib />\n          Best python connected scatterplot examples\n        </h2>\n        <p>\n          The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>). The{' '}\n          <a href=\"https://python-graph-gallery.com\">Python graph gallery</a>{' '}\n          tries to display (or translate from R) some of the best creations and\n          explain how their source code works. If you want to display your work\n          here, please drop me a word or even better, submit a{' '}\n          <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">\n            Pull Request\n          </a>\n          !\n        </p>\n        <Row>\n          <Col xs={12} md={6}>\n            <Link to={'/web-text-repel-with-matplotlib'}>\n              <ChartImage\n                imgName={'web-text-repel-with-matplotlib-square'}\n                caption={\n                  'Learn how to use the adjustText library to add many labels with no overlaps.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={'/web-highlighted-lineplot-with-faceting'}>\n              <ChartImage\n                imgName={'web-highlighted-lineplot-with-faceting'}\n                caption={\n                  'A multipanel connected scatterplot, with several groups displayed and one highlighted per panel.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={8}>\n            <Link to={'/web-stacked-charts'}>\n              <ChartImage\n                imgName={'web-stacked-charts'}\n                caption={\n                  'A connected scatterplot with a word cloud for the background.'\n                }\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"correlation\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","SEO","title","seoDescription","keywords","lang","content","property","chartDescription","quickCode","Head","seoDesciption","ConnectedScatter","Layout","isTocEnabled","TitleAndDescription","description","Container","id","Row","CodeChunk","Spacing","href","Button","size","Seaborn","Matplotlib","style","maxWidth","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}
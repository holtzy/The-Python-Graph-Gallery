{"version":3,"file":"component---src-pages-waffle-chart-js-e7062fb3fd69fc027fd1.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/pages/waffle-chart.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/ChartImage.js"],"sourcesContent":["import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib } from '../components/MiscellaneousLogos';\nimport ChartImage from '../components/ChartImage';\nimport { Button, Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\n\nconst chartDescription = (\n  <>\n    <p>\n      A <a href=\"https://www.data-to-viz.com\">Waffle Chart</a> represents\n      categorical data using a <b>grid</b> of <b>equally sized squares</b> or\n      rectangles, each colored or shaded to depict different categories or\n      segments.\n    </p>\n    <p>\n      Python enables the creation of waffle charts through the{' '}\n      <code>PyWaffle</code>\n      library. This page offers numerous examples of charts built using the\n      PyWaffle library, ranging from <b>basic</b> implementations to more{' '}\n      <b>advanced</b> customizations.\n    </p>\n  </>\n);\n\nconst quickCode = `# useful libraries, including pyWaffle\nimport matplotlib.pyplot as plt\nfrom pywaffle import Waffle\n\n# create simple dummy data\ndata = {'Kevin': 10, 'Joseph': 7, 'Yan': 8}\n\n# Basic waffle\nplt.figure(\n  FigureClass=Waffle,\n  rows=5,\n  columns=20,\n  values=data,\n  legend={'loc': 'upper left', 'bbox_to_anchor': (1.05, 1)},\n)\nplt.show()\n`.trim();\n\nexport const Head = () => (\n  <SEO\n    title=\"Waffle chart\"\n    seoDescription=\"A collection of waffle chart examples made with Python and the PyWaffle library, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function Waffle() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Waffle chart\"\n        description={chartDescription}\n        chartType=\"waffle\"\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              The PyWaffle library allows to build a waffle chart easily thanks\n              to its <code>Waffle</code> class.\n            </p>\n            <p>\n              The input data is a <b>dictionary</b> with names as keys and\n              associated integer values.\n            </p>\n            <p>\n              The number of rows and columns can be set with the{' '}\n              <code>rows</code> and <code>columns</code> arguments:\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/503-waffle-chart-introduction'}>\n              <ChartImage\n                imgName=\"503-waffle-chart-introduction-1\"\n                caption=\"Most basic waffle chart with Python and the pyWaffle library.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          Waffle chart with <code>PyWaffle</code>\n        </h2>\n        <p>\n          The examples below should guide you through the <code>Waffle</code>{' '}\n          class usage. It starts with a very basic example and then provides\n          hints on how to apply usual customization like <b>using icons</b> or\n          showing <b>percentages</b> in the legend.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"503-waffle-chart-introduction-1\"\n            caption=\"Basic waffle chart\"\n            linkTo=\"/503-waffle-chart-introduction\"\n          />\n          <ChartImageContainer\n            imgName=\"503-waffle-chart-introduction-2\"\n            caption=\"Waffle chart with Icons instead of squares\"\n            linkTo=\"/503-waffle-chart-introduction\"\n          />\n          <ChartImageContainer\n            imgName=\"503-waffle-chart-introduction-3\"\n            caption=\"Waffle chart with proportions in the legend.\"\n            linkTo=\"/503-waffle-chart-introduction\"\n          />\n          <ChartImageContainer\n            imgName=\"541-waffle-chart-with-additionnal-grouping\"\n            caption=\"Waffle chart with additionnal grouping and title\"\n            linkTo=\"/541-waffle-chart-with-additionnal-grouping\"\n          />\n          <ChartImageContainer\n            imgName=\"558-waffle-bar-chart-1\"\n            caption=\"Simple stacked waffle bar chart\"\n            linkTo=\"/558-waffle-bar-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"558-waffle-bar-chart-2\"\n            caption=\"Vertically stacked waffle bar chart\"\n            linkTo=\"/558-waffle-bar-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"558-waffle-bar-chart-3\"\n            caption=\"Custom stacked waffle bar chart: legend, icons and colors\"\n            linkTo=\"/558-waffle-bar-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Best examples\">Best examples</h2>\n        <p>\n          The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>). The{' '}\n          <a href=\"https://python-graph-gallery.com\">Python graph gallery</a>{' '}\n          tries to display (or translate from R) some of the best creations and\n          explain how their source code works. If you want to display your work\n          here, please drop me a word or even better, submit a{' '}\n          <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">\n            Pull Request\n          </a>\n          !\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"web-waffle-with-small-multiples-square\"\n            caption=\"Small multiples of waffle charts with nice annotations\"\n            linkTo=\"/web-waffle-with-small-multiples\"\n          />\n          <ChartImageContainer\n            imgName=\"web-waffle-chart-as-share-square\"\n            caption=\"Horizontal waffle charts with custom fonts and colors\"\n            linkTo=\"/web-waffle-chart-as-share\"\n          />\n          <ChartImageContainer\n            imgName=\"web-waffle-chart-for-time-series-square\"\n            caption=\"Waffle chart as a time series with nice style\"\n            linkTo=\"/web-waffle-chart-for-time-series\"\n          />\n          <ChartImageContainer\n            imgName=\"web-waffle-chart-with-groups-evolution-square\"\n            caption=\"Waffle chart as a time series with clean labels and annotations\"\n            linkTo=\"/web-waffle-chart-with-groups-evolution\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"partOfAWhole\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta property=\"og:title\" content={title} />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n"],"names":["chartDescription","React","href","quickCode","trim","Head","SEO","title","seoDescription","Waffle","Layout","isTocEnabled","TitleAndDescription","description","chartType","Container","id","Row","className","Col","md","Link","to","ChartImage","imgName","caption","CodeChunk","Spacing","ChartImageContainer","linkTo","ChartFamilySection","chartFamily","Contact","_ref","keywords","image","lang","name","content","property","xs","allGifs","includes","useStaticQuery","allFile","edges","find","n","node","GatsbyImage","childImageSharp","gatsbyImageData","alt"],"sourceRoot":""}
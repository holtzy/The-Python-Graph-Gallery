{"version":3,"file":"component---src-pages-line-chart-js-44b83711cf1778b7e94a.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/pages/line-chart.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta\n        property=\"og:title\"\n        content={title + ' | The Python Graph Gallery'}\n      />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport {\n  Matplotlib,\n  Pandas,\n  Plotly,\n  Seaborn,\n} from '../components/MiscellaneousLogos';\nimport { Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport ChartImage from '../components/ChartImage';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\n\nconst chartDescription = (\n  <>\n    <p>\n      A <a href=\"https://www.data-to-viz.com/graph/line.html\">line chart</a>{' '}\n      displays the <b>evolution</b> of one or several <b>numeric variables</b>.\n      It is often used to represend <Link href=\"/timeseries\">time series</Link>.\n    </p>\n    <p>\n      The line chart is one of the <b>most common</b> chart type. As a result,\n      all the most common python data visualization libraries like{' '}\n      <code>matplotlib</code>, <code>seaborn</code> or <code>plotly</code> allow\n      to build it.\n    </p>\n    <p>\n      This page displays many line chart examples made with those tools. It goes\n      from <b>basic line chart tutorials</b> to highly customized,{' '}\n      <b>polished examples</b> 🔥.\n    </p>\n  </>\n);\n\nconst quickCode = `# libraries\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# create data\nvalues=np.cumsum(np.random.randn(1000,1))\n\n# use the plot function\nplt.plot(values)\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Line chart | Python & Matplotlib examples\"\n    seoDescription=\"A collection of line chart examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function LinePlot() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription title=\"Line Chart\" description={chartDescription} />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              Making a simple line chart with <code>matplotlib</code> is pretty\n              straightforward thanks to the <code>plot()</code> function.\n            </p>\n            <p>\n              If you provide only a series of values, it will consider that\n              these values are ordered and will use values from 1 to n to create\n              the X axis.🔥\n            </p>\n            <p>\n              For more control on the chart, see the dedicated section below.\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/120-line-chart-with-matplotlib'}>\n              <ChartImage\n                imgName=\"120_Basic_lineplot2\"\n                caption=\"A basic line chart made with python and matplotlib\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib />\n          Line chart with <code>Matplotlib</code>\n        </h2>\n        <p>\n          <code>Matplotlib</code> is a great fit to build line charts thanks to\n          its <code>plot()</code> function.{' '}\n        </p>\n        <p>\n          The <Link to=\"/120-line-chart-with-matplotlib\">first chart</Link> of\n          this section explains how to use <code>plot()</code> from any kind of\n          data input format. The{' '}\n          <Link to=\"/121-line-chart-customization\">next one</Link> goes deep\n          into chart customization (line width, color aspect and more).{' '}\n        </p>\n        <p>\n          Another common need is to build a{' '}\n          <Link to=\"/line-chart-dual-y-axis-with-matplotlib\">\n            dual Y axis line chart\n          </Link>\n          , but be mindful of the{' '}\n          <a href=\"https://www.data-to-viz.com/caveat/dual_axis.html\">\n            caveats\n          </a>{' '}\n          that go with it.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"120_Basic_lineplot1\"\n            caption=\"How to build a basic line chart with python from any kind of input format\"\n            linkTo=\"/120-line-chart-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"121_Custom_line_plot3\"\n            caption=\"How to customize the matplotlib line plot appearance: width, stroke, color, style..\"\n            linkTo=\"/121-line-chart-customization\"\n          />\n          <ChartImageContainer\n            imgName=\"basic-time-series-with-matplotlib\"\n            caption=\"How to deal with the date format. How to represent those dates properly on the X axis.\"\n            linkTo=\"/basic-time-series-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"line-chart-dual-y-axis-with-matplotlib1\"\n            caption=\"How to build a dual Y axis line chart to display 2 series with different units.\"\n            linkTo=\"/line-chart-dual-y-axis-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"area-fill-between-two-lines-in-matplotlib\"\n            caption=\"Fill the gap between 2 line charts\"\n            linkTo=\"/area-fill-between-two-lines-in-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"516-line-chart-with-annotations\"\n            caption=\"Add annotation on top of a matplotlib line chart\"\n            linkTo=\"/516-line-chart-with-annotations\"\n          />\n          <ChartImageContainer\n            imgName=\"525-line-chart-log-transform\"\n            caption=\"How to apply a log transform to the Y scale of the line chart\"\n            linkTo=\"/525-line-chart-log-transform\"\n          />\n          <ChartImageContainer\n            imgName=\"585-legend-for-categorical-data-matplotlib-3\"\n            caption=\"Add label on each line of a line chart with matplotlib\"\n            linkTo=\"/585-legend-for-categorical-data-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Multiple groups\">\n          <Matplotlib />\n          Line chart with several groups (<code>Matplotlib</code>)\n        </h2>\n        <p>\n          A line chart with multiple groups allows to show the evolution of{' '}\n          <b>several items</b> on the same figure.{' '}\n        </p>\n        <p>\n          It is powerful but can quickly turn into a{' '}\n          <a href=\"https://www.data-to-viz.com/caveat/spaghetti.html\">\n            spaghetti chart\n          </a>\n          : when too many lines are displayed they get cluttered and{' '}\n          <b>hard to read</b>. Moreover, make sure to use{' '}\n          <Link href=\"/123-highlight-a-line-in-line-plot\">inline labeling</Link>{' '}\n          instead of a side legend that is very annoying to read.\n        </p>\n        <p>\n          The examples below explain how to build a line chart with multiple\n          groups, and what are the <b>alternatives</b> to show your data a\n          better way.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"122_Multiple_line_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/122-multiple-lines-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"123_Highlight_a_line\"\n            caption=\"How to customize the matplotlib line plot appearance: width, stroke, color, style..\"\n            linkTo=\"/123-highlight-a-line-in-line-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"124_Spaghetti_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/124-spaghetti-plot\"\n          />\n          <ChartImageContainer\n            imgName=\"125_Lineplot_small_multiple_v2\"\n            caption=\"Line chart and small multiple\"\n            linkTo=\"/125-small-multiples-for-line-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"125_Lineplot_small_multiple\"\n            caption=\"Line chart and small multiple (variation)\"\n            linkTo=\"/125-small-multiples-for-line-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"seaborn\">\n          <Seaborn />\n          Line chart with Seaborn\n        </h2>\n        <p>\n          <Link href=\"/seaborn\">Seaborn</Link> is another very good alternative\n          when it comes to create line charts in Python. It comes with a\n          powerful <code>lineplot()</code> function that does most of the work\n          for us.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"122_Multiple_line_plot\"\n            caption=\"Line chart with multiple groups\"\n            linkTo=\"/122-multiple-lines-chart\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"plotly\">\n          <Plotly />\n          Interactive line chart with plotly\n        </h2>\n        <p>\n          If you are looking for an <b>interactive</b> version of a line chart\n          with Python, <Link href=\"/plotly\">plotly</Link> is definitely the\n          library you need.\n        </p>\n        <p>\n          Its API is very straightforward to understand, and the output allows\n          to <b>zoom</b> on the chart and have <b>tooltip</b> for markers:\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"514-interactive-line-chart-plotly-1\"\n            caption=\"Basic interactive line chart with plotly\"\n            linkTo=\"/514-interactive-line-chart-plotly\"\n          />\n          <ChartImageContainer\n            imgName=\"514-interactive-line-chart-plotly-2\"\n            caption=\"How to customize the appearance of a plotly line chart\"\n            linkTo=\"/514-interactive-line-chart-plotly\"\n          />\n          <ChartImageContainer\n            imgName=\"514-interactive-line-chart-plotly-3\"\n            caption=\"Interactive line chart with multiple groups\"\n            linkTo=\"/514-interactive-line-chart-plotly\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"pandas\">\n          <Pandas />\n          Line chart with Pandas\n        </h2>\n        <p>\n          <Link href=\"/pandas\">Pandas</Link> offers a simple and efficient way\n          to create line charts directly from <b>DataFrames</b>, eliminating the\n          need for complex data manipulation.\n        </p>\n        <p>\n          Its integration with <Link href=\"/matplotlib\">Matplotlib</Link>\n          allows for extensive customization, making it a versatile choice for\n          quick data visualization tasks.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"530-introduction-to-linechart-with-pandas\"\n            caption=\"Introduction to line chart with pandas\"\n            linkTo=\"/530-introduction-to-linechart-with-pandas\"\n          />\n          <ChartImageContainer\n            imgName=\"531-customizing-linecharts-with-pandas\"\n            caption=\"Customize your line charts with pandas\"\n            linkTo=\"/531-customizing-linecharts-with-pandas\"\n          />\n          <ChartImageContainer\n            imgName=\"532-linecharts-mutliple-groups-with-pandas\"\n            caption=\"Line charts with multiple variables or groups with pandas\"\n            linkTo=\"/532-linecharts-mutliple-groups-with-pandas\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Best\">\n          <Matplotlib />\n          Best python line chart examples\n        </h2>\n        <p>\n          The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>). The{' '}\n          <a href=\"https://python-graph-gallery.com\">Python graph gallery</a>{' '}\n          tries to display (or translate from R) some of the best creations and\n          explain how their source code works. If you want to display your work\n          here, please drop me a word or even better, submit a{' '}\n          <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">\n            Pull Request\n          </a>\n          !\n        </p>\n        <Row>\n          <Col xs={12} md={4}>\n            <Link to={'/web-line-chart-with-labels-at-line-end'}>\n              <ChartImage\n                imgName={'web-line-chart-with-labels-at-line-end'}\n                caption={\n                  'How to add labels at the end of each line with matplotlib. Definitely better than using a legend!'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-time-series-and-facetting-with-matplotlib'}>\n              <ChartImage\n                imgName={'web-time-series-and-facetting-with-matplotlib-square'}\n                caption={\n                  'Display 2 line charts and fill the area between both. Also uses faceting to split by groups.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-highlighted-lineplot-with-faceting'}>\n              <ChartImage\n                imgName={'web-highlighted-lineplot-with-faceting'}\n                caption={\n                  'A multipanel connected scatterplot, with several groups displayed and one highlighted per panel.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-lineplots-and-area-chart-the-economist'}>\n              <ChartImage\n                imgName={'web-lineplots-and-area-chart-the-economist-square1'}\n                caption={\n                  \"Learn how to mimick The Economist's style with a figure combining both a line and an area chart.\"\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-multiple-lines-and-panels'}>\n              <ChartImage\n                imgName={'web-multiple-lines-and-panels'}\n                caption={\n                  'Multiple grouped line charts with a beautiful color palette and customized title and annotation.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to={'/web-line-chart-small-multiple'}>\n              <ChartImage\n                imgName={'web-line-chart-small-multiple-square'}\n                caption={\n                  'A beautiful line chart with small multiple made with Python and matplotlib'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={'/web-stacked-charts'}>\n              <ChartImage\n                imgName={'web-stacked-charts'}\n                caption={'A wordcloud combined with a line chart'}\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={'/web-small-multiple-with-highlights'}>\n              <ChartImage\n                imgName={'web-small-multiple-with-highlights'}\n                caption={'Multiple line charts with highlights'}\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"evolution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","SEO","title","seoDescription","keywords","lang","content","property","chartDescription","href","quickCode","Head","LinePlot","Layout","isTocEnabled","TitleAndDescription","description","Container","id","Row","CodeChunk","Spacing","Matplotlib","Seaborn","Plotly","Pandas","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}
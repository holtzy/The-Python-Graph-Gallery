{"version":3,"file":"component---src-pages-statistics-js-e5748fab7cfe0db15fcc.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/ElementChildren.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/ButtonGroup.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/ToggleButtonGroup.js","webpack://the-python-graph-gallery/./src/util/functionDescriptions.js","webpack://the-python-graph-gallery/./src/components/FunctionExploration.js","webpack://the-python-graph-gallery/./src/pages/statistics.js","webpack://the-python-graph-gallery/./node_modules/react-bootstrap/esm/ToggleButton.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import * as React from 'react';\n\n/**\n * Iterates through children that are typically specified as `props.children`,\n * but only maps over children that are \"valid elements\".\n *\n * The mapFunction provided index will be normalised to the components mapped,\n * so an invalid component would not increase the index.\n *\n */\nfunction map(children, func) {\n  let index = 0;\n  return React.Children.map(children, child => /*#__PURE__*/React.isValidElement(child) ? func(child, index++) : child);\n}\n\n/**\n * Iterates through children that are \"valid elements\".\n *\n * The provided forEachFunc(child, index) will be called for each\n * leaf child with the index reflecting the position relative to \"valid components\".\n */\nfunction forEach(children, func) {\n  let index = 0;\n  React.Children.forEach(children, child => {\n    if ( /*#__PURE__*/React.isValidElement(child)) func(child, index++);\n  });\n}\n\n/**\n * Finds whether a component's `children` prop includes a React element of the\n * specified type.\n */\nfunction hasChildOfType(children, type) {\n  return React.Children.toArray(children).some(child => /*#__PURE__*/React.isValidElement(child) && child.type === type);\n}\nexport { map, forEach, hasChildOfType };","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ButtonGroup = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  size,\n  vertical = false,\n  className,\n  role = 'group',\n  // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\n  as: Component = 'div',\n  ...rest\n}, ref) => {\n  const prefix = useBootstrapPrefix(bsPrefix, 'btn-group');\n  let baseClass = prefix;\n  if (vertical) baseClass = `${prefix}-vertical`;\n  return /*#__PURE__*/_jsx(Component, {\n    ...rest,\n    ref: ref,\n    role: role,\n    className: classNames(className, baseClass, size && `${prefix}-${size}`)\n  });\n});\nButtonGroup.displayName = 'ButtonGroup';\nexport default ButtonGroup;","import * as React from 'react';\nimport invariant from 'invariant';\nimport { useUncontrolled } from 'uncontrollable';\nimport chainFunction from './createChainedFunction';\nimport { map } from './ElementChildren';\nimport ButtonGroup from './ButtonGroup';\nimport ToggleButton from './ToggleButton';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst ToggleButtonGroup = /*#__PURE__*/React.forwardRef((props, ref) => {\n  const {\n    children,\n    type = 'radio',\n    name,\n    value,\n    onChange,\n    vertical = false,\n    ...controlledProps\n  } = useUncontrolled(props, {\n    value: 'onChange'\n  });\n  const getValues = () => value == null ? [] : [].concat(value);\n  const handleToggle = (inputVal, event) => {\n    if (!onChange) {\n      return;\n    }\n    const values = getValues();\n    const isActive = values.indexOf(inputVal) !== -1;\n    if (type === 'radio') {\n      if (!isActive) onChange(inputVal, event);\n      return;\n    }\n    if (isActive) {\n      onChange(values.filter(n => n !== inputVal), event);\n    } else {\n      onChange([...values, inputVal], event);\n    }\n  };\n  !(type !== 'radio' || !!name) ? process.env.NODE_ENV !== \"production\" ? invariant(false, 'A `name` is required to group the toggle buttons when the `type` ' + 'is set to \"radio\"') : invariant(false) : void 0;\n  return /*#__PURE__*/_jsx(ButtonGroup, {\n    ...controlledProps,\n    ref: ref,\n    vertical: vertical,\n    children: map(children, child => {\n      const values = getValues();\n      const {\n        value: childVal,\n        onChange: childOnChange\n      } = child.props;\n      const handler = e => handleToggle(childVal, e);\n      return /*#__PURE__*/React.cloneElement(child, {\n        type,\n        name: child.name || name,\n        checked: values.indexOf(childVal) !== -1,\n        onChange: chainFunction(childOnChange, handler)\n      });\n    })\n  });\n});\nexport default Object.assign(ToggleButtonGroup, {\n  Button: ToggleButton\n});","export const functionDescriptions = {\n    kdeplot: {\n        description: '',\n        docUrl: 'https://seaborn.pydata.org/generated/seaborn.kdeplot.html',\n        basicUsage: '',\n        parameters: [\n            { name: \"fill\", description: 'color under the curve', type: 'boolean', relatedChart: '70_deffffed' },\n            { name: \"bw\", description: 'control how density is computed', type: 'boolean', relatedChart: '70_deffffed' },\n            { name: \"color\", description: 'control the color', type: 'boolean', relatedChart: '70_deffffed' }\n        ]\n    },\n    violin: {\n        description: '',\n        docUrl: 'https://seaborn.pydata.org/generated/seaborn.violinplot.html',\n        basicUsage: '',\n        parameters: [\n            { name: \"width\", description: 'color under the curve', type: 'boolean', relatedChart: '70_deffffed' },\n            { name: \"bw\", description: 'control how density is computed', type: 'boolean', relatedChart: '70_deffffed' },\n            { name: \"color\", description: 'controls the color', type: 'string', relatedChart: '70_deffffed' }\n        ]\n    }\n}\n\n\n","import { Link } from \"gatsby\";\nimport React, { useState } from \"react\";\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\nimport { functionDescriptions } from \"../util/functionDescriptions\";\nimport \"./functionExploration.css\";\n\nconst capitalize = (s) => {\n  if (typeof s !== \"string\") return \"\";\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport default function FunctionExploration({ functionName }) {\n  // Get the right function\n  const functionInfo = functionDescriptions[functionName];\n\n  // Get the right parameter\n  const [selectedParameter, setSelectedParameter] = useState(\n    functionInfo.parameters[0].name\n  );\n  const [someString, setSomeString] = useState(\"hello\");\n  const selectedParameterInfo = functionInfo.parameters.filter(\n    (param) => param.name === selectedParameter\n  )[0];\n\n  return (\n    <>\n      <h2 id={capitalize(functionName + \"()\" + \" details\")}>\n        &#128270; <code>{functionName}</code> function parameters\n        <a\n          style={{ marginLeft: \"15px\", fontSize: \"14px\" }}\n          href={functionInfo.docUrl}\n        >\n          &rarr; see full doc\n        </a>\n      </h2>\n\n      <ToggleButtonGroup\n        type=\"radio\"\n        size=\"sm\"\n        name=\"functionParameter\"\n        value={selectedParameter}\n        onChange={(value) => setSelectedParameter(value)}\n      >\n        {functionInfo.parameters.map((item, i) => (\n          <ToggleButton\n            key={i}\n            // variant=\"secondary\"\n            className={\"functionButton\"}\n            id={`functionParameter-${item.name}`}\n            value={item.name}\n          >\n            {item.name}\n          </ToggleButton>\n        ))}\n      </ToggleButtonGroup>\n      <div>\n        <code>string</code>\n        <span>&rarr; {selectedParameterInfo.description}</span>\n      </div>\n      {/* <div style={{ paddingLeft: \"6px\", fontSize: \"14px\" }}><Link to={selectedParameterInfo.relatedChart}>check a chart using it</Link></div> */}\n      <br />\n      <br />\n    </>\n  );\n}\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib } from '../components/MiscellaneousLogos';\nimport { Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport ChartImage from '../components/ChartImage';\nimport FunctionExploration from '../components/FunctionExploration';\nimport Spacing from '../components/Spacing';\n\nconst chartDescription = (\n  <>\n    <p>\n      Python is not only great at data visualization, but it is also powerful\n      for running <b>statistical analysis</b>, providing a comprehensive toolkit\n      for both beginners and seasoned statisticians to extract meaningful\n      insights from complex datasets.\n    </p>\n    <p>\n      This section shows how to visualize the results of your statistical\n      analysis, like Principal Component Analysis (<b>PCA</b>),{' '}\n      <b>linear modeling</b>, ANOVA, t-tests and more.\n    </p>\n    <p>\n      It does not focus on how to run the test, but on how to{' '}\n      <b>make clean output</b>\n      to present your findings in a appealing manner.\n    </p>\n  </>\n);\n\nconst quickCode = `# library & dataset\nimport seaborn as sns\ndf = sns.load_dataset('iris')\n\n# plot\nsns.violinplot(x=df[\"species\"], y=df[\"sepal_length\"])\n`;\n\nexport default function ViolinPlot() {\n  return (\n    <Layout\n      title=\"Visualizing statistics with Python\"\n      isTocEnabled\n      seoDescription=\"How to run statistical analysis in Python and visualize the results efficiently.\"\n    >\n      <TitleAndDescription\n        title=\"Visualizing statistics with Python\"\n        description={chartDescription}\n        chartType={'statistics'}\n      />\n\n      <Container>\n        <h2 id=\"PCA\">Principal Component Analysis (PCA)</h2>\n        <p>\n          Principal Component Analysis (<b>PCA</b>) is a transformative\n          technique widely used in the realm of data science to{' '}\n          <b>reduce the dimensionality</b> of large datasets while preserving as\n          much variance as possible. By transforming the original variables into\n          a new set of orthogonal components, PCA offers a concise yet\n          informative perspective, making it easier to visualize and analyze\n          high-dimensional data.\n        </p>\n        <p>\n          Python is a powerful tool when it comes to PCA thanks to its{' '}\n          <code>scikit-learn</code> library.\n        </p>\n        <p>\n          The following post teaches how to perform a PCA with{' '}\n          <code>scikit-learn</code> and focus on how to build clean outputs\n          using <Link href=\"/matplotlib\">matplotlib</Link>.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"515-intro-pca-graph-python-1\"\n            caption=\"The scree plot allows to check for the variance explained by each variable.\"\n            linkTo=\"/515-intro-pca-graph-python\"\n          />\n          <ChartImageContainer\n            imgName=\"515-intro-pca-graph-python-2\"\n            caption=\"Check the correlation circle plot to see the correlation between variables\"\n            linkTo=\"/515-intro-pca-graph-python\"\n          />\n          <ChartImageContainer\n            imgName=\"515-intro-pca-graph-python-3\"\n            caption=\"Use a scatterplot to check how samples are clusterized\"\n            linkTo=\"/515-intro-pca-graph-python\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"ANOVA\">Analysis of Variance(ANOVA)</h2>\n        <p>\n          Analysis of Variance (<b>ANOVA</b>) is a statistical method used to\n          test the differences between two or more group means to determine if\n          they are <b>statistically significant</b>.\n        </p>\n        <p>\n          It helps to identify whether the independent variable has a{' '}\n          <b>significant impact</b> on the dependent variable across different\n          groups, thereby allowing for the comparison of multiple groups\n          simultaneously.\n        </p>\n        <p>\n          Anova results are usually represented as a{' '}\n          <Link href=\"/boxplot\">boxplot</Link> or a{' '}\n          <Link href=\"/violin-plot\">violin plot</Link>, with each box\n          representing a specific group. The following examples show how to\n          create such boxplots, adding the ANOVA results, and offering some\n          variations.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"557-anova-visualization-with-matplotlib-1\"\n            caption=\"Box plot with ANOVA results on top\"\n            linkTo=\"/557-anova-visualization-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"557-anova-visualization-with-matplotlib-2\"\n            caption=\"Violin plot with ANOVA results on top\"\n            linkTo=\"/557-anova-visualization-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"557-anova-visualization-with-matplotlib-3\"\n            caption=\"Customized violin plot with ANOVA results on top\"\n            linkTo=\"/557-anova-visualization-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"web-ggbetweenstats-with-matplotlib-square\"\n            caption=\"A combination of a violin plot and a boxplot. Allows the comparison of several groups with statistical test results on top.\"\n            linkTo=\"/web-ggbetweenstats-with-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Hypothesis testing\">Hypothesis testing</h2>\n        <p>\n          <b>Statistical hypothesis testing</b> is a key technique in the realm\n          of data analysis.\n        </p>\n        <p>\n          The posts below explain how to display the results of your hypothesis\n          tests <b>on your graphs</b>, so as to represent your results in the\n          most elegant way possible.\n        </p>\n        <p>\n          We'll use the scipy library to run the tests and{' '}\n          <Link href=\"/matplotlib\">matplotlib</Link>\n          to display the results.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"551-student-t-test-visualization-1\"\n            caption=\"Histograms with p-value and t statistic\"\n            linkTo=\"/551-student-t-test-visualization\"\n          />\n          <ChartImageContainer\n            imgName=\"551-student-t-test-visualization-2\"\n            caption=\"Boxplots with p-value and t statistic\"\n            linkTo=\"/551-student-t-test-visualization\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"PCA\">Linear Regression</h2>\n        <p>\n          <b>Linear regression</b> is a statistical technique that aims to model\n          the relationship between a dependent variable and one or more\n          independent variables by fitting a linear equation to observed data.\n        </p>\n        <p>\n          With <code>scikit-learn</code> you can easily run a linear regression\n          and visualize the results with <code>matplotlib</code>.\n        </p>\n        <p>\n          The following post teaches how to perform a linear regression with{' '}\n          <code>scikit-learn</code> and focus on how to build clean outputs\n          using <Link href=\"/matplotlib\">matplotlib</Link>.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"556-visualize-linear-regression-1\"\n            caption=\"Linear regression with statistics on top of a scatterplot\"\n            linkTo=\"/556-visualize-linear-regression\"\n          />\n          <ChartImageContainer\n            imgName=\"556-visualize-linear-regression-2\"\n            caption=\"Customized linear regression with statistics on top of a scatterplot\"\n            linkTo=\"/556-visualize-linear-regression\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"general\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n","import classNames from 'classnames';\nimport * as React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nimport Button from './Button';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst noop = () => undefined;\nconst ToggleButton = /*#__PURE__*/React.forwardRef(({\n  bsPrefix,\n  name,\n  className,\n  checked,\n  type,\n  onChange,\n  value,\n  disabled,\n  id,\n  inputRef,\n  ...props\n}, ref) => {\n  bsPrefix = useBootstrapPrefix(bsPrefix, 'btn-check');\n  return /*#__PURE__*/_jsxs(_Fragment, {\n    children: [/*#__PURE__*/_jsx(\"input\", {\n      className: bsPrefix,\n      name: name,\n      type: type,\n      value: value,\n      ref: inputRef,\n      autoComplete: \"off\",\n      checked: !!checked,\n      disabled: !!disabled,\n      onChange: onChange || noop,\n      id: id\n    }), /*#__PURE__*/_jsx(Button, {\n      ...props,\n      ref: ref,\n      className: classNames(className, disabled && 'disabled'),\n      type: undefined,\n      role: undefined,\n      as: \"label\",\n      htmlFor: id\n    })]\n  });\n});\nToggleButton.displayName = 'ToggleButton';\nexport default ToggleButton;"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","ChartImageContainer","linkTo","Col","xs","md","Link","to","map","children","func","index","child","ButtonGroup","bsPrefix","size","vertical","role","as","Component","rest","ref","prefix","baseClass","displayName","ToggleButtonGroup","props","type","value","onChange","controlledProps","getValues","concat","values","childVal","childOnChange","checked","indexOf","e","inputVal","event","isActive","filter","handleToggle","Object","assign","Button","ToggleButton","functionDescriptions","kdeplot","description","docUrl","basicUsage","parameters","relatedChart","violin","capitalize","s","charAt","toUpperCase","slice","FunctionExploration","functionName","functionInfo","selectedParameter","setSelectedParameter","useState","someString","setSomeString","selectedParameterInfo","param","id","style","marginLeft","fontSize","href","item","i","key","chartDescription","ViolinPlot","Layout","title","isTocEnabled","seoDescription","TitleAndDescription","chartType","Container","Row","Spacing","ChartFamilySection","chartFamily","Contact","noop","disabled","inputRef","autoComplete","undefined","htmlFor"],"sourceRoot":""}
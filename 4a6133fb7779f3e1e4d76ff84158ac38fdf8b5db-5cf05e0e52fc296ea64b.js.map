{"version":3,"file":"4a6133fb7779f3e1e4d76ff84158ac38fdf8b5db-5cf05e0e52fc296ea64b.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/functions/drawarrow.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/functions/paramDescription.js","webpack://the-python-graph-gallery/./src/components/FunctionExploration.js"],"sourcesContent":["import React from 'react';\nimport { colorHowToUse, alphaHowToUse } from './paramDescription';\n\nconst name = 'fig_arrow()';\nconst description = (\n  <>\n    <p>\n      The <code>fig_arrow()</code> function of drawarrow <b>add an arrow</b> on\n      a given matplotlib figure. All the arguments described here also work with\n      the <code>ax_arrow()</code> function.\n    </p>\n  </>\n);\n\nconst docUrl = 'https://github.com/JosephBARBIERDARNAL/drawarrow';\n\n//\n//\n//\n//\n//\nconst param1 = {\n  name: 'tail_position',\n  description: (\n    <p>\n      Array-like of length 2 specifying the tail position of the arrow on the\n      figure.\n    </p>\n  ),\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8]\n)\n\nplt.show()\n`.trim(),\n  type: 'list',\n  howToUse: (\n    <p>\n      The first value is the x-axis position, and the second value is the y-axis\n      position.\n    </p>\n  ),\n  img: 'introduction-drawarrow-arg0-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param2 = {\n  name: 'head_position',\n  description: (\n    <p>\n      Array-like of length 2 specifying the head position of the arrow on the\n      figure.\n    </p>\n  ),\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  fig=fig\n)\n\nplt.show()\n`.trim(),\n  type: 'list',\n  howToUse: (\n    <p>\n      The first value is the x-axis position, and the second value is the y-axis\n      position.\n    </p>\n  ),\n  img: 'introduction-drawarrow-arg0-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param3 = {\n  name: 'radius',\n  description: <p>Curvature of the arrow (default to 0.1).</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  radius=0.5\n)\n\nplt.show()\n`.trim(),\n  type: 'number',\n  howToUse: (\n    <p>\n      It can be any value, but in most cases you want it to be between -1 and 1.\n    </p>\n  ),\n  img: 'introduction-drawarrow-arg2-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param4 = {\n  name: 'color',\n  description: <p>Color of the arrow</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  color='red'\n)\n\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: <div>{colorHowToUse}</div>,\n  img: 'introduction-drawarrow-arg3-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param16 = {\n  name: 'edgecolor',\n  description: <p>Arrow edge color</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  edgecolor='red'\n)\n\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: <div>{colorHowToUse}</div>,\n  img: 'introduction-drawarrow-arg14-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param17 = {\n  name: 'facecolor',\n  description: <p>Arrow head color</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  facecolor='red'\n)\n\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: <div>{colorHowToUse}</div>,\n  img: 'introduction-drawarrow-arg15-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param5 = {\n  name: 'width',\n  description: <p>Specify the width of the arrow.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  width=3\n)\n\nplt.show()\n`.trim(),\n  type: 'number',\n  howToUse: (\n    <div>\n      <p>\n        In most cases, you want the width of the tail to be between 1 and 10.\n      </p>\n    </div>\n  ),\n  img: 'introduction-drawarrow-arg4-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param6 = {\n  name: 'head_width',\n  description: <p>Width of the head of the arrow.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  head_width=40\n)\n\nplt.show()\n`.trim(),\n  type: 'number',\n  howToUse: (\n    <p>\n      Specify a value generally between 1 and 50 to modify the width of the head\n      of your arrow.\n    </p>\n  ),\n  img: 'introduction-drawarrow-arg5-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param7 = {\n  name: 'head_length',\n  description: <p>Length of the head of the arrow</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  head_length=50\n)\n\nplt.show()\n`.trim(),\n  type: 'number',\n  howToUse: (\n    <p>\n      The length of the head of the arrow is generally between 1 and 50. The\n      default value is 8.\n    </p>\n  ),\n  img: 'introduction-drawarrow-arg6-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param9 = {\n  name: 'mutation_scale',\n  description: <p>Value used to scale the entire arrow (head and body)</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\n\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  mutation_scale=4\n)\n\nfig_arrow(\n  tail_position=[0.2, 0.3],\n  head_position=[0.6, 0.8],\n  mutation_scale=10\n)\n\nplt.show()\n`.trim(),\n  type: 'number',\n  howToUse: (\n    <p>\n      This argument makes easier to change the size of the arrow by multiplying\n      all style properties by its value. If <code>mutation_scale=4</code>, the\n      arrow will be 4 times larger.\n    </p>\n  ),\n  img: 'introduction-drawarrow-arg7-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param10 = {\n  name: 'alpha',\n  description: <p>Opacity of the arrow</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\n\nfig_arrow(\n  tail_position=[0.2, 0.3],\n  head_position=[0.6, 0.8],\n  alpha=0.5,\n  color='black'\n)\n\nplt.show()\n`.trim(),\n  type: 'number',\n  howToUse: <div>{alphaHowToUse}</div>,\n  img: 'introduction-drawarrow-arg8-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param11 = {\n  name: 'invert',\n  description: <p>Whether to invert the curvature of the arrow</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\n\nfig_arrow(\n  tail_position=[0.4, 0.3],\n  head_position=[0.8, 0.8],\n  radius=0.4,\n  fig=fig\n)\n\nfig_arrow(\n  tail_position=[0.4, 0.3],\n  head_position=[0.8, 0.8],\n  radius=0.4,\n  invert=True,\n  fig=fig\n)\n\nplt.show()\n`.trim(),\n  type: 'bool',\n  howToUse: (\n    <p>\n      If set to <code>True</code>, the curvature of the arrow will be inverted.\n      Another way of doing so is to set the radius to a negative value.\n    </p>\n  ),\n  img: 'introduction-drawarrow-arg9-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param12 = {\n  name: 'fill_head',\n  description: <p>Whether or not to fill the arrowhead</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\n\nfig_arrow(\n  tail_position=[0.4, 0.3],\n  head_position=[0.8, 0.8],\n  fill_head=False\n)\n\nplt.show()\n`.trim(),\n  type: 'bool',\n  howToUse: (\n    <p>\n      If set to <code>True</code> (default), the head of the arrow will be\n      filled, empty otherwise.\n    </p>\n  ),\n  img: 'introduction-drawarrow-arg10-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param13 = {\n  name: 'double_headed',\n  description: <p>Whether or not to fill the arrowhead</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\n\nfig_arrow(\n  tail_position=[0.4, 0.3],\n  head_position=[0.8, 0.8],\n  double_headed=True\n)\n\nplt.show()\n`.trim(),\n  type: 'bool',\n  howToUse: (\n    <p>\n      If set to <code>True</code> (default to <code>False</code>), the arrow\n      will have a head at both the start and the end.\n    </p>\n  ),\n  img: 'introduction-drawarrow-arg11-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param14 = {\n  name: 'inflection_position',\n  description: (\n    <p>\n      Array-like of length 2 specifying the position of the inflection point of\n      the arrow on the figure.\n    </p>\n  ),\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\n\nfig_arrow(\n  tail_position=[0.4, 0.3],\n  head_position=[0.8, 0.8],\n  inflection_position=[0.5, 0.7]\n)\n\nplt.show()\n`.trim(),\n  type: 'list',\n  howToUse: (\n    <p>\n      Facultative parameter. The first value is the x-axis position, and the\n      second value is the y-axis position.\n    </p>\n  ),\n  img: 'introduction-drawarrow-arg12-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param15 = {\n  name: 'shadow_style',\n  description: <p>Dictionary of parameters for styling the arrow shadow.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\n\nfig_arrow(\n  tail_position=[0.4, 0.3],\n  head_position=[0.8, 0.8],\n  shadow_style={\n    'shadow_color': 'black',\n    'offset': (4,-4),\n    'alpha': 0.5\n  }\n)\n\nplt.show()\n`.trim(),\n  type: 'dict',\n  howToUse: (\n    <p>\n      If provided, a <b>shadow</b> will be displayed below the arrow. It accepts\n      the following parameters: <code>offset</code>, <code>shadow_color</code>{' '}\n      and <code>alpha</code>{' '}\n    </p>\n  ),\n  img: 'introduction-drawarrow-arg13-square',\n  post: 'drawarrow#Custom',\n};\n\nexport const fig_arrow = {\n  name,\n  description,\n  docUrl,\n  parameters: [\n    param1,\n    param2,\n    param14,\n    param3,\n    param4,\n    param16,\n    param17,\n    param12,\n    param13,\n    param5,\n    param6,\n    param7,\n    param9,\n    param10,\n    param11,\n    param15,\n  ],\n};\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta property=\"og:title\" content={title} />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from 'react';\n\nexport const alphaHowToUse = (\n  <p>\n    Values range from <code>0</code> (completely transparent) to <code>1</code>{' '}\n    (completely opaque).\n  </p>\n);\n\nexport const colorHowToUse = (\n  <p>\n    Can be a color name, a Hex code, or an RGB value.{' '}\n    <a href=\"/python-colors\">Learn more about colors.</a>\n  </p>\n);\n\nexport const zorderDescription = (\n  <p>Controls the drawing order of plot elements.</p>\n);\n\nexport const zorderHowToUse = (\n  <p>\n    Higher zorder values are drawn on top of lower values. This is useful when\n    you want certain elements to appear above others.\n  </p>\n);\n\nexport const hatchHowToUse = (\n  <p>\n    It must be in one of: <code>&apos;/&apos;</code>, <code>&apos;\\&apos;</code>\n    , <code>&apos;|&apos;</code>,<code>&apos;-&apos;</code>,{' '}\n    <code>&apos;+&apos;</code>, <code>&apos;x&apos;</code>,{' '}\n    <code>&apos;o&apos;</code>, <code>&apos;O&apos;</code>,\n    <code>&apos;.&apos;</code>, <code>&apos;*&apos;</code>\n  </p>\n);\n\nexport const hueDescription = (\n  <p>\n    Specify the dataset column to use for color encoding in the chart. It allows\n    for grouping and differentiating data points.\n  </p>\n);\n\nexport const hueHowToUse = (\n  <p>\n    Column name to use for color encoding in the chart. It's usually a\n    categorical variable.\n  </p>\n);\n\nexport const dataHowToUse = (\n  <div>\n    <p>\n      It just has to be a <code>pandas.DataFrame</code> (columns are variables),\n      <code>numpy.ndarray</code> (rows/columns are variables), or any\n      mapping/sequence (dictionaries/lists)\n    </p>\n    <p>\n      Supports both long-form (each variable in its own column) and wide-form\n      (variables in separate columns; reshaped internally).\n    </p>\n  </div>\n);\n\nexport const dataDescription = (\n  <p>\n    Dataframe-like (pandas, numpy, polars...) with the columns we want to plot.\n  </p>\n);\n\nexport const linestyleDescription = (\n  <p>Determines the style of the line in the plot.</p>\n);\n\nexport const linestyleHowToUse = (\n  <p>\n    Common values include '-' (solid), '--' (dashed), ':' (dotted), and '-.'\n    (dash-dot).\n  </p>\n);\n\nexport const linewidthDescription = <p>Sets the width of the plotted line.</p>;\n\nexport const linewidthHowToUse = (\n  <p>\n    Larger values create thicker lines. The default value is usually{' '}\n    <code>1</code>.\n  </p>\n);\n\nexport const paletteDescription = (\n  <p>\n    Defines colors for the <code>hue</code> semantic. It can be a list of colors\n    or a matplotlib colormap.\n  </p>\n);\n\nexport const paletteHowToUse = (\n  <div>\n    <p>\n      This parameter is used <b>in combination</b> with the <code>hue</code>{' '}\n      parameter and will a assign a different color to each category in{' '}\n      <code>hue</code>.\n    </p>\n    <p>\n      Moreover, the <a href=\"/introduction-to-pypalettes\">pypalettes library</a>{' '}\n      can help you find the best colors for your chart by providing access to\n      thousands of pre-made color palette.\n    </p>\n  </div>\n);\n","import { Link } from 'gatsby';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ChartImage from './ChartImage';\n\nimport './functionExploration.css';\nimport CodeChunk from './CodeChunk';\n\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport default function FunctionExploration({ funDetails }) {\n  const [selectedParameter, setSelectedParameter] = useState(0);\n  const [selectedOpt, setSelectedOpt] = useState(0);\n\n  if (!funDetails) {\n    return null;\n  }\n\n  const selectedParameterInfo = funDetails.parameters[selectedParameter];\n  const selectedOptInfo = selectedParameterInfo.options?.[selectedOpt];\n\n  const argumentButtons = (\n    <div>\n      {funDetails.parameters.map((item, i) => (\n        <Button\n          key={i}\n          value={item.name}\n          size=\"sm\"\n          onClick={() => setSelectedParameter(i)}\n          className={selectedParameter === i ? 'isButtonSelected' : ''}\n        >\n          {item.name}\n        </Button>\n      ))}\n    </div>\n  );\n\n  return (\n    <div style={{ marginBottom: 70 }}>\n      <h2 id={capitalize(funDetails.name + ' details')}>\n        &#128270; <code>{funDetails.name}</code> function parameters\n        <a\n          style={{ marginLeft: '15px', fontSize: '14px' }}\n          href={funDetails.docUrl}\n        >\n          &rarr; see full doc\n        </a>\n      </h2>\n\n      <h3>&rarr; Description</h3>\n      <p>{funDetails.description}</p>\n\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'start',\n          alignItems: 'baseline',\n          gap: 14,\n        }}\n      >\n        <h3 style={{ width: 'auto', flexWrap: 'nowrap', whiteSpace: 'nowrap' }}>\n          &rarr; Arguments\n        </h3>\n        {argumentButtons}\n      </div>\n\n      <Row>\n        <Col md={8}>\n          <div style={{ fontSize: 16 }}>\n            <p className=\"argumentSectionTitle\">Description</p>\n            <p className=\"little-text\">{selectedParameterInfo.description}</p>\n\n            <p className=\"argumentSectionTitle\">\n              Possible values &rarr; {'  '}\n              <span className=\"parameterTypePill\">\n                {selectedParameterInfo.type}\n              </span>\n            </p>\n            <p className=\"little-text\">{selectedParameterInfo.howToUse}</p>\n            {selectedParameterInfo.options && (\n              <>\n                <div\n                  style={{ display: 'flex', gap: 2, alignItems: 'baseline' }}\n                >\n                  {selectedParameterInfo.options.map((opt, i) => {\n                    return (\n                      <Button\n                        size=\"sm\"\n                        className={i === selectedOpt ? 'isButtonSelected' : ''}\n                        onClick={() => setSelectedOpt(i)}\n                      >\n                        {opt.name}\n                      </Button>\n                    );\n                  })}\n                </div>\n                <p>{selectedParameterInfo.options[selectedOpt].explanation}</p>\n              </>\n            )}\n\n            <p className=\"argumentSectionTitle\">Code Example</p>\n            <div style={{ backgroundColor: 'white' }}>\n              <CodeChunk hasWhiteBackground>\n                {selectedParameterInfo.options\n                  ? selectedParameterInfo.basicUsage.replace(\n                      'paramgoeshere',\n                      selectedParameterInfo.options[selectedOpt].name\n                    )\n                  : selectedParameterInfo.basicUsage}\n              </CodeChunk>\n            </div>\n          </div>\n        </Col>\n\n        <Col md={4}>\n          <br />\n          <Link to={'/' + selectedParameterInfo.post}>\n            <ChartImage\n              imgName={selectedOptInfo?.img || selectedParameterInfo.img}\n              caption={'More about the ' + funDetails.name + ' function.'}\n            />\n          </Link>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n"],"names":["description","React","param1","name","basicUsage","trim","type","howToUse","img","post","param2","param3","param4","colorHowToUse","param16","param17","param5","param6","param7","param9","param10","alphaHowToUse","param11","param12","param13","fig_arrow","docUrl","parameters","SEO","_ref","title","seoDescription","keywords","image","lang","content","property","allGifs","ChartImage","imgName","caption","includes","useStaticQuery","allFile","edges","find","n","node","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","href","zorderDescription","zorderHowToUse","hatchHowToUse","hueDescription","hueHowToUse","dataHowToUse","dataDescription","linestyleDescription","linestyleHowToUse","linewidthDescription","linewidthHowToUse","paletteDescription","paletteHowToUse","capitalize","s","charAt","toUpperCase","slice","FunctionExploration","_selectedParameterInf","funDetails","selectedParameter","setSelectedParameter","useState","selectedOpt","setSelectedOpt","selectedParameterInfo","selectedOptInfo","options","argumentButtons","map","item","i","Button","key","value","size","onClick","style","marginBottom","id","marginLeft","fontSize","display","flexDirection","justifyContent","alignItems","gap","width","flexWrap","whiteSpace","Row","Col","md","opt","explanation","backgroundColor","CodeChunk","hasWhiteBackground","replace","Link","to"],"sourceRoot":""}
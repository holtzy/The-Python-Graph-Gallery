{"version":3,"file":"component---src-pages-beeswarm-js-bdf07e43b30f14c7a5cc.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/functions/swarmplot.js","webpack://the-python-graph-gallery/./src/pages/beeswarm.js","webpack://the-python-graph-gallery/./src/functions/paramDescription.js","webpack://the-python-graph-gallery/./src/components/FunctionExploration.js"],"sourcesContent":["// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta property=\"og:title\" content={title} />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from 'react';\nimport {\n  colorHowToUse,\n  dataDescription,\n  dataHowToUse,\n  hueDescription,\n  hueHowToUse,\n  paletteDescription,\n  paletteHowToUse,\n  linewidthHowToUse,\n} from './paramDescription';\n\nconst name = 'swarmplot()';\nconst description = (\n  <>\n    <p>\n      The <code>swarmplot()</code> function from <a href=\"/seaborn\">seaborn</a>{' '}\n      creates a categorical scatter plot where each point is adjusted (swarmed)\n      so that it does not overlap with others. This plot is particularly useful\n      for visualizing the distribution of data points in small datasets while\n      avoiding data occlusion.\n    </p>\n  </>\n);\n\nconst docUrl = 'https://seaborn.pydata.org/generated/seaborn.swarmplot.html';\n//\n//\n//\n//\n//\nconst param1 = {\n  name: 'x',\n  description: (\n    <p>Variable name that specify which column to plot on the x-axis.</p>\n  ),\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndata = sns.load_dataset(\"tips\")\nsns.swarmplot(x=\"day\", y=\"total_bill\", data=data)\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: (\n    <p>\n      The simplest usage is to specify a column name (string) of a numerical\n      variable in <code>data</code>. Alternatively, you can omit{' '}\n      <code>data</code> and pass a vector-like object of numerical values to{' '}\n      <code>x</code>.\n    </p>\n  ),\n  img: '505-Introduction-to-swarm-plot-in-seaborn-1',\n  post: '505-introduction-to-swarm-plot-in-seaborn',\n};\n//\n//\n//\n//\n//\nconst param2 = {\n  name: 'y',\n  description: (\n    <p>Variable name that specify which column to plot on the y-axis.</p>\n  ),\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndata = sns.load_dataset(\"tips\")\nsns.swarmplot(x=\"total_bill\", y=\"day\", data=data)\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: (\n    <p>\n      The simplest usage is to specify a column name (string) of a numerical\n      variable in <code>data</code>. Alternatively, you can omit{' '}\n      <code>data</code> and pass a vector-like object of numerical values to{' '}\n      <code>y</code>.\n    </p>\n  ),\n  img: '505-Introduction-to-swarm-plot-in-seaborn-2',\n  post: '505-introduction-to-swarm-plot-in-seaborn',\n};\n//\n//\n//\n//\n//\nconst param3 = {\n  name: 'data',\n  description: <div>{dataDescription}</div>,\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndata = sns.load_dataset(\"tips\")\nsns.swarmplot(x=\"total_bill\", y=\"day\", data=data)\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: <div>{dataHowToUse}</div>,\n  img: '505-Introduction-to-swarm-plot-in-seaborn-2',\n  post: '505-introduction-to-swarm-plot-in-seaborn',\n};\n//\n//\n//\n//\n//\nconst param4 = {\n  name: 'hue',\n  description: <div>{hueDescription}</div>,\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndata = sns.load_dataset(\"tips\")\nsns.swarmplot(x=\"day\", y=\"total_bill\", hue=\"sex\", data=data)\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: <div>{hueHowToUse}</div>,\n  img: '505-Introduction-to-swarm-plot-in-seaborn-3',\n  post: '505-introduction-to-swarm-plot-in-seaborn',\n};\n//\n//\n//\n//\n//\nconst param5 = {\n  name: 'palette',\n  description: <div>{paletteDescription}</div>,\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndata = sns.load_dataset(\"tips\")\nsns.swarmplot(\n  x=\"day\",\n  y=\"total_bill\",\n  hue=\"sex\",\n  data=data,\n  palette=\"Set2\"\n)\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: <div>{paletteHowToUse}</div>,\n  img: 'tuto-swarmplot-3-square',\n  post: '505-introduction-to-swarm-plot-in-seaborn',\n};\n//\n//\n//\n//\n//\nconst param6 = {\n  name: 'size',\n  description: <p>Sets the size of the plot markers.</p>,\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndata = sns.load_dataset(\"tips\")\nsns.swarmplot(x=\"day\", y=\"total_bill\", data=data, size=8)\nplt.show()\n`.trim(),\n  type: 'float',\n  howToUse: (\n    <p>\n      Larger values result in larger markers. Useful for emphasizing certain\n      data points.\n    </p>\n  ),\n  img: 'tuto-swarmplot-2-square',\n  post: '505-introduction-to-swarm-plot-in-seaborn',\n};\n//\n//\n//\n//\n//\nconst param7 = {\n  name: 'edgecolor',\n  description: (\n    <p>\n      Color of the marker edges. It can be a single color or a list of colors\n      with the same length as the number of data points.\n    </p>\n  ),\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndata = sns.load_dataset(\"tips\")\nsns.swarmplot(\n  y=\"total_bill\",\n  x=\"sex\",\n  data=data,\n  edgecolor=\"black\",\n  linewidth=1.5\n)\nplt.show()\n`.trim(),\n  type: 'str',\n  howToUse: <div>{colorHowToUse}</div>,\n  img: 'tuto-swarmplot-4-square',\n  post: '505-introduction-to-swarm-plot-in-seaborn',\n};\n//\n//\n//\n//\n//\nconst param8 = {\n  name: 'linewidth',\n  description: <p>Width of the marker edges.</p>,\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ndata = sns.load_dataset(\"tips\")\nsns.swarmplot(\n  y=\"total_bill\",\n  x=\"sex\",\n  data=data,\n  edgecolor=\"black\",\n  linewidth=1.5\n)\nplt.show()\n`.trim(),\n  type: 'str',\n  howToUse: <div>{linewidthHowToUse}</div>,\n  img: 'tuto-swarmplot-4-square',\n  post: '505-introduction-to-swarm-plot-in-seaborn',\n};\n\nexport const swarmplot = {\n  name,\n  description,\n  docUrl,\n  parameters: [param1, param2, param3, param4, param5, param6, param7, param8],\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib, Seaborn } from '../components/MiscellaneousLogos';\nimport { Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport ChartImage from '../components/ChartImage';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\nimport { swarmplot } from '../functions/swarmplot';\nimport FunctionExploration from '../components/FunctionExploration';\n\nconst chartDescription = (\n  <>\n    <p>\n      A <a href=\"https://www.data-to-viz.com\">beeswarm plot</a> or{' '}\n      <b>swarmplot</b> is a type of data visualization that displays individual\n      data points in a way that they <b>don't overlap</b>, resulting in a\n      \"swarming\" effect that resembles a <b>swarm of bees</b>.\n    </p>\n    <p>\n      This chart type helps in revealing the <b>distribution</b> of the data\n      along a numeric variable, highlighting the density and variation of the\n      data more effectively than traditional{' '}\n      <a href=\"https://python-graph-gallery.com/scatter-plot/\">scatter plots</a>{' '}\n      or <a href=\"https://python-graph-gallery.com/boxplot/\">box plots</a>.\n    </p>\n    <p>\n      This section provides many beeswarm chart examples made with Python, using{' '}\n      <Link href=\"/seaborn/\">seaborn</Link> or{' '}\n      <Link href=\"/matplotlib/\">matplotlib</Link>. Examples cover the most\n      common use-cases, but also show how far in term of customization it is\n      possible to go.\n    </p>\n  </>\n);\n\nconst quickCode = `# Libraries\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\n# Data\nmy_variable = np.random.normal(loc=10, scale=5, size=100)\n\n# Plot\nsns.swarmplot(y=my_variable)\nplt.show() # Display the chart\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Python Beeswarm Gallery | Dozens of examples with code\"\n    seoDescription=\"A collection of beeswarm chart examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function Beeswarm() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Beeswarm\"\n        description={chartDescription}\n        chartType={'beeswarm'}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              <a href=\"https://python-graph-gallery.com/seaborn/\">Seaborn</a>{' '}\n              comes with a <code>swarmplot()</code> function that is made for\n              beeswarm charts.\n            </p>\n            <p>\n              It expects a <code>x</code> or a <code>y</code> argument that\n              provides a set of <b>numeric values</b>.\n            </p>\n            <p>\n              Many options exist. You can check the{' '}\n              <a href=\"https://seaborn.pydata.org/generated/seaborn.swarmplot.html\">\n                official documentation\n              </a>{' '}\n              or the examples below.\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/505-introduction-to-swarm-plot-in-seaborn'}>\n              <ChartImage\n                imgName=\"505-Introduction-to-swarm-plot-in-seaborn-1\"\n                caption=\"Most basic beeswarm plot built with Python and Seaborn\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Warning\">🤔 When to use a beeswarm chart?</h2>\n          <p>\n            The beeswarm chart is a very good alternative to the{' '}\n            <a href=\"https://python-graph-gallery.com/boxplot/\">boxplot</a> that{' '}\n            <a href=\"https://www.data-to-viz.com/caveat/boxplot.html\">\n              hides the underlying dataset\n            </a>\n            .\n          </p>\n          <p>\n            However, do not try to use it with a <b>very big</b> dataset.\n            Indeed, avoiding circle overlap will be possible with a small amount\n            of data points, but it will get impossible otherwise. In this case,\n            take a look to the{' '}\n            <a href=\"https://python-graph-gallery.com/violin-plot/\">\n              violin chart\n            </a>{' '}\n            instead.\n          </p>\n          <p>\n            To read more about this, visit{' '}\n            <a href=\"https://www.data-to-viz.com/caveat/boxplot.html\">\n              data-to-viz.com\n            </a>{' '}\n            that has a dedicated article.\n          </p>\n          <br />\n          <br />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\">\n          <Seaborn />\n          Beeswarm with <code>Seaborn</code>\n        </h2>\n        <p>\n          <code>Seaborn</code> is a python library allowing to make better\n          charts easily. The <code>swarmplot()</code> function should get you\n          started in minutes. The examples below aim at showcasing the various\n          possibilities this function offers.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"505-Introduction-to-swarm-plot-in-seaborn-1\"\n            caption=\"Most basic beeswarm plot built with Python and Seaborn\"\n            linkTo=\"/505-introduction-to-swarm-plot-in-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"505-Introduction-to-swarm-plot-in-seaborn-2\"\n            caption=\"Make your beeswarm plot horizontal by swapping axes\"\n            linkTo=\"/505-introduction-to-swarm-plot-in-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"505-Introduction-to-swarm-plot-in-seaborn-3\"\n            caption=\"Build a beeswarm plot for several groups in the dataset\"\n            linkTo=\"/505-introduction-to-swarm-plot-in-seaborn\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <FunctionExploration funDetails={swarmplot} />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib />\n          Beeswarm with <code>Matplotlib</code>\n        </h2>\n        <p>\n          Building a beeswarm plot with matplotlib requires more manual work\n          since <b>no built-in function exists for the job</b>.\n        </p>\n        <p>\n          The following blog-post explains how to build yours from scratch. The\n          function divides the data into <b>bins</b>, calculates the{' '}\n          <b>upper bounds</b> for each bin, and then arranges the data points in\n          each bin to create the <b>horizontal spread</b> in the plot, ensuring\n          they don't overlap.\n        </p>\n        <p>\n          Once the dot position is available, it is possible to render it using\n          <b>matplotlib</b>:\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"509-introduction-to-swarm-plot-in-matplotlib-1\"\n            caption=\"Most basic beeswarm plot built with Matplotlib\"\n            linkTo=\"/509-introduction-to-swarm-plot-in-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"509-introduction-to-swarm-plot-in-matplotlib-2\"\n            caption=\"Beeswarm chart with multiple groups\"\n            linkTo=\"/509-introduction-to-swarm-plot-in-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"509-introduction-to-swarm-plot-in-matplotlib-3\"\n            caption=\"Beeswarm and boxplot combination\"\n            linkTo=\"/509-introduction-to-swarm-plot-in-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Best\">\n          <Matplotlib />\n          Best beeswarm examples\n        </h2>\n        <p>\n          The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>). The{' '}\n          <a href=\"https://python-graph-gallery.com\">Python graph gallery</a>{' '}\n          tries to display (or translate from R) some of the best creations and\n          explain how their source code works. If you want to display your work\n          here, please drop me a word or even better, submit a{' '}\n          <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">\n            Pull Request\n          </a>\n          !\n        </p>\n        <Row>\n          <Col xs={12} md={6}>\n            <Link to={'/web-ggbetweenstats-with-matplotlib'}>\n              <ChartImage\n                imgName={'web-ggbetweenstats-with-matplotlib-square'}\n                caption={\n                  'A combination of a violin plot and a boxplot. Allows the comparison of several groups with statistical test results on top.'\n                }\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"distribution\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n","import React from 'react';\n\nexport const alphaHowToUse = (\n  <p>\n    Values range from <code>0</code> (completely transparent) to <code>1</code>{' '}\n    (completely opaque).\n  </p>\n);\n\nexport const colorHowToUse = (\n  <p>\n    Can be a color name, a Hex code, or an RGB value.{' '}\n    <a href=\"/python-colors\">Learn more about colors.</a>\n  </p>\n);\n\nexport const zorderDescription = (\n  <p>Controls the drawing order of plot elements.</p>\n);\n\nexport const zorderHowToUse = (\n  <p>\n    Higher zorder values are drawn on top of lower values. This is useful when\n    you want certain elements to appear above others.\n  </p>\n);\n\nexport const hatchHowToUse = (\n  <p>\n    It must be in one of: <code>&apos;/&apos;</code>, <code>&apos;\\&apos;</code>\n    , <code>&apos;|&apos;</code>,<code>&apos;-&apos;</code>,{' '}\n    <code>&apos;+&apos;</code>, <code>&apos;x&apos;</code>,{' '}\n    <code>&apos;o&apos;</code>, <code>&apos;O&apos;</code>,\n    <code>&apos;.&apos;</code>, <code>&apos;*&apos;</code>\n  </p>\n);\n\nexport const hueDescription = (\n  <p>\n    Specify the dataset column to use for color encoding in the chart. It allows\n    for grouping and differentiating data points.\n  </p>\n);\n\nexport const hueHowToUse = (\n  <p>\n    Column name to use for color encoding in the chart. It's usually a\n    categorical variable.\n  </p>\n);\n\nexport const dataHowToUse = (\n  <div>\n    <p>\n      It just has to be a <code>pandas.DataFrame</code> (columns are variables),\n      <code>numpy.ndarray</code> (rows/columns are variables), or any\n      mapping/sequence (dictionaries/lists)\n    </p>\n    <p>\n      Supports both long-form (each variable in its own column) and wide-form\n      (variables in separate columns; reshaped internally).\n    </p>\n  </div>\n);\n\nexport const dataDescription = (\n  <p>\n    Dataframe-like (pandas, numpy, polars...) with the columns we want to plot.\n  </p>\n);\n\nexport const linestyleDescription = (\n  <p>Determines the style of the line in the plot.</p>\n);\n\nexport const linestyleHowToUse = (\n  <p>\n    Common values include '-' (solid), '--' (dashed), ':' (dotted), and '-.'\n    (dash-dot).\n  </p>\n);\n\nexport const linewidthDescription = <p>Sets the width of the plotted line.</p>;\n\nexport const linewidthHowToUse = (\n  <p>\n    Larger values create thicker lines. The default value is usually{' '}\n    <code>1</code>.\n  </p>\n);\n\nexport const paletteDescription = (\n  <p>\n    Defines colors for the <code>hue</code> semantic. It can be a list of colors\n    or a matplotlib colormap.\n  </p>\n);\n\nexport const paletteHowToUse = (\n  <div>\n    <p>\n      This parameter is used <b>in combination</b> with the <code>hue</code>{' '}\n      parameter and will a assign a different color to each category in{' '}\n      <code>hue</code>.\n    </p>\n    <p>\n      Moreover, the <a href=\"/introduction-to-pypalettes\">pypalettes library</a>{' '}\n      can help you find the best colors for your chart by providing access to\n      thousands of pre-made color palette.\n    </p>\n  </div>\n);\n","import { Link } from 'gatsby';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ChartImage from './ChartImage';\n\nimport './functionExploration.css';\nimport CodeChunk from './CodeChunk';\n\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport default function FunctionExploration({ funDetails }) {\n  const [selectedParameter, setSelectedParameter] = useState(0);\n  const [selectedOpt, setSelectedOpt] = useState(0);\n\n  if (!funDetails) {\n    return null;\n  }\n\n  const selectedParameterInfo = funDetails.parameters[selectedParameter];\n  const selectedOptInfo = selectedParameterInfo.options?.[selectedOpt];\n\n  const argumentButtons = (\n    <div>\n      {funDetails.parameters.map((item, i) => (\n        <Button\n          key={i}\n          value={item.name}\n          size=\"sm\"\n          onClick={() => setSelectedParameter(i)}\n          className={selectedParameter === i ? 'isButtonSelected' : ''}\n        >\n          {item.name}\n        </Button>\n      ))}\n    </div>\n  );\n\n  return (\n    <div style={{ marginBottom: 70 }}>\n      <h2 id={capitalize(funDetails.name + ' details')}>\n        &#128270; <code>{funDetails.name}</code> function parameters\n        <a\n          style={{ marginLeft: '15px', fontSize: '14px' }}\n          href={funDetails.docUrl}\n        >\n          &rarr; see full doc\n        </a>\n      </h2>\n\n      <h3>&rarr; Description</h3>\n      <p>{funDetails.description}</p>\n\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'start',\n          alignItems: 'baseline',\n          gap: 14,\n        }}\n      >\n        <h3 style={{ width: 'auto', flexWrap: 'nowrap', whiteSpace: 'nowrap' }}>\n          &rarr; Arguments\n        </h3>\n        {argumentButtons}\n      </div>\n\n      <Row>\n        <Col md={8}>\n          <div style={{ fontSize: 16 }}>\n            <p className=\"argumentSectionTitle\">Description</p>\n            <p className=\"little-text\">{selectedParameterInfo.description}</p>\n\n            <p className=\"argumentSectionTitle\">\n              Possible values &rarr; {'  '}\n              <span className=\"parameterTypePill\">\n                {selectedParameterInfo.type}\n              </span>\n            </p>\n            <p className=\"little-text\">{selectedParameterInfo.howToUse}</p>\n            {selectedParameterInfo.options && (\n              <>\n                <div\n                  style={{ display: 'flex', gap: 2, alignItems: 'baseline' }}\n                >\n                  {selectedParameterInfo.options.map((opt, i) => {\n                    return (\n                      <Button\n                        size=\"sm\"\n                        className={i === selectedOpt ? 'isButtonSelected' : ''}\n                        onClick={() => setSelectedOpt(i)}\n                      >\n                        {opt.name}\n                      </Button>\n                    );\n                  })}\n                </div>\n                <p>{selectedParameterInfo.options[selectedOpt].explanation}</p>\n              </>\n            )}\n\n            <p className=\"argumentSectionTitle\">Code Example</p>\n            <div style={{ backgroundColor: 'white' }}>\n              <CodeChunk hasWhiteBackground>\n                {selectedParameterInfo.options\n                  ? selectedParameterInfo.basicUsage.replace(\n                      'paramgoeshere',\n                      selectedParameterInfo.options[selectedOpt].name\n                    )\n                  : selectedParameterInfo.basicUsage}\n              </CodeChunk>\n            </div>\n          </div>\n        </Col>\n\n        <Col md={4}>\n          <br />\n          <Link to={'/' + selectedParameterInfo.post}>\n            <ChartImage\n              imgName={selectedOptInfo?.img || selectedParameterInfo.img}\n              caption={'More about the ' + funDetails.name + ' function.'}\n            />\n          </Link>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n"],"names":["SEO","_ref","title","seoDescription","keywords","image","React","lang","name","content","property","ChartImageContainer","imgName","caption","linkTo","Col","xs","md","Link","to","ChartImage","allGifs","includes","useStaticQuery","allFile","edges","find","n","node","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","swarmplot","description","href","docUrl","parameters","basicUsage","trim","type","howToUse","img","post","dataDescription","dataHowToUse","hueDescription","hueHowToUse","paletteDescription","paletteHowToUse","colorHowToUse","linewidthHowToUse","chartDescription","quickCode","Head","Beeswarm","Layout","isTocEnabled","TitleAndDescription","chartType","Container","id","Row","CodeChunk","Spacing","Seaborn","FunctionExploration","funDetails","Matplotlib","ChartFamilySection","chartFamily","Contact","alphaHowToUse","zorderDescription","zorderHowToUse","hatchHowToUse","linestyleDescription","linestyleHowToUse","linewidthDescription","capitalize","s","charAt","toUpperCase","slice","_selectedParameterInf","selectedParameter","setSelectedParameter","useState","selectedOpt","setSelectedOpt","selectedParameterInfo","selectedOptInfo","options","argumentButtons","map","item","i","Button","key","value","size","onClick","style","marginBottom","marginLeft","fontSize","display","flexDirection","justifyContent","alignItems","gap","width","flexWrap","whiteSpace","opt","explanation","backgroundColor","hasWhiteBackground","replace"],"sourceRoot":""}
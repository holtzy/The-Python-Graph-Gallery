{"version":3,"file":"component---src-pages-python-colors-js-16b23b5bd25fb555c32c.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/pages/python-colors.js","webpack://the-python-graph-gallery/./static/asset/pypalettes.gif"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta property=\"og:title\" content={title} />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Button, Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport Spacing from '../components/Spacing';\nimport ChartImage from '../components/ChartImage';\nimport { SEO } from '../components/SEO';\nimport pypalettesGIF from '../../static/asset/pypalettes.gif';\n\nconst chartDescription = (\n  <>\n    <p>\n      <a href=\"https://python-graph-gallery.com/matplotlib\">Matplotlib</a>{' '}\n      offers extensive customization of plots, including a wide range of\n      features for working with colors.\n    </p>\n    <p>\n      Dealing with colors in Matplotlib can be challenging. This page is here to\n      address all your needs. It begins with tips on how to apply a{' '}\n      <b>single color</b> to a chart, and then discusses accessing{' '}\n      <b>color palettes</b> for both continuous and categorical data.\n    </p>\n    <p>\n      Finally, it introduces <code>pypalettes</code>, a Python library that\n      provides access to 2,500+ color palettes. It also includes a{' '}\n      <a href=\"https://python-graph-gallery.com/color-palette-finder/\">\n        color palette finder\n      </a>{' '}\n      tool that you are sure to love. 💜\n    </p>\n  </>\n);\n\nexport const Head = () => (\n  <SEO\n    title=\"Tips about colors with Python\"\n    seoDescription=\"How to manage colors in python charts\"\n  />\n);\n\nexport default function Colors() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Dealing with colors in matplotlib\"\n        description={chartDescription}\n        chartType=\"colors\"\n      />\n      {/* This section links to /available-colors-in-matplotlib */}\n      <Container>\n        <h2 id=\"Single color\">1️⃣ Applying a single Color</h2>\n        <p>\n          That's the most simple use-case. You just made a chart that has an\n          uniform default color and want to change it.\n        </p>\n        <p>\n          All <a href=\"/matplotlib\">Matplotlib</a> plotting function have a{' '}\n          <b>color</b> argument allowing to control the color.\n        </p>\n        <br />\n        <p>The color can be provided in multiple ways:</p>\n        <ul>\n          <li>\n            <b>Named colors:</b> Use the name of the color. For example,{' '}\n            <code>red</code>,<code>blue</code>, <code>green</code>.\n          </li>\n          <li>\n            <b>RGB colors:</b> Use a tuple of 3 values between 0 and 1. For\n            example, <code>(1, 0, 0)</code> for red. Note that a 4th value can\n            be provided for the opacity.\n          </li>\n          <li>\n            <b>Hexadecimal colors:</b> Use the hexadecimal code. For example,{' '}\n            <code>#FF0000</code> for red.\n          </li>\n        </ul>\n        <p>Code would look like this:</p>\n        <CodeChunk>{codeSingleColor}</CodeChunk>\n        <br />\n        <p>\n          We wrote a post that goes in-depth in this topic. It also lists all\n          the premade-colors.\n        </p>\n        <Link to=\"/available-colors-in-matplotlib\">\n          <Button size=\"md\">Learn more about single color</Button>\n        </Link>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Qualitative palette\">\n          2️⃣ Categorical / Qualitative color palettes\n        </h2>\n        <p>\n          Qualitative color schemes represent categorical variables, where the\n          possible values of the variable are <b>discrete</b> and{' '}\n          <b>unordered</b>.\n        </p>\n        <p>\n          <u>Example</u>: you want to color <code>group A</code> in blue,{' '}\n          <code>group B</code> in red and so on. This applies for{' '}\n          <Link href=\"/barplot\">barplots</Link>,{' '}\n          <Link href=\"/pie-plot\">pie</Link> charts,{' '}\n          <Link href=\"/scatter-plot\">scatterplot</Link> or any other chart that\n          can be split by <b>group</b>.\n        </p>\n\n        <h3>Method 1: use a matplotlib pre-made palette</h3>\n        <p>\n          Matplotlib provides a set of{' '}\n          <Link to=\"/categorical-color-palette\">\n            pre-made categorical palettes\n          </Link>{' '}\n          that are ready to be used.\n        </p>\n        <br />\n        <Row>\n          <Col md={6}>\n            <p>\n              Read <Link to=\"/categorical-color-palette\">this post</Link> to\n              find the entire list and to understand how to use those palettes.\n            </p>\n            <p>\n              Basically, you will have to create a color map using the{' '}\n              <code>get_cmap()</code> function and pass this color map to the{' '}\n              <code>color</code> argument of the function you're using.\n            </p>\n            <Link to=\"/categorical-color-palette\">\n              <Button size=\"md\">Read now</Button>\n            </Link>\n          </Col>\n          <Col md={6}>\n            <Link to=\"/categorical-color-palette\">\n              <ChartImage\n                imgName=\"categorical_palettes\"\n                caption=\"Available categorical color palettes in Matplotlib\"\n              />\n            </Link>\n          </Col>\n        </Row>\n\n        <h3>\n          Method 2: more palette with <code>pypalettes</code>\n        </h3>\n        <p>\n          Matplotlib only offers about a dozen{' '}\n          <Link to=\"/categorical-color-palette\">qualitative palettes</Link>. So\n          we've just created <code>pypalettes</code>, a python library that\n          offers 2500+ color palettes. The library is described in depth below.\n        </p>\n        <Link to=\"#pypalettes\">\n          <Button size=\"md\">More about pypalettes</Button>\n        </Link>\n\n        <h3>Method 3: provide an array of colors</h3>\n        <p>\n          You can pick some colors manually, and provide them as an array to the{' '}\n          <code>color</code> argument of the matplotlib function you're using.\n        </p>\n        <p>\n          I strongly advise <b>not</b> doing this though. It's time consuming\n          and finding colors that go well together is a struggle.{' '}\n        </p>\n        <Link to=\"#own_colors\">\n          <Button size=\"md\">Create my own palette</Button>\n        </Link>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Continuous palette\">3️⃣ Continuous color palettes</h2>\n        <p>\n          A continuous color palette is a <b>smooth gradient</b> of colors that\n          transitions seamlessly from one hue to another.\n        </p>\n        <p>\n          <u>Example</u>: you want to encode a value with a color. For instance,{' '}\n          <code>0</code> will be in light blue, and <code>100</code> will be in\n          dark blue. This applies for <Link href=\"/heatmap\">heatmap</Link>,{' '}\n          <Link href=\"/choropleth-map\">choropleth</Link> maps for example.\n        </p>\n        <h3>Method 1: use a matplotlib pre-made palette</h3>\n        <p>\n          <a href=\"/matplotlib\">Matplotlib</a> provides a set of pre-made\n          continuous palettes that are split into 2 main categories:\n        </p>\n        <ul>\n          <li>\n            <b>Sequential:</b> for representing data that ranges from low to\n            high values.\n          </li>\n          <li>\n            <b>Diverging:</b> for representing data that ranges from negative to\n            positive values.\n          </li>\n        </ul>\n\n        <br />\n\n        <Row>\n          <Col md={6}>\n            <Link to=\"/continuous-color-palette\">\n              <ChartImage\n                imgName=\"sequential_palettes\"\n                caption=\"Available sequential color palettes in Matplotlib\"\n              />\n            </Link>\n          </Col>\n          <Col md={6}>\n            <Link to=\"/continuous-color-palette\">\n              <ChartImage\n                imgName=\"diverging_palettes\"\n                caption=\"Available diverging color palettes in Matplotlib\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <br />\n        <p>\n          We've written <Link to=\"/continuous-color-palette\">a post</Link> that\n          will guide you through their usage, and provides an exhaustive list of\n          all the available continuous palettes.\n        </p>\n        <Link to=\"/continuous-color-palette\">\n          <Button size=\"md\">Continuous palettes in Matplotlib</Button>\n        </Link>\n\n        {/* This section links to the pypalette tutorial*/}\n        <h3>\n          Method 2: more palette with <code>pypalettes</code>\n        </h3>\n        <p>\n          <code>pypalettes</code> is a python library that offers 2500+ color\n          palettes. The library is described in depth below and will be useful\n          if you're not satisfied with matplotlib built-in options.\n        </p>\n        <Link to=\"#pypalettes\">\n          <Button size=\"md\">More about pypalettes</Button>\n        </Link>\n\n        <h3>Method 3: create your own</h3>\n        <p>Strongly discouraged: you will struggle to build something great.</p>\n        <p>But definitely doable. See the last section of this page!</p>\n        <Link to=\"#own_colors\">\n          <Button size=\"md\">Create my own palette</Button>\n        </Link>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"pypalettes\">\n          4️⃣ Need more palette options? Check <code>pypalettes</code>.\n        </h2>\n        <p>\n          <a href=\"/introduction-to-pypalettes\">PyPalettes</a> is a Python\n          library that gives access to 2500+ palettes.\n        </p>\n        <p>\n          It's hosted on{' '}\n          <a href=\"https://github.com/JosephBARBIERDARNAL/pypalettes\">github</a>\n          , you can install it with <code>PyPI</code>, and it's super easy to\n          use.\n        </p>\n        <h3>User-friendly API</h3>\n        <p>\n          <code>pypalettes</code> is pretty straightfoward to use. For instance,\n          this is how to use a palette called <code>Acadia</code> once the\n          library is installed:\n        </p>\n        <CodeChunk>{codePypalettes}</CodeChunk>\n        <p>\n          The pypalettes API is super intuitive, and we've written a{' '}\n          <a href=\"/introduction-to-pypalettes\">digestible post</a> to explain\n          how it works.\n        </p>\n        <Link to=\"/introduction-to-pypalettes\">\n          <Button size=\"sm\">Access 2500+ colors with pypalettes</Button>\n        </Link>\n        <br />\n        <h3>Color palette finder</h3>\n        <p>\n          Last but not least, we've also built a{' '}\n          <a href=\"https://python-graph-gallery.com/color-palette-finder/\">\n            color palette finder\n          </a>\n          .\n        </p>\n        <p>\n          It allows to quickly explore all the options, see them{' '}\n          <b>in action</b> on 7 different charts, export their code, simulate{' '}\n          <b>color blindness</b>, and so much more.\n        </p>\n        <p>\n          <br />\n        </p>\n        <a href=\"https://python-graph-gallery.com/color-palette-finder/\">\n          <img\n            src={pypalettesGIF}\n            alt=\"Color palette finder demo\"\n            style={{ maxWidth: '900px', width: '100%' }}\n          />\n        </a>\n        <p>\n          <br />\n        </p>\n        <a href=\"https://python-graph-gallery.com/color-palette-finder/\">\n          <Button size=\"sm\">Browse the palettes</Button>\n        </a>\n      </Container>\n      <Spacing />\n      <Container>\n        <h2 id=\"customization\">5️⃣ How to work with color maps</h2>\n        <Row className=\"align-items-center\">\n          <Col md={4}>\n            <p>\n              <a href=\"/matplotlib\">Matplotlib</a> provides a wide range of\n              colormaps but also a specific way of working with them. This post\n              will show you how to use colormaps in{' '}\n              <a href=\"/matplotlib\">Matplotlib</a> to enhance the readability of\n              your plots.\n            </p>\n            <Link to=\"/587-how-to-use-colormap\">\n              <Button size=\"sm\">Learn more</Button>\n            </Link>\n          </Col>\n          <Col md={8}>\n            <Link to={'/587-how-to-use-colormap'}>\n              <ChartImage\n                imgName=\"587-how-to-use-colormap\"\n                caption=\"Available colors in Matplotlib\"\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"own_colors\">6️⃣ Creating your own palette</h2>\n        <p>\n          If you're not satisfied with the <b>2500+ options</b> offered in the\n          previous sections, you can still create your own palette from scratch.\n        </p>\n        <p>We've built a full post on the topic, but here is a summary: </p>\n        <p>\n          <a href=\"/matplotlib\">Matplotlib</a> provides a few tools that, based\n          on a <b>list of colors</b> create a colormap with it. You can create\n          <b>both</b> categorical and continuous palettes.\n        </p>\n        <a href=\"/create-your-own-color-maps\">\n          <Button size=\"sm\">Create my own palette</Button>\n        </a>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"general\" />\n        </Container>\n      </div>\n      <Spacing />\n      <Container>\n        <Contact />\n      </Container>\n      <Spacing />\n    </Layout>\n  );\n}\n\nconst codeSingleColor = `# Hexadecimal color code\ncolor = \"#FF5733\"\n\n# Pre-defined color names\ncolor = \"skyblue\"\n\n# RGB tuple\ncolor = (0.1, 0.2, 0.5)\n\n# RGBA tuple\ncolor = (0.1, 0.2, 0.5, 0.4)\n\n# Use in a barplot\nfig, ax = plt.subplots()\nax.bar(x, y, color=color)\n`;\n\nconst codePypalettes = `# Import pypalettes\nfrom pypalettes import load_cmap\n\n# Load the palette called Acadia\ncmap = load_cmap(\"Acadia\")\n\n# Use the color map anywhere!\n`;\n","export default __webpack_public_path__ + \"static/pypalettes-30c04e6e9cc4378a11aa4ded22376216.gif\";"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","SEO","title","seoDescription","keywords","lang","content","property","chartDescription","href","Head","Colors","Layout","isTocEnabled","TitleAndDescription","description","chartType","Container","id","CodeChunk","codeSingleColor","Link","to","Button","size","Spacing","Row","Col","md","codePypalettes","src","pypalettesGIF","style","maxWidth","width","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}
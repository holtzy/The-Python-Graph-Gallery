{"version":3,"file":"component---src-pages-drawarrow-js-36d3c1cd33d0e157ebd0.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/components/FunctionExploration.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/functions/drawarrow.js","webpack://the-python-graph-gallery/./src/pages/drawarrow.js"],"sourcesContent":["import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import { Link } from 'gatsby';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ChartImage from './ChartImage';\n\nimport './functionExploration.css';\nimport CodeChunk from './CodeChunk';\n\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport default function FunctionExploration({ funDetails }) {\n  const [selectedParameter, setSelectedParameter] = useState(0);\n  const [selectedOpt, setSelectedOpt] = useState(0);\n\n  if (!funDetails) {\n    return null;\n  }\n\n  const selectedParameterInfo = funDetails.parameters[selectedParameter];\n  const selectedOptInfo = selectedParameterInfo.options?.[selectedOpt];\n\n  const argumentButtons = (\n    <div>\n      {funDetails.parameters.map((item, i) => (\n        <Button\n          key={i}\n          value={item.name}\n          size=\"sm\"\n          onClick={() => setSelectedParameter(i)}\n          className={selectedParameter === i ? 'isButtonSelected' : ''}\n        >\n          {item.name}\n        </Button>\n      ))}\n    </div>\n  );\n\n  return (\n    <div style={{ marginBottom: 70 }}>\n      <h2 id={capitalize(funDetails.name + '()' + ' details')}>\n        &#128270; <code>{funDetails.name}</code> function parameters\n        <a\n          style={{ marginLeft: '15px', fontSize: '14px' }}\n          href={funDetails.docUrl}\n        >\n          &rarr; see full doc\n        </a>\n      </h2>\n\n      <h3>&rarr; Description</h3>\n      <p>{funDetails.description}</p>\n\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'start',\n          alignItems: 'baseline',\n          gap: 14,\n        }}\n      >\n        <h3 style={{ width: 'auto', flexWrap: 'nowrap', whiteSpace: 'nowrap' }}>\n          &rarr; Arguments\n        </h3>\n        {argumentButtons}\n      </div>\n\n      <Row>\n        <Col md={8}>\n          <div style={{ fontSize: 16 }}>\n            <p className=\"argumentSectionTitle\">Description</p>\n            <p className=\"little-text\">{selectedParameterInfo.description}</p>\n\n            <p className=\"argumentSectionTitle\">\n              Possible values &rarr; {'  '}\n              <span className=\"parameterTypePill\">\n                {selectedParameterInfo.type}\n              </span>\n            </p>\n            <p className=\"little-text\">{selectedParameterInfo.howToUse}</p>\n            {selectedParameterInfo.options && (\n              <>\n                <div\n                  style={{ display: 'flex', gap: 2, alignItems: 'baseline' }}\n                >\n                  {selectedParameterInfo.options.map((opt, i) => {\n                    return (\n                      <Button\n                        size=\"sm\"\n                        className={i === selectedOpt ? 'isButtonSelected' : ''}\n                        onClick={() => setSelectedOpt(i)}\n                      >\n                        {opt.name}\n                      </Button>\n                    );\n                  })}\n                </div>\n                <p>{selectedParameterInfo.options[selectedOpt].explanation}</p>\n              </>\n            )}\n\n            <p className=\"argumentSectionTitle\">Code Example</p>\n            <div style={{ backgroundColor: 'white' }}>\n              <CodeChunk hasWhiteBackground>\n                {selectedParameterInfo.options\n                  ? selectedParameterInfo.basicUsage.replace(\n                      'paramgoeshere',\n                      selectedParameterInfo.options[selectedOpt].name\n                    )\n                  : selectedParameterInfo.basicUsage}\n              </CodeChunk>\n            </div>\n          </div>\n        </Col>\n\n        <Col md={4}>\n          <br />\n          <Link to={'/' + selectedParameterInfo.post}>\n            <ChartImage\n              imgName={selectedOptInfo?.img || selectedParameterInfo.img}\n              caption={'More about the ' + funDetails.name + ' function.'}\n            />\n          </Link>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta property=\"og:title\" content={title} />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from 'react';\n\nconst name = 'fig_arrow()';\nconst description = (\n  <>\n    <p>\n      The <code>fig_arrow()</code> function of drawarrow add an arrow on a given\n      matplotlib figure. You can customize any of its properties such as its\n      color, head/tail width, opacity...\n    </p>\n  </>\n);\n\nconst docUrl = 'https://github.com/JosephBARBIERDARNAL/drawarrow';\n\n//\n//\n//\n//\n//\nconst param1 = {\n  name: 'tail_position',\n  description: (\n    <p>\n      Array-like of length 2 specifying the tail position of the arrow on the\n      figure.\n    </p>\n  ),\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  fig=fig\n)\n\nplt.show()\n`.trim(),\n  type: 'list',\n  howToUse: (\n    <p>\n      The first value is the x-axis position, and the second value is the y-axis\n      position.\n    </p>\n  ),\n  img: 'introduction-drawarrow-1',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param2 = {\n  name: 'head_position',\n  description: (\n    <p>\n      Array-like of length 2 specifying the head position of the arrow on the\n      figure.\n    </p>\n  ),\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  fig=fig\n)\n\nplt.show()\n`.trim(),\n  type: 'list',\n  howToUse: (\n    <p>\n      The first value is the x-axis position, and the second value is the y-axis\n      position.\n    </p>\n  ),\n  img: 'introduction-drawarrow-1',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param3 = {\n  name: 'radius',\n  description: <p>Curvature of the arrow (default to 0.1).</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  radius=0.5,\n  fig=fig\n)\n\nplt.show()\n`.trim(),\n  type: 'number',\n  howToUse: (\n    <p>\n      It can be any value, but in most cases you want it to be between -1 and 1.\n    </p>\n  ),\n  img: 'tuto-drawarrow-1-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param4 = {\n  name: 'color',\n  description: <p>Color of the arrow</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  color='red',\n  fig=fig\n)\n\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: (\n    <p>\n      This can be any <a href=\"/python-colors\">matplotlib color</a>, hexadecimal\n      or rgb color.\n    </p>\n  ),\n  img: 'tuto-drawarrow-2-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param5 = {\n  name: 'tail_width',\n  description: <p>Specify the width of the tail of the arrow.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  tail_width=15,\n  fig=fig\n)\n\nplt.show()\n`.trim(),\n  type: 'number',\n  howToUse: (\n    <div>\n      <p>\n        An arrow has 2 main parts: the head and the tail. Everything that is not\n        the head is the tail.\n      </p>\n      <p>\n        In most cases, you want the width of the tail to be between 1 and 50.\n      </p>\n    </div>\n  ),\n  img: 'tuto-drawarrow-4-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param6 = {\n  name: 'head_width',\n  description: <p>Width of the head of the arrow.</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  head_width=50,\n  fig=fig\n)\n\nplt.show()\n`.trim(),\n  type: 'number',\n  howToUse: (\n    <p>\n      Specify a value generally between 1 and 50 to modify the width of the head\n      of your arrow.\n    </p>\n  ),\n  img: 'tuto-drawarrow-5-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param7 = {\n  name: 'head_length',\n  description: <p>Length of the head of the arrow</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  head_length=50,\n  fig=fig\n)\n\nplt.show()\n`.trim(),\n  type: 'number',\n  howToUse: (\n    <p>\n      The length of the head of the arrow is generally between 1 and 50. The\n      default value is 8.\n    </p>\n  ),\n  img: 'tuto-drawarrow-6-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param8 = {\n  name: 'hatch',\n  description: <p>Symbol of the pattern to fill the arrow</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots(dpi=150, figsize=(10,10))\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  hatch='*',\n  mutation_scale=20,\n  edgecolor='red',\n  facecolor='black',\n  fig=fig\n)\n\nplt.show()\n`.trim(),\n  type: 'string',\n  howToUse: (\n    <p>\n      <a href=\"/matplotlib\">Matplotlib</a> offers a variety of patterns:{' '}\n      <code>/</code>,<code>\\\\</code>, <code>|</code>, <code>-</code>,{' '}\n      <code>+</code>, <code>x</code>, <code>o</code>, <code>O</code>,{' '}\n      <code>.</code>, <code>*</code> that you can choose from.\n    </p>\n  ),\n  img: 'tuto-drawarrow-7-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param9 = {\n  name: 'mutation_scale',\n  description: <p>Value used to scale the entire arrow (head and body)</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots(dpi=150, figsize=(10,10))\n\nfig_arrow(\n  tail_position=[0.3, 0.3],\n  head_position=[0.8, 0.8],\n  mutation_scale=2,\n  fig=fig\n)\n\nfig_arrow(\n  tail_position=[0.2, 0.3],\n  head_position=[0.6, 0.8],\n  mutation_scale=10,\n  fig=fig\n)\n\nplt.show()\n`.trim(),\n  type: 'number',\n  howToUse: (\n    <p>\n      This argument makes easier to change the size of the arrow by multiplying\n      all style properties by its value. If <code>mutation_scale=4</code>, the\n      arrow will be 4 times larger.\n    </p>\n  ),\n  img: 'tuto-drawarrow-8-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param10 = {\n  name: 'alpha',\n  description: <p>Opacity of the arrow</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots(dpi=150, figsize=(10,10))\n\nfig_arrow(\n  tail_position=[0.2, 0.3],\n  head_position=[0.6, 0.8],\n  mutation_scale=10,\n  alpha=0.5,\n  fig=fig\n)\n\nplt.show()\n`.trim(),\n  type: 'number',\n  howToUse: (\n    <p>\n      This argument must be between 0 (completely transparent) and 1 (perfectly\n      opaque, default value).\n    </p>\n  ),\n  img: 'tuto-drawarrow-9-square',\n  post: 'drawarrow#Custom',\n};\n//\n//\n//\n//\n//\nconst param11 = {\n  name: 'invert',\n  description: <p>Whether to invert the curvature of the arrow</p>,\n  basicUsage: `\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots(dpi=150, figsize=(10,10))\n\nfig_arrow(\n  tail_position=[0.4, 0.3],\n  head_position=[0.8, 0.8],\n  mutation_scale=3,\n  radius=0.4,\n  fig=fig\n)\n\nfig_arrow(\n  tail_position=[0.4, 0.3],\n  head_position=[0.8, 0.8],\n  mutation_scale=3,\n  radius=0.4,\n  invert=True,\n  fig=fig\n)\n\nplt.show()\n`.trim(),\n  type: 'bool',\n  howToUse: (\n    <p>\n      If set to <code>True</code>, the curvature of the arrow will be inverted.\n      Another way of doing so is to set the radius to a negative value.\n    </p>\n  ),\n  img: 'tuto-drawarrow-10-square',\n  post: 'drawarrow#Custom',\n};\n\nexport const fig_arrow = {\n  name,\n  description,\n  docUrl,\n  parameters: [\n    param1,\n    param2,\n    param3,\n    param4,\n    param5,\n    param6,\n    param7,\n    param8,\n    param9,\n    param10,\n    param11,\n  ],\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport FunctionExploration from '../components/FunctionExploration';\nimport { fig_arrow } from '../functions/drawarrow';\nimport { Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport Spacing from '../components/Spacing';\nimport ChartImage from '../components/ChartImage';\nimport { SEO } from '../components/SEO';\n\nconst chartDescription = (\n  <>\n    <p>\n      <code>DrawArrow</code> is a library that allows to create arrows for your\n      matplotlib charts with ease.\n    </p>\n    <p>\n      It was created by <a href=\"https://barbierjoseph.com/\">Joseph Barbier</a>{' '}\n      in order to create curved, straight, thin, large or bizarre arrows in\n      matplotlib, in <b>any color, width and style you like</b>.\n    </p>\n  </>\n);\n\nexport const Head = () => (\n  <SEO\n    title=\"DrawArrow\"\n    seoDescription=\"An overview of the drawarrow library in Python\"\n  />\n);\n\nexport default function Post() {\n  return (\n    <Layout title=\"DrawArrow\">\n      <TitleAndDescription\n        title=\"DrawArrow: drawing arrows for matplotlib made easy\"\n        description={chartDescription}\n        chartType={'drawarrow'}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <p>\n          Before using drawarrow you need to <b>install</b> it. This can easily\n          be done with <code>pip</code>:\n        </p>\n        <br />\n        <CodeChunk>{codeInstall}</CodeChunk>\n        <br />\n        <Row className=\"align-items-center\">\n          <Col md={7}>\n            <p>\n              Matplotlib graphs have <strong>two main components</strong>:\n            </p>\n            <ul>\n              <li>the figure (the overall graph)</li>\n              <li>the axes (all the sub-graphs)</li>\n            </ul>\n            <p>\n              &rarr; <a href=\"/matplotlib/#Lexicon\">Learn more about it</a>\n            </p>\n            <p>\n              DrawArrow provides <b>2 simple functions</b>:\n              <ul>\n                <li>\n                  <code>fig_arrow()</code>: draw an arrow on a matplotlib{' '}\n                  <b>figure</b>\n                </li>\n                <li>\n                  <code>ax_arrow()</code>: draw an arrow on a matplotlib{' '}\n                  <b>axes</b>\n                </li>\n              </ul>\n            </p>\n            <p>\n              You basically just have to specify the head and tail positions to\n              have an arrow on your chart.\n            </p>\n          </Col>\n          <Col md={5}>\n            <Link to={'/573-introduction-scatterplot-plotnine'}>\n              <ChartImage\n                imgName=\"introduction-drawarrow-1\"\n                caption=\"Most basic arrow with drawarrow\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <FunctionExploration funDetails={fig_arrow} />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Axes\">Draw an arrow on an axes</h2>\n        <Row className=\"align-items-center\">\n          <Col md={7}>\n            <p>\n              Matplotlib graphs have <strong>two main components</strong>:\n            </p>\n            <ul>\n              <li>the figure (the overall graph)</li>\n              <li>the axes (all the sub-graphs)</li>\n            </ul>\n            <p>\n              &rarr; <a href=\"/matplotlib/#Lexicon\">Learn more about it</a>\n            </p>\n            <p>\n              The <code>ax_arrow()</code> function is designed to{' '}\n              <strong>draw arrows on an axes</strong>. It means that it&apos;s\n              using the <strong>same coordinate system</strong> as the plotted\n              data.\n            </p>\n          </Col>\n          <Col md={5}>\n            <ChartImage\n              imgName=\"tuto-drawarrow-1\"\n              caption=\"Most basic arrow with drawarrow\"\n            />\n          </Col>\n        </Row>\n        <CodeChunk>{axesCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Figure\">Draw an arrow on a figure</h2>\n        <Row className=\"align-items-center\">\n          <Col md={5}>\n            <ChartImage\n              imgName=\"tuto-drawarrow-2\"\n              caption=\"Most basic arrow with drawarrow\"\n            />\n          </Col>\n          <Col md={7}>\n            <p>\n              The <code>fig_arrow()</code> function is designed to{' '}\n              <b>draw arrows on a figure</b>: using the relative coordinate\n              system. The position (0,0) means the bottom left and (1,1) the top\n              right of the figure\n            </p>\n          </Col>\n        </Row>\n        <CodeChunk>{figCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Custom\">Customize the arrow</h2>\n        <Row className=\"align-items-center\">\n          <Col md={7}>\n            <p>\n              The arrow displayed is a <code>FancyArrowPatch</code>, a\n              specialized{' '}\n              <strong>\n                <a href=\"/matplotlib\">matplotlib</a> object\n              </strong>{' '}\n              for creating complex arrows. You can pass any additional arguments\n              for this object to <code>fig_arrow()</code> and{' '}\n              <code>ax_arrow()</code>.\n            </p>\n            <br />\n            <p>\n              The example below demonstrates some of the most useful options.\n            </p>\n          </Col>\n          <Col md={5}>\n            <ChartImage\n              imgName=\"tuto-drawarrow-3\"\n              caption=\"Most basic arrow with drawarrow\"\n            />\n          </Col>\n        </Row>\n        <CodeChunk>{customCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2>Gallery of examples</h2>\n        <p>\n          Here are some examples of what you can do with drawarrow. Click on the\n          images to see the code.\n        </p>\n        <Row>\n          <Col xs={12} md={4}>\n            <Link to=\"/web-map-with-custom-legend\">\n              <ChartImage\n                imgName={'web-map-with-custom-legend'}\n                caption={'Choropleth map with continuous palette'}\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to=\"/web-lollipop-with-colormap-and-arrow\">\n              <ChartImage\n                imgName={'web-lollipop-with-colormap-and-arrow-square'}\n                caption={'Lollipop chart with arrows'}\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={4}>\n            <Link to=\"/web-minimalist-area-chart\">\n              <ChartImage\n                imgName={'web-minimalist-area-chart-square'}\n                caption={'Minimalist style area chart'}\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2>Going further</h2>\n        <p>\n          You might be interested in\n          <ul>\n            <li>\n              the{' '}\n              <a href=\"https://github.com/JosephBARBIERDARNAL/drawarrow\">\n                {' '}\n                official github repo of drawarrow\n              </a>{' '}\n              (give it a star!)\n            </li>\n            <li>\n              how to draw an{' '}\n              <a href=\"/591-arrows-with-inflexion-point\">\n                arrow with an inflection point\n              </a>{' '}\n            </li>\n            <li>\n              how to create{' '}\n              <a href=\"/advanced-custom-annotations-matplotlib\">\n                beautiful annotation in matplotlib\n              </a>\n            </li>\n            <li>\n              how to work with{' '}\n              <a href=\"/pyfonts\">different fonts in matplotlib</a>\n            </li>\n          </ul>\n        </p>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"general\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n\nconst quickCode = `# Load drawarrow and matplotlib\nimport matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots()\n\nax.scatter(x=[1, 2, 3, 4, 5], y=[1, 2, 3, 4, 5], s=100)\n\nfig_arrow(\n  head_position=(0.5, 0.5),\n  tail_position=(0.2, 0.7),\n  color=\"red\"\n)\n\nplt.show()\n`;\n\nconst axesCode = `import matplotlib.pyplot as plt\nfrom drawarrow import ax_arrow\n\nfig, ax = plt.subplots(figsize=(10,10))\n\nax.scatter(x=[1, 5, 10], y=[5, 12, 3], s=300)\nax_arrow(\n   tail_position=(2, 8),\n   head_position=(9.5, 3),\n   ax=ax,\n   color=\"green\",\n   tail_width=10,\n   head_width=30,\n   head_length=30,\n   radius=0.4\n)\nplt.show()\n`;\n\nconst figCode = `import matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots(figsize=(10,10))\n\nax.scatter(x=[1, 5, 10], y=[5, 12, 3], s=300)\nfig_arrow(\n   tail_position=(0.2, 0.8),\n   head_position=(0.5, 0.3),\n   fig=fig,\n   color=\"red\",\n   tail_width=10,\n   head_width=30,\n   head_length=30,\n   radius=-0.4\n)\nplt.show()\n`;\n\nconst customCode = `import matplotlib.pyplot as plt\nfrom drawarrow import fig_arrow\n\nfig, ax = plt.subplots(figsize=(10,10))\n\nax.scatter(x=[1, 2, 3, 4, 5], y=[1, 2, 3.2, 4, 5], s=300)\n\nfig_arrow(\n   head_position=(0.48, 0.5),\n   tail_position=(0.2, 0.7),\n   fig=fig,\n   facecolor=\"#003049\",\n   edgecolor=\"#d62828\",\n   linewidth=1,\n   radius=1.2,\n   alpha=0.9,\n   hatch=\"O\",\n   tail_width=5,\n   head_width=20,\n   head_length=20,\n   mutation_scale=4\n)\n\nplt.show()\n`;\n\nconst codeInstall = `pip install drawarrow`;\n"],"names":["allGifs","ChartImage","_ref","imgName","caption","includes","React","image","useStaticQuery","allFile","edges","find","n","node","name","className","GatsbyImage","childImageSharp","gatsbyImageData","alt","capitalize","s","charAt","toUpperCase","slice","FunctionExploration","_selectedParameterInf","funDetails","selectedParameter","setSelectedParameter","useState","selectedOpt","setSelectedOpt","selectedParameterInfo","parameters","selectedOptInfo","options","argumentButtons","map","item","i","Button","key","value","size","onClick","style","marginBottom","id","marginLeft","fontSize","href","docUrl","description","display","flexDirection","justifyContent","alignItems","gap","width","flexWrap","whiteSpace","Row","Col","md","type","howToUse","opt","explanation","backgroundColor","CodeChunk","hasWhiteBackground","basicUsage","replace","Link","to","post","img","SEO","title","seoDescription","keywords","lang","content","property","fig_arrow","trim","chartDescription","Head","Post","Layout","TitleAndDescription","chartType","Container","codeInstall","quickCode","Spacing","axesCode","figCode","customCode","xs","ChartFamilySection","chartFamily","Contact"],"sourceRoot":""}
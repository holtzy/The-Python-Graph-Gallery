{"version":3,"file":"component---src-pages-correlogram-js-05cafc4a7e61069362ff.js","mappings":"oXAgBA,MAAMA,EACJ,ukBAEIC,EAAY,oKAULC,EAAOA,IAClBC,EAAAA,cAACC,EAAAA,EAAG,CACFC,MAAM,cACNC,eAAe,yGAIJ,SAASC,IACtB,OACEJ,EAAAA,cAACK,EAAAA,EAAM,CAACC,cAAY,GAClBN,EAAAA,cAACO,EAAAA,EAAmB,CAClBL,MAAM,cACNM,YAAaX,EACbY,UAAU,gBAGZT,EAAAA,cAACU,EAAAA,EAAS,KACRV,EAAAA,cAAA,MAAIW,GAAG,SAAQ,iBACfX,EAAAA,cAACY,EAAAA,EAAG,CAACC,UAAU,sBACbb,EAAAA,cAACc,EAAAA,EAAG,CAACC,GAAI,GACPf,EAAAA,cAAA,SAAG,kBACcA,EAAAA,cAAA,YAAM,WAAc,yFAGrCA,EAAAA,cAAA,SAAG,6CAC0C,IAC3CA,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAG,iBAAgB,eAAkB,OACvCjB,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAG,cAAa,aAAgB,gCAI9CjB,EAAAA,cAACc,EAAAA,EAAG,CAACC,GAAI,GACPf,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAI,8CACRjB,EAAAA,cAACkB,EAAAA,EAAU,CACTC,QAAQ,wBACRC,QAAQ,kDAKhBpB,EAAAA,cAACqB,EAAAA,EAAS,KAAEvB,GACZE,EAAAA,cAAA,YAGFA,EAAAA,cAACsB,EAAAA,EAAO,MAERtB,EAAAA,cAACU,EAAAA,EAAS,KACRV,EAAAA,cAAA,MAAIW,GAAG,WACLX,EAAAA,cAACuB,EAAAA,GAAO,MAAG,oBACMvB,EAAAA,cAAA,YAAM,YAEzBA,EAAAA,cAAA,SACEA,EAAAA,cAAA,YAAM,WAAc,2DACfA,EAAAA,cAAA,YAAM,UAAa,mBAAgBA,EAAAA,cAAA,YAAM,cAAkB,IAAI,qJAKtEA,EAAAA,cAACY,EAAAA,EAAG,KACFZ,EAAAA,cAACwB,EAAAA,EAAmB,CAClBL,QAAQ,0BACRC,QAAQ,8DACRK,OAAO,4BAETzB,EAAAA,cAACwB,EAAAA,EAAmB,CAClBL,QAAQ,0BACRC,QAAQ,4DACRK,OAAO,4BAETzB,EAAAA,cAACwB,EAAAA,EAAmB,CAClBL,QAAQ,0BACRC,QAAQ,wDACRK,OAAO,8BAKbzB,EAAAA,cAACsB,EAAAA,EAAO,MAERtB,EAAAA,cAACU,EAAAA,EAAS,KACRV,EAAAA,cAAA,MAAIW,GAAG,cACLX,EAAAA,cAAC0B,EAAAA,GAAU,MAAG,oBACG1B,EAAAA,cAAA,YAAM,eAEzBA,EAAAA,cAAA,SAAG,6OAMHA,EAAAA,cAACY,EAAAA,EAAG,KACFZ,EAAAA,cAACwB,EAAAA,EAAmB,CAClBL,QAAQ,mCACRC,QAAQ,qDACRK,OAAO,wCAKbzB,EAAAA,cAACsB,EAAAA,EAAO,MAERtB,EAAAA,cAAA,OAAKa,UAAU,eACbb,EAAAA,cAACU,EAAAA,EAAS,KACRV,EAAAA,cAAA,MAAIW,GAAG,WAAU,qDAGjBX,EAAAA,cAAA,SAAG,6CAC0C,IAC3CA,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAG,iBAAgB,gBAAmB,OAAK,IACjDjB,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAG,cAAa,cAAiB,yFAGzCjB,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAG,iBACPjB,EAAAA,cAAC2B,EAAAA,EAAM,CAACC,KAAK,MAAK,wBAEpB5B,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAG,cACPjB,EAAAA,cAAC2B,EAAAA,EAAM,CAACC,KAAK,MAAK,wBAKxB5B,EAAAA,cAACsB,EAAAA,EAAO,MAERtB,EAAAA,cAAA,OAAKa,UAAU,cAAcF,GAAG,WAC9BX,EAAAA,cAACU,EAAAA,EAAS,KACRV,EAAAA,cAAC6B,EAAAA,EAAkB,CAACC,YAAY,kBAIpC9B,EAAAA,cAACsB,EAAAA,EAAO,MAERtB,EAAAA,cAACU,EAAAA,EAAS,KACRV,EAAAA,cAAC+B,EAAAA,EAAO,OAGV/B,EAAAA,cAACsB,EAAAA,EAAO,MAGd,C,qEC7JO,MAAMrB,EAAM+B,IAAiD,IAAhD,MAAE9B,EAAK,eAAEC,EAAc,SAAE8B,EAAQ,MAAEC,GAAOF,EAC5D,OACEhC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,aAAQE,GACRF,EAAAA,cAAA,QAAMmC,KAAK,OACXnC,EAAAA,cAAA,QACEoC,KAAK,cACLC,QAASlC,GAAkB,qCAE7BH,EAAAA,cAAA,QAAMoC,KAAK,SAASC,QAAQ,cAC5BrC,EAAAA,cAAA,QACEoC,KAAK,WACLC,QAASJ,GAAY,6CAGvBjC,EAAAA,cAAA,QAAMsC,SAAS,eAAeD,QAAQ,6BACtCrC,EAAAA,cAAA,QAAMsC,SAAS,WAAWD,QAASnC,IACnCF,EAAAA,cAAA,QACEsC,SAAS,WACTD,QACEH,GACA,oGAGJlC,EAAAA,cAAA,QAAMsC,SAAS,iBAAiBD,QAASlC,IACzCH,EAAAA,cAAA,QAAMoC,KAAK,eAAeC,QAAQ,wBAClCrC,EAAAA,cAAA,QAAMoC,KAAK,eAAeC,QAAQ,qBACjC,C,mGC/BQ,SAASb,EAAmBQ,GAAgC,IAA/B,QAAEb,EAAO,QAAEC,EAAO,OAAEK,GAAQO,EACtE,OACEhC,EAAAA,cAACc,EAAAA,EAAG,CAACyB,GAAI,GAAIxB,GAAI,GACff,EAAAA,cAACgB,EAAAA,KAAI,CAACC,GAAIQ,GACRzB,EAAAA,cAACkB,EAAAA,EAAU,CAACC,QAASA,EAASC,QAASA,KAI/C,C,yFCPA,MAAMoB,EAAU,CACd,iBACA,yBACA,wBAKa,SAAStB,EAAUc,GAAwB,IAAvB,QAAEb,EAAO,QAAEC,GAASY,EACrD,GAAIQ,EAAQC,SAAStB,GACnB,OAAOnB,EAAAA,cAAA,SAAG,QAGZ,MAgBMkC,GAhBOQ,EAAAA,EAAAA,gBAAe,cAgBTC,QAAQC,MAAMC,MAAMC,GAC9BA,EAAEC,KAAKX,KAAKK,SAAStB,KAG9B,OAAKe,EAMHlC,EAAAA,cAAAA,EAAAA,SAAA,KACEA,EAAAA,cAAA,OAAKa,UAAU,uBACbb,EAAAA,cAACgD,EAAAA,EAAW,CACVd,MAAOA,EAAMa,KAAKE,gBAAgBC,gBAClCC,IAAK/B,EACLP,UAAU,kBAEXO,GACCpB,EAAAA,cAAA,OAAKa,UAAU,qBACbb,EAAAA,cAAA,OAAKa,UAAU,yBACbb,EAAAA,cAAA,SAAIoB,OAfP,IAsBX,C","sources":["webpack://the-python-graph-gallery/./src/pages/correlogram.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/ChartImage.js"],"sourcesContent":["import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport { Matplotlib, Seaborn } from '../components/MiscellaneousLogos';\nimport { Button, Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport ChartImage from '../components/ChartImage';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\n\nconst chartDescription =\n  \"<p>A <a href='https://www.data-to-viz.com/graph/correlogram.html'>correlogram</a> or <a href='https://www.data-to-viz.com/graph/correlogram.html'>correlation matrix</a> allows to analyse the relationship between each pair of numeric variables of a matrix. The correlation is visualised as a <a href='https://python-graph-gallery.com/scatter-plot'>scatterplot</a>. The diagonal represents the distribution of each variable with a <a href='https://python-graph-gallery.com/histogram'>histogram</a> or a <a href='https://python-graph-gallery.com/density-plot'>density plot</a>.</p > \";\n\nconst quickCode = `# library & dataset\nimport seaborn as sns\ndf = sns.load_dataset('iris')\nimport matplotlib.pyplot as plt\n\n# Basic correlogram\nsns.pairplot(df)\nplt.show()\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Correlogram\"\n    seoDescription=\"A collection of correlogram examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function Correlogram() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Correlogram\"\n        description={chartDescription}\n        chartType=\"correlogram\"\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              Once more, the <code>Seaborn</code> library is here to build a\n              high quality correlogram with a few lines of code only.ðŸ”¥\n            </p>\n            <p>\n              Note that all the stuff you learned in the{' '}\n              <Link to=\"/scatter-plot\">scatterplot</Link>\n              and <Link to=\"/histogram\">histogram</Link> sections can be used\n              here.\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/110-basic-correlation-matrix-with-seaborn'}>\n              <ChartImage\n                imgName=\"110_Basic_Correlogram\"\n                caption=\"Basic correlogram with Python and Seaborn.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n        <br />\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\">\n          <Seaborn />\n          Correlogram with <code>Seaborn</code>\n        </h2>\n        <p>\n          <code>Seaborn</code> is definitely the best way to build a correlogram\n          with <code>python</code>. It provides a <code>pairplot()</code>{' '}\n          function that handles most of the work for you. The examples below\n          give an overview of the customizations you can apply to it to suits\n          your need.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"111_Correlogram_custom1\"\n            caption=\"Correlogram with linear trend displayed on each scatterplot\"\n            linkTo=\"/111-custom-correlogram\"\n          />\n          <ChartImageContainer\n            imgName=\"111_Correlogram_custom4\"\n            caption=\"Apply colors to each group and customized the scatterplot\"\n            linkTo=\"/111-custom-correlogram\"\n          />\n          <ChartImageContainer\n            imgName=\"111_Correlogram_custom7\"\n            caption=\"Customize the distributions displayed on the diagonal\"\n            linkTo=\"/111-custom-correlogram\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib />\n          Correlogram with <code>Matplotlib</code>\n        </h2>\n        <p>\n          As usual it is totally possible to build the chart with Matplotlib,\n          but requires to write a bit more code. Basically, it is done using the\n          subplots() function to create the grid, and next building a loop to\n          add the charts one by one.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"how-to-remove-axis-in-matplotlib\"\n            caption=\"How to remove some unused entries in a chart grid.\"\n            linkTo=\"/how-to-remove-axis-in-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <h2 id=\"Related\">\n            &#128161; Scatterplot and Histogram sections are related\n          </h2>\n          <p>\n            Note that a correlogram is an aggregate of{' '}\n            <Link to=\"/scatter-plot\">scatterplots</Link> and{' '}\n            <Link to=\"/histogram\">histograms</Link>. Most of the customizations\n            described in those related sections can be applied here.\n          </p>\n          <Link to=\"/scatter-plot\">\n            <Button size=\"sm\">Scatterplot section</Button>\n          </Link>\n          <Link to=\"/histogram\">\n            <Button size=\"sm\">Histogram section</Button>\n          </Link>\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"correlation\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta property=\"og:title\" content={title} />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n"],"names":["chartDescription","quickCode","Head","React","SEO","title","seoDescription","Correlogram","Layout","isTocEnabled","TitleAndDescription","description","chartType","Container","id","Row","className","Col","md","Link","to","ChartImage","imgName","caption","CodeChunk","Spacing","Seaborn","ChartImageContainer","linkTo","Matplotlib","Button","size","ChartFamilySection","chartFamily","Contact","_ref","keywords","image","lang","name","content","property","xs","allGifs","includes","useStaticQuery","allFile","edges","find","n","node","GatsbyImage","childImageSharp","gatsbyImageData","alt"],"sourceRoot":""}
{"version":3,"file":"component---src-pages-barplot-js-18a7c3620862633941ab.js","mappings":"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","sources":["webpack://the-python-graph-gallery/./src/functions/barplot.js","webpack://the-python-graph-gallery/./src/pages/barplot.js","webpack://the-python-graph-gallery/./src/components/SEO.jsx","webpack://the-python-graph-gallery/./src/components/ChartImageContainer.js","webpack://the-python-graph-gallery/./src/components/ChartImage.js","webpack://the-python-graph-gallery/./src/functions/paramDescription.js","webpack://the-python-graph-gallery/./src/components/FunctionExploration.js"],"sourcesContent":["import React from 'react';\nimport {\n  colorHowToUse,\n  hueDescription,\n  paletteDescription,\n  paletteHowToUse,\n  hueHowToUse,\n  dataDescription,\n  dataHowToUse,\n} from './paramDescription';\n\nconst name = 'barplot()';\nconst description = (\n  <>\n    <p>\n      The <code>barplot()</code> function of <a href=\"/seaborn\">seaborn</a>{' '}\n      creates a bar plot to show the relationship between a numeric variable and\n      one or more categorical variables. It estimates the central tendency and\n      uncertainty around it.\n    </p>\n  </>\n);\n\nconst docUrl = 'https://seaborn.pydata.org/generated/seaborn.barplot.html';\n//\n//\n//\n//\n//\nconst param1 = {\n  name: 'data',\n  description: <div>{dataDescription}</div>,\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ntips = sns.load_dataset(\"tips\")\nsns.barplot(x=\"day\", y=\"total_bill\", data=tips)\nplt.show()\n`.trim(),\n  type: 'dataframe',\n  howToUse: <div>{dataHowToUse}</div>,\n  img: 'basic-barplot-with-seaborn2',\n  post: 'basic-barplot-with-seaborn',\n};\n//\n//\n//\n//\n//\nconst param2 = {\n  name: 'x',\n  description: (\n    <p>\n      If `<code>x</code>` includes categorical data, then `<code>y</code>` must\n      contain numerical values.\n    </p>\n  ),\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ntips = sns.load_dataset(\"tips\")\nsns.barplot(x=\"day\", y=\"total_bill\", data=tips)\nplt.show()\n`.trim(),\n  type: 'names of variables in data or array-like',\n  howToUse: (\n    <p>\n      Can be vector data or column names from the <code>data</code> parameter.\n    </p>\n  ),\n  img: 'basic-barplot-with-seaborn2',\n  post: 'basic-barplot-with-seaborn',\n};\n//\n//\n//\n//\n//\nconst param3 = {\n  name: 'y',\n  description: (\n    <p>\n      If `<code>y</code>` includes categorical data, then `<code>x</code>` must\n      contain numerical values.\n    </p>\n  ),\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ntips = sns.load_dataset(\"tips\")\nsns.barplot(x=\"total_bill\", y=\"day\", data=tips)\nplt.show()\n`.trim(),\n  type: 'names of variables in data or array-like',\n  howToUse: (\n    <p>\n      Can be vector data or column names from the <code>data</code> parameter.\n    </p>\n  ),\n  img: 'basic-barplot-with-seaborn1',\n  post: 'basic-barplot-with-seaborn',\n};\n//\n//\n//\n//\n//\nconst param4 = {\n  name: 'hue',\n  description: <div>{hueDescription}</div>,\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ntips = sns.load_dataset(\"tips\")\nsns.barplot(x=\"day\", y=\"total_bill\", hue=\"sex\", data=tips)\nplt.show()\n`.trim(),\n  type: 'name of variables in data',\n  howToUse: <div>{hueHowToUse}</div>,\n  img: 'tuto-barplot-1-square',\n  post: 'basic-barplot-with-seaborn',\n};\n//\n//\n//\n//\n//\nconst param5 = {\n  name: 'color',\n  description: <p>Color to use for the bars.</p>,\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ntips = sns.load_dataset(\"tips\")\nsns.barplot(\n  x=\"day\",\n  y=\"total_bill\",\n  data=tips,\n  color=\"darkred\"\n)\nplt.show()\n`.trim(),\n  type: 'matplotlib color',\n  howToUse: <div>{colorHowToUse}</div>,\n  img: 'tuto-barplot-2-square',\n  post: 'basic-barplot-with-seaborn',\n};\n//\n//\n//\n//\n//\nconst param6 = {\n  name: 'estimator',\n  description: (\n    <p>Statistical function to estimate within each categorical bin.</p>\n  ),\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport numpy as np\n\ntips = sns.load_dataset(\"tips\")\nsns.barplot(\n  x=\"day\",\n  y=\"total_bill\",\n  data=tips,\n  estimator=np.median\n)\nplt.show()\n`.trim(),\n  type: 'callable',\n  howToUse: (\n    <p>\n      Use statistical functions like <code>np.mean</code>,{' '}\n      <code>np.median</code>, etc.\n    </p>\n  ),\n  img: 'error-bars-on-barplot',\n  post: 'error-bars-on-barplot',\n};\n//\n//\n//\n//\n//\nconst param7 = {\n  name: 'palette',\n  description: <div>{paletteDescription}</div>,\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ntips = sns.load_dataset(\"tips\")\nsns.barplot(\n   x=\"day\",\n   hue=\"sex\",\n   y=\"total_bill\",   \n   data=tips,\n   palette=[\"#FFDE01FF\", \"#A5BAD6FF\"]\n)\nplt.show()\n`.trim(),\n  type: 'list',\n  howToUse: <div>{paletteHowToUse}</div>,\n  img: 'tuto-barplot-3',\n  post: 'basic-barplot-with-seaborn',\n};\n//\n//\n//\n//\n//\nconst param8 = {\n  name: 'gap',\n  description: <div>Specifies the gap between bars.</div>,\n  basicUsage: `\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\ntips = sns.load_dataset(\"tips\")\nsns.barplot(\n   x=\"day\",\n   hue=\"sex\",\n   y=\"total_bill\",   \n   data=tips,\n   gap=2.3,\n)\nplt.show()\n`.trim(),\n  type: 'number',\n  howToUse: (\n    <div>\n      It can be any value and adjusts the spacing between individual bars or\n      groups of bars.\n    </div>\n  ),\n  img: 'tuto-barplot-4-square',\n  post: 'basic-barplot-with-seaborn',\n};\n\nexport const barplot = {\n  name,\n  description,\n  docUrl,\n  parameters: [param1, param2, param3, param4, param5, param6, param7, param8],\n};\n","import React from 'react';\nimport TitleAndDescription from '../components/TitleAndDescription';\nimport Layout from '../components/Layout';\nimport Container from 'react-bootstrap/Container';\nimport Contact from '../components/Contact';\nimport Row from 'react-bootstrap/Row';\nimport ChartImageContainer from '../components/ChartImageContainer';\nimport ChartFamilySection from '../components/ChartFamilySection';\nimport { Link } from 'gatsby';\nimport {\n  Seaborn,\n  Matplotlib,\n  Pandas,\n  Plotnine,\n  Plotly,\n} from '../components/MiscellaneousLogos';\nimport { Col } from 'react-bootstrap';\nimport CodeChunk from '../components/CodeChunk';\nimport ChartImage from '../components/ChartImage';\nimport Spacing from '../components/Spacing';\nimport { SEO } from '../components/SEO';\nimport { barplot } from '../functions/barplot';\nimport FunctionExploration from '../components/FunctionExploration';\n\nconst chartDescription = (\n  <>\n    <p>\n      A <a href=\"https://www.data-to-viz.com/graph/barplot.html\">barplot</a>{' '}\n      shows the relationship between a <b>numeric</b> and a <b>categoric</b>{' '}\n      variable. Each entity of the categoric variable is represented as a{' '}\n      <b>bar</b>. The size of the bar represents its numeric value.{' '}\n    </p>\n    <p>\n      This section shows how to build a barplot with <code>Python</code>, using\n      libraries like <code>Matplotlib</code> and <code>Seaborn</code>. It start\n      by explaining how to build a very basic barplot, and then provides\n      tutorials for more customized versions.\n    </p>\n    <p>\n      Note that this page also provides guidelines on how to build{' '}\n      <b>stacked</b> and <b>grouped</b> barplot, 2 common variatons useful when\n      several levels of grouping are available.\n    </p>\n  </>\n);\n\nconst quickCode = `# Libraries\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Make a random dataset:\nheight = [3, 12, 5, 18, 45]\nbars = ('A', 'B', 'C', 'D', 'E')\ny_pos = np.arange(len(bars))\n\n# Create bars\nplt.bar(y_pos, height)\n\n# Create names on the x-axis\nplt.xticks(y_pos, bars)\n\n# Show graphic\nplt.show()\n`;\n\nexport const Head = () => (\n  <SEO\n    title=\"Python Barplot Examples with Code\"\n    seoDescription=\"A collection of barplot examples made with Python, coming with explanation and reproducible code\"\n  />\n);\n\nexport default function Barplot() {\n  return (\n    <Layout isTocEnabled>\n      <TitleAndDescription\n        title=\"Barplot\"\n        description={chartDescription}\n        chartType={'barplot'}\n      />\n\n      <Container>\n        <h2 id=\"Quick\">&#9201; Quick start</h2>\n        <Row className=\"align-items-center\">\n          <Col md={6}>\n            <p>\n              <code>Matplotlib</code> is pretty convenient to build a barplot\n              thanks to its <code>bar()</code> function. Seaborn works perfectly\n              as well, see its dedicated section.🔥\n            </p>\n          </Col>\n          <Col md={6}>\n            <Link to={'/1-basic-barplot'}>\n              <ChartImage\n                imgName=\"1_basic_barplot\"\n                caption=\"Most basic barplot with Python & Matplotlib.\"\n              />\n            </Link>\n          </Col>\n        </Row>\n        <CodeChunk>{quickCode}</CodeChunk>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Matplotlib\">\n          <Matplotlib />\n          Barplot with <code>Matplotlib</code>\n        </h2>\n        <p>\n          <code>Matplotlib</code> is probably the most famous and flexible\n          python library for data visualization. It is appropriate to build any\n          kind of chart, including the barchart thanks to its <code>bar()</code>{' '}\n          function.\n        </p>\n        <p>\n          The examples below should get you started. They go from{' '}\n          <Link to=\"/1-basic-barplot\">basic examples</Link> to the details on\n          how to <Link to=\"/3-control-color-of-barplots\">customize</Link> a\n          barplot appropriately.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"2_horizontal_barplot\"\n            caption=\"Horizontal barplot, handy to make labels more readable.\"\n            linkTo=\"/2-horizontal-barplot\"\n          />\n          <ChartImageContainer\n            imgName=\"3_control_color_barplot2\"\n            caption=\"Barplot and color customization.\"\n            linkTo=\"/3-control-color-of-barplots\"\n          />\n          <ChartImageContainer\n            imgName=\"3_control_color_barplot4\"\n            caption=\"Change the bar stroke colors.\"\n            linkTo=\"/3-control-color-of-barplots\"\n          />\n          <ChartImageContainer\n            imgName=\"4_add_title_and_axe_labels\"\n            caption=\"Title and axis labels with Matplotlib.\"\n            linkTo=\"/4-add-title-and-axis-label\"\n          />\n          <ChartImageContainer\n            imgName=\"5_custom_space_between_bars\"\n            caption=\"Custom bar width. Can be handy to illustrate the sample size.\"\n            linkTo=\"/5-control-width-and-space-in-barplots\"\n          />\n          <ChartImageContainer\n            imgName=\"5_custom_width_of_bars\"\n            caption=\"Custom space between bars.\"\n            linkTo=\"/5-control-width-and-space-in-barplots\"\n          />\n          <ChartImageContainer\n            imgName=\"6_change_texture\"\n            caption=\"Change bar texture.\"\n            linkTo=\"/6-change-bars-texture\"\n          />\n          <ChartImageContainer\n            imgName=\"7_increase_margin\"\n            caption=\"More space under X axis to fit long labels.\"\n            linkTo=\"/7-custom-barplot-layout\"\n          />\n          <ChartImageContainer\n            imgName=\"7_custom_label\"\n            caption=\"Customize the bar labels.\"\n            linkTo=\"/7-custom-barplot-layout\"\n          />\n          <ChartImageContainer\n            imgName=\"8_confidence_interval\"\n            caption=\"Barplot with confidence interval.\"\n            linkTo=\"/8-add-confidence-interval-on-barplot\"\n          />\n          <ChartImageContainer\n            imgName=\"10_barplot_with_number_of_observations\"\n            caption=\"Highly customized barplot with colors, legend, labels and more.\"\n            linkTo=\"/10-barplot-with-number-of-observation\"\n          />\n          <ChartImageContainer\n            imgName=\"web-tornado-chart\"\n            caption=\"Tornado chart with annotations\"\n            linkTo=\"/web-tornado-chart\"\n          />\n          <ChartImageContainer\n            imgName=\"584-introduction-hatch-matplotlib-1\"\n            caption=\"Add patterns to your barplot\"\n            linkTo=\"/584-introduction-hatch-matplotlib\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Seaborn\">\n          <Seaborn />\n          Barplot with <code>Seaborn</code>\n        </h2>\n        <p>\n          <code>Seaborn</code> is definitely a good alternative to{' '}\n          <code>Matplotlib</code> to build a barplot. It comes with a{' '}\n          <code>barplot()</code> function that will get you started in minutes.\n        </p>\n        <p>\n          As often, note that the <code>Seaborn</code> alternative allows to\n          write less code to build the chart, but is slighlty more limited in\n          term of customization\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"basic-barplot-with-seaborn1\"\n            caption=\"Most basic barplot with Python and Seaborn\"\n            linkTo=\"/basic-barplot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"basic-barplot-with-seaborn2\"\n            caption=\"Make your barplot vertical by swapping the x and y parameters\"\n            linkTo=\"/basic-barplot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"basic-barplot-with-seaborn3\"\n            caption=\"Learn how to reorder groups in a seaborn barplot\"\n            linkTo=\"/basic-barplot-with-seaborn\"\n          />\n          <ChartImageContainer\n            imgName=\"error-bars-on-barplot\"\n            caption=\"Add error bars on a seaborn barplot\"\n            linkTo=\"/error-bars-on-barplot\"\n          />\n          <ChartImageContainer\n            imgName=\"web-population-pyramid\"\n            caption=\"Population pyramid of a marketing funnel\"\n            linkTo=\"/web-population-pyramid\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\">\n        <Container>\n          <FunctionExploration funDetails={barplot} />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Stacked & Grouped\">\n          <Matplotlib />\n          Stacked and Grouped barplot with <code>Matplotlib</code>\n        </h2>\n        <p>\n          <u>Stacked</u> and <u>Grouped</u> barplots are a variation of the more\n          simple barplot. They display the value of a numeric variable for each\n          group and subgroups of a dataset. Subgroups can be stacked (stacked\n          barplot) or set one beside the other (grouped barplot).\n        </p>\n        <p>\n          The three examples below are in-depth tutorial explaining how to build\n          them with Python.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"12_stacked_barplot\"\n            caption=\"How to build a stacked barplot with Python.\"\n            linkTo=\"/12-stacked-barplot-with-matplotlib\"\n          />\n          <ChartImageContainer\n            imgName=\"12_grouped_barplot\"\n            caption=\"How to build a grouped barplot with Python.\"\n            linkTo=\"/11-grouped-barplot\"\n          />\n          <ChartImageContainer\n            imgName=\"12_stacked_percent_barplot\"\n            caption=\"How to build a percent stacked barplot with Python..\"\n            linkTo=\"/13-percent-stacked-barplot\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Stacked & Grouped\">\n          <Seaborn />\n          Stacked and Grouped barplot with <code>Seaborn</code>\n        </h2>\n        <p>\n          The <code>barplot()</code> function of <code>seaborn</code> allows to\n          quickly build a grouped barplot. You just have to pass the column used\n          for subgrouping to the <code>hue</code> parameter.\n        </p>\n        <p>\n          It gets a bit more tricky for stacked and percent stacked barplot, but\n          the examples below should hopefully help.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"grouped-barplot1\"\n            caption=\"Grouped barplot with python and seaborn\"\n            linkTo=\"/grouped-barplot\"\n          />\n          <ChartImageContainer\n            imgName=\"stacked-barplot-seaborn\"\n            caption=\"Stacked barchart with python and seaborn\"\n            linkTo=\"/stacked-and-percent-stacked-barplot\"\n          />\n          <ChartImageContainer\n            imgName=\"stacked-percent-barplot-seaborn\"\n            caption=\"Percent stacked barchart with python and seaborn\"\n            linkTo=\"/stacked-and-percent-stacked-barplot\"\n          />\n          <ChartImageContainer\n            imgName=\"552-table-combined-with-plot\"\n            caption=\"Stacked Barplot combined with a table\"\n            linkTo=\"/552-table-combined-with-plot\"\n          />\n        </Row>\n        <div style={{ margin: '0 auto' }}>\n          <Link to=\"/grouped-barplot\">\n            <ChartImage\n              imgName={'grouped-barplot2'}\n              caption={\n                'Grouped barplot with small multiples to show 3 levels of grouping.'\n              }\n            />\n          </Link>\n        </div>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Pandas\">\n          <Pandas />\n          Barplot with <code>Pandas</code>\n        </h2>\n        <p>\n          The <code>bar()</code> function of <code>pandas</code> allows to\n          quickly build a barplot. You will find below examples of how to create\n          simple and grouped barcharts using <code>pandas</code>.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"538-introduction-to-barplot-with-pandas\"\n            caption=\"Introduction to barplot with pandas\"\n            linkTo=\"/538-introduction-to-barplot-with-pandas\"\n          />\n          <ChartImageContainer\n            imgName=\"539-customizing-barplot-with-pandas\"\n            caption=\"Customizing barplot with pandas\"\n            linkTo=\"/539-customizing-barplot-with-pandas\"\n          />\n          <ChartImageContainer\n            imgName=\"540-barplots-grouped-by-color-with-pandas\"\n            caption=\"Barplots grouped by color with pandas\"\n            linkTo=\"/540-barplots-grouped-by-color-with-pandas\"\n          />\n          <ChartImageContainer\n            imgName=\"547-stacked-barplots-with-pandas-1\"\n            caption=\"Stacked barplot with pandas\"\n            linkTo=\"/547-stacked-barplots-with-pandas\"\n          />\n          <ChartImageContainer\n            imgName=\"547-stacked-barplots-with-pandas-2\"\n            caption=\"Stacked 100% barplot with pandas\"\n            linkTo=\"/547-stacked-barplots-with-pandas\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Plotly\">\n          <Plotly />\n          Barplot with <code>Plotly</code>\n        </h2>\n        <p>\n          The <code>Plotly</code> provides <b>2 ways</b> to build a barplot. The\n          first one is to use the <code>plotly express</code> module for fast\n          and interactive barplots. The second one is to use the{' '}\n          <code>graph objects</code> module for more advanced customization.\n        </p>\n        <p>The examples below explains both methods.</p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"582-simple-barplot-plotly\"\n            caption=\"Interactive Barplot with plotly\"\n            linkTo=\"/582-simple-barplot-plotly\"\n          />\n          <ChartImageContainer\n            imgName=\"583-stacked-barplot-plotly\"\n            caption=\"Interactive Stacked Barplot with plotly\"\n            linkTo=\"/583-stacked-barplot-plotly\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Plotnine\">\n          <Plotnine />\n          Barplot with <code>Plotnine</code>\n        </h2>\n        <p>\n          The <a href=\"https://python-graph-gallery.com/plotnine/\">plotnine</a>{' '}\n          library is a great alternative to build barplots. It is based on the{' '}\n          <b>grammar of graphics</b>, like ggplot2 in{' '}\n          <a href=\"https://r-graph-gallery.com/\">R</a>.\n        </p>\n        <p>\n          The examples below should get you started. They go from very simple\n          examples and how to customize them.\n        </p>\n        <Row>\n          <ChartImageContainer\n            imgName=\"576-introduction-barplot-plotnine-1\"\n            caption=\"Most simple barplot\"\n            linkTo=\"/576-introduction-barplot-plotnine\"\n          />\n          <ChartImageContainer\n            imgName=\"576-introduction-barplot-plotnine-2\"\n            caption=\"Change color and edge color\"\n            linkTo=\"/576-introduction-barplot-plotnine\"\n          />\n          <ChartImageContainer\n            imgName=\"576-introduction-barplot-plotnine-3\"\n            caption=\"Custom width of the bars\"\n            linkTo=\"/576-introduction-barplot-plotnine\"\n          />\n          <ChartImageContainer\n            imgName=\"577-customize-barplot-plotnine-1\"\n            caption=\"Define one specific color per bar\"\n            linkTo=\"/577-customize-barplot-plotnine\"\n          />\n          <ChartImageContainer\n            imgName=\"577-customize-barplot-plotnine-2\"\n            caption=\"Color bars according to a variable\"\n            linkTo=\"/577-customize-barplot-plotnine\"\n          />\n          <ChartImageContainer\n            imgName=\"577-customize-barplot-plotnine-3\"\n            caption=\"Flip the x and y axis\"\n            linkTo=\"/577-customize-barplot-plotnine\"\n          />\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <Container>\n        <h2 id=\"Best\">\n          <Matplotlib />\n          Best python barplot examples\n        </h2>\n        <p>\n          The web is full of astonishing charts made by awesome bloggers, (often\n          using <a href=\"https://www.r-graph-gallery.com\">R</a>). The{' '}\n          <a href=\"https://python-graph-gallery.com\">Python graph gallery</a>{' '}\n          tries to display (or translate from R) some of the best creations and\n          explain how their source code works. If you want to display your work\n          here, please drop me a word or even better, submit a{' '}\n          <a href=\"https://github.com/holtzy/The-Python-Graph-Gallery\">\n            Pull Request\n          </a>\n          !\n        </p>\n        <Row>\n          <Col xs={12} md={6}>\n            <Link to={'/web-circular-barplot-with-matplotlib'}>\n              <ChartImage\n                imgName={'web-circular-barplot-with-matplotlib-square'}\n                caption={\n                  'A circular barchart with several features per group made with Python and Matplotlib.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={'/web-horizontal-barplot-with-labels-the-economist'}>\n              <ChartImage\n                imgName={\n                  'web-horizontal-barplot-with-labels-the-economist-square'\n                }\n                caption={\n                  'Lear how to mimick the style of the Economist on this horizontal barplot.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={'/web-heatmap-and-radial-barchart-plastics'}>\n              <ChartImage\n                imgName={'web-heatmap-and-radial-barchart-plastics-square2'}\n                caption={\n                  'How to combine a heatmap with a radial barplot on the same figure with heaps of visual tweaks.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={'/web-ordered-mirror-barplot'}>\n              <ChartImage\n                imgName={'web-ordered-mirror-barplot'}\n                caption={\n                  'Mirror barplot with data points and annotations on top.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={'/web-barplot-with-annotations-and-arrows'}>\n              <ChartImage\n                imgName={'web-barplot-with-annotations-and-arrows-square'}\n                caption={\n                  'Barplot with annotations and arrows to highlight specific bars.'\n                }\n              />\n            </Link>\n          </Col>\n          <Col xs={12} md={6}>\n            <Link to={'/web-tornado-chart'}>\n              <ChartImage\n                imgName={'web-tornado-chart'}\n                caption={'Tornado with custom title and colors'}\n              />\n            </Link>\n          </Col>\n        </Row>\n      </Container>\n\n      <Spacing />\n\n      <div className=\"greySection\" id=\"related\">\n        <Container>\n          <ChartFamilySection chartFamily=\"ranking\" />\n        </Container>\n      </div>\n\n      <Spacing />\n\n      <Container>\n        <Contact />\n      </Container>\n\n      <Spacing />\n    </Layout>\n  );\n}\n","// made following the Gatsby Doc: https://www.gatsbyjs.com/docs/how-to/adding-common-features/adding-seo-component/\n\n// This component is called by every page of the website.\n// At the top of each page you will find a Head component export that calls this SEO component\n\n// The SEO component will add stuff like title, description, image, lang... in the head of the HTML page\n// AdThrive ads code is also added here\n\nimport React from 'react';\n\nexport const SEO = ({ title, seoDescription, keywords, image }) => {\n  return (\n    <>\n      <title>{title}</title>\n      <html lang=\"en\" />\n      <meta\n        name=\"description\"\n        content={seoDescription || 'How to build a chart with Python'}\n      />\n      <meta name=\"author\" content=\"Yan Holtz\" />\n      <meta\n        name=\"keywords\"\n        content={keywords || 'python, chart, graph, code, viz, dataviz'}\n      />\n\n      <meta property=\"og:site_name\" content=\"The Python Graph Gallery\" />\n      <meta property=\"og:title\" content={title} />\n      <meta\n        property=\"og:image\"\n        content={\n          image ||\n          'https://github.com/holtzy/The-Python-Graph-Gallery/blob/master/static/overview_PGG.png?raw=true'\n        }\n      />\n      <meta property=\"og:description\" content={seoDescription} />\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta name=\"twitter:site\" content=\"@R_Graph_Gallery\" />\n    </>\n  );\n};\n","import React from \"react\";\nimport ChartImage from \"../components/ChartImage\";\nimport Col from \"react-bootstrap/Col\";\nimport { Link } from \"gatsby\";\n\n// This component wraps a chart image into a column and make it responsive + clickable\nexport default function ChartImageContainer({ imgName, caption, linkTo }) {\n  return (\n    <Col xs={12} md={4}>\n      <Link to={linkTo}>\n        <ChartImage imgName={imgName} caption={caption} />\n      </Link>\n    </Col>\n  );\n}\n","import './chartImage.css';\n\nimport React from 'react';\nimport { useStaticQuery, graphql } from 'gatsby';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport PropTypes from 'prop-types';\n\nconst allGifs = [\n  'animated_chart',\n  'animated_gapminder.gif',\n  'animated_volcano.gif',\n];\n\n// This component displays a logo representing a chart type of the gallery. Example: bar chart\n// Logo has a different size depending on the window size.\nexport default function ChartImage({ imgName, caption }) {\n  if (allGifs.includes(imgName)) {\n    return <p>TODO</p>;\n  }\n\n  const data = useStaticQuery(graphql`\n    query MyQuery {\n      allFile(filter: { relativeDirectory: { eq: \"graph\" } }) {\n        edges {\n          node {\n            id\n            name\n            childImageSharp {\n              gatsbyImageData(placeholder: BLURRED, layout: FULL_WIDTH)\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  const image = data.allFile.edges.find((n) => {\n    return n.node.name.includes(imgName);\n  });\n\n  if (!image) {\n    return null;\n  }\n\n  // Note: alt tag looks to be ignored?\n  return (\n    <>\n      <div className=\"chartImageContainer\">\n        <GatsbyImage\n          image={image.node.childImageSharp.gatsbyImageData}\n          alt={caption}\n          className=\"chartImageImg\"\n        />\n        {caption && (\n          <div className=\"chartImageOverlay\">\n            <div className=\"chartImageOverlayText\">\n              <p>{caption}</p>\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n}\n\nChartImage.propTypes = {\n  imgName: PropTypes.string,\n  caption: PropTypes.string,\n};\n","import React from 'react';\n\nexport const alphaHowToUse = (\n  <p>\n    Values range from <code>0</code> (completely transparent) to <code>1</code>{' '}\n    (completely opaque).\n  </p>\n);\n\nexport const colorHowToUse = (\n  <p>\n    Can be a color name, a Hex code, or an RGB value.{' '}\n    <a href=\"/python-colors\">Learn more about colors.</a>\n  </p>\n);\n\nexport const zorderDescription = (\n  <p>Controls the drawing order of plot elements.</p>\n);\n\nexport const zorderHowToUse = (\n  <p>\n    Higher zorder values are drawn on top of lower values. This is useful when\n    you want certain elements to appear above others.\n  </p>\n);\n\nexport const hatchHowToUse = (\n  <p>\n    It must be in one of: <code>&apos;/&apos;</code>, <code>&apos;\\&apos;</code>\n    , <code>&apos;|&apos;</code>,<code>&apos;-&apos;</code>,{' '}\n    <code>&apos;+&apos;</code>, <code>&apos;x&apos;</code>,{' '}\n    <code>&apos;o&apos;</code>, <code>&apos;O&apos;</code>,\n    <code>&apos;.&apos;</code>, <code>&apos;*&apos;</code>\n  </p>\n);\n\nexport const hueDescription = (\n  <p>\n    Specify the dataset column to use for color encoding in the chart. It allows\n    for grouping and differentiating data points.\n  </p>\n);\n\nexport const hueHowToUse = (\n  <p>\n    Column name to use for color encoding in the chart. It's usually a\n    categorical variable.\n  </p>\n);\n\nexport const dataHowToUse = (\n  <div>\n    <p>\n      It just has to be a <code>pandas.DataFrame</code> (columns are variables),\n      <code>numpy.ndarray</code> (rows/columns are variables), or any\n      mapping/sequence (dictionaries/lists)\n    </p>\n    <p>\n      Supports both long-form (each variable in its own column) and wide-form\n      (variables in separate columns; reshaped internally).\n    </p>\n  </div>\n);\n\nexport const dataDescription = (\n  <p>\n    Dataframe-like (pandas, numpy, polars...) with the columns we want to plot.\n  </p>\n);\n\nexport const linestyleDescription = (\n  <p>Determines the style of the line in the plot.</p>\n);\n\nexport const linestyleHowToUse = (\n  <p>\n    Common values include '-' (solid), '--' (dashed), ':' (dotted), and '-.'\n    (dash-dot).\n  </p>\n);\n\nexport const linewidthDescription = <p>Sets the width of the plotted line.</p>;\n\nexport const linewidthHowToUse = (\n  <p>\n    Larger values create thicker lines. The default value is usually{' '}\n    <code>1</code>.\n  </p>\n);\n\nexport const paletteDescription = (\n  <p>\n    Defines colors for the <code>hue</code> semantic. It can be a list of colors\n    or a matplotlib colormap.\n  </p>\n);\n\nexport const paletteHowToUse = (\n  <div>\n    <p>\n      This parameter is used <b>in combination</b> with the <code>hue</code>{' '}\n      parameter and will a assign a different color to each category in{' '}\n      <code>hue</code>.\n    </p>\n    <p>\n      Moreover, the <a href=\"/introduction-to-pypalettes\">pypalettes library</a>{' '}\n      can help you find the best colors for your chart by providing access to\n      thousands of pre-made color palette.\n    </p>\n  </div>\n);\n","import { Link } from 'gatsby';\nimport React, { useState } from 'react';\nimport { Button, Col, Row } from 'react-bootstrap';\nimport ChartImage from './ChartImage';\n\nimport './functionExploration.css';\nimport CodeChunk from './CodeChunk';\n\nconst capitalize = (s) => {\n  if (typeof s !== 'string') return '';\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nexport default function FunctionExploration({ funDetails }) {\n  const [selectedParameter, setSelectedParameter] = useState(0);\n  const [selectedOpt, setSelectedOpt] = useState(0);\n\n  if (!funDetails) {\n    return null;\n  }\n\n  const selectedParameterInfo = funDetails.parameters[selectedParameter];\n  const selectedOptInfo = selectedParameterInfo.options?.[selectedOpt];\n\n  const argumentButtons = (\n    <div>\n      {funDetails.parameters.map((item, i) => (\n        <Button\n          key={i}\n          value={item.name}\n          size=\"sm\"\n          onClick={() => setSelectedParameter(i)}\n          className={selectedParameter === i ? 'isButtonSelected' : ''}\n        >\n          {item.name}\n        </Button>\n      ))}\n    </div>\n  );\n\n  return (\n    <div style={{ marginBottom: 70 }}>\n      <h2 id={capitalize(funDetails.name + ' details')}>\n        &#128270; <code>{funDetails.name}</code> function parameters\n        <a\n          style={{ marginLeft: '15px', fontSize: '14px' }}\n          href={funDetails.docUrl}\n        >\n          &rarr; see full doc\n        </a>\n      </h2>\n\n      <h3>&rarr; Description</h3>\n      <p>{funDetails.description}</p>\n\n      <div\n        style={{\n          display: 'flex',\n          flexDirection: 'row',\n          justifyContent: 'start',\n          alignItems: 'baseline',\n          gap: 14,\n        }}\n      >\n        <h3 style={{ width: 'auto', flexWrap: 'nowrap', whiteSpace: 'nowrap' }}>\n          &rarr; Arguments\n        </h3>\n        {argumentButtons}\n      </div>\n\n      <Row>\n        <Col md={8}>\n          <div style={{ fontSize: 16 }}>\n            <p className=\"argumentSectionTitle\">Description</p>\n            <p className=\"little-text\">{selectedParameterInfo.description}</p>\n\n            <p className=\"argumentSectionTitle\">\n              Possible values &rarr; {'  '}\n              <span className=\"parameterTypePill\">\n                {selectedParameterInfo.type}\n              </span>\n            </p>\n            <p className=\"little-text\">{selectedParameterInfo.howToUse}</p>\n            {selectedParameterInfo.options && (\n              <>\n                <div\n                  style={{ display: 'flex', gap: 2, alignItems: 'baseline' }}\n                >\n                  {selectedParameterInfo.options.map((opt, i) => {\n                    return (\n                      <Button\n                        size=\"sm\"\n                        className={i === selectedOpt ? 'isButtonSelected' : ''}\n                        onClick={() => setSelectedOpt(i)}\n                      >\n                        {opt.name}\n                      </Button>\n                    );\n                  })}\n                </div>\n                <p>{selectedParameterInfo.options[selectedOpt].explanation}</p>\n              </>\n            )}\n\n            <p className=\"argumentSectionTitle\">Code Example</p>\n            <div style={{ backgroundColor: 'white' }}>\n              <CodeChunk hasWhiteBackground>\n                {selectedParameterInfo.options\n                  ? selectedParameterInfo.basicUsage.replace(\n                      'paramgoeshere',\n                      selectedParameterInfo.options[selectedOpt].name\n                    )\n                  : selectedParameterInfo.basicUsage}\n              </CodeChunk>\n            </div>\n          </div>\n        </Col>\n\n        <Col md={4}>\n          <br />\n          <Link to={'/' + selectedParameterInfo.post}>\n            <ChartImage\n              imgName={selectedOptInfo?.img || selectedParameterInfo.img}\n              caption={'More about the ' + funDetails.name + ' function.'}\n            />\n          </Link>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n"],"names":["barplot","name","description","React","href","docUrl","parameters","dataDescription","basicUsage","trim","type","howToUse","dataHowToUse","img","post","hueDescription","hueHowToUse","colorHowToUse","paletteDescription","paletteHowToUse","chartDescription","quickCode","Head","SEO","title","seoDescription","Barplot","Layout","isTocEnabled","TitleAndDescription","chartType","Container","id","Row","className","Col","md","Link","to","ChartImage","imgName","caption","CodeChunk","Spacing","Matplotlib","ChartImageContainer","linkTo","Seaborn","FunctionExploration","funDetails","style","margin","Pandas","Plotly","Plotnine","xs","ChartFamilySection","chartFamily","Contact","_ref","keywords","image","lang","content","property","allGifs","includes","useStaticQuery","allFile","edges","find","n","node","GatsbyImage","childImageSharp","gatsbyImageData","alt","alphaHowToUse","zorderDescription","zorderHowToUse","hatchHowToUse","linestyleDescription","linestyleHowToUse","linewidthDescription","linewidthHowToUse","capitalize","s","charAt","toUpperCase","slice","_selectedParameterInf","selectedParameter","setSelectedParameter","useState","selectedOpt","setSelectedOpt","selectedParameterInfo","selectedOptInfo","options","argumentButtons","map","item","i","Button","key","value","size","onClick","marginBottom","marginLeft","fontSize","display","flexDirection","justifyContent","alignItems","gap","width","flexWrap","whiteSpace","opt","explanation","backgroundColor","hasWhiteBackground","replace"],"sourceRoot":""}